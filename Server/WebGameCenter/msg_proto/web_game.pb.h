// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_game.proto

#ifndef PROTOBUF_web_5fgame_2eproto__INCLUDED
#define PROTOBUF_web_5fgame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "web_data.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_web_5fgame_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[64];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlayerRequestLoginServerIdImpl();
void InitDefaultsPlayerRequestLoginServerId();
void InitDefaultsPlayerRequestLoginImpl();
void InitDefaultsPlayerRequestLogin();
void InitDefaultsPlayerRequestLoginMakeTeamImpl();
void InitDefaultsPlayerRequestLoginMakeTeam();
void InitDefaultsPlayerRequestLoginInviteTeamImpl();
void InitDefaultsPlayerRequestLoginInviteTeam();
void InitDefaultsPlayerRequestLoginChangeSlotImpl();
void InitDefaultsPlayerRequestLoginChangeSlot();
void InitDefaultsPlayerRequestLoginGameStartImpl();
void InitDefaultsPlayerRequestLoginGameStart();
void InitDefaultsPlayerRequestLoginOnLinePlayerImpl();
void InitDefaultsPlayerRequestLoginOnLinePlayer();
void InitDefaultsPlayerRequestLoginEnterTeamImpl();
void InitDefaultsPlayerRequestLoginEnterTeam();
void InitDefaultsPlayerRequestLoginRefuseEnterTeamImpl();
void InitDefaultsPlayerRequestLoginRefuseEnterTeam();
void InitDefaultsPlayerRequestLoginLeaveTeamImpl();
void InitDefaultsPlayerRequestLoginLeaveTeam();
void InitDefaultsLoginAckPlayerServerIdImpl();
void InitDefaultsLoginAckPlayerServerId();
void InitDefaultsLoginAckPlayerLoginResultImpl();
void InitDefaultsLoginAckPlayerLoginResult();
void InitDefaultsLoginNotifyPlayerGameKickImpl();
void InitDefaultsLoginNotifyPlayerGameKick();
void InitDefaultsLoginAckPlayerMakeTeamImpl();
void InitDefaultsLoginAckPlayerMakeTeam();
void InitDefaultsLoginNotifyPlayerTeamInfoImpl();
void InitDefaultsLoginNotifyPlayerTeamInfo();
void InitDefaultsLoginAckPlayerInviteTeamImpl();
void InitDefaultsLoginAckPlayerInviteTeam();
void InitDefaultsLoginNotifyPlayerInviteTeamImpl();
void InitDefaultsLoginNotifyPlayerInviteTeam();
void InitDefaultsLoginAckPlayerChangeSlotImpl();
void InitDefaultsLoginAckPlayerChangeSlot();
void InitDefaultsLoginNotifyPlayerTeamKickImpl();
void InitDefaultsLoginNotifyPlayerTeamKick();
void InitDefaultsLoginAckPlayerGameStartImpl();
void InitDefaultsLoginAckPlayerGameStart();
void InitDefaultsLoginAckPlayerOnLinePlayerImpl();
void InitDefaultsLoginAckPlayerOnLinePlayer();
void InitDefaultsLoginAckPlayerEnterTeamImpl();
void InitDefaultsLoginAckPlayerEnterTeam();
void InitDefaultsLoginNotifyPlayerRefuseEnterTeamImpl();
void InitDefaultsLoginNotifyPlayerRefuseEnterTeam();
void InitDefaultsLoginAckPlayerLeaveTeamImpl();
void InitDefaultsLoginAckPlayerLeaveTeam();
void InitDefaultsLoginNotifyLoginPlayerKickImpl();
void InitDefaultsLoginNotifyLoginPlayerKick();
void InitDefaultsLoginRequestLoginInviteTeamImpl();
void InitDefaultsLoginRequestLoginInviteTeam();
void InitDefaultsLoginAckLoginInviteTeamImpl();
void InitDefaultsLoginAckLoginInviteTeam();
void InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeamImpl();
void InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeam();
void InitDefaultsLoginRequestTeamMakeTeamImpl();
void InitDefaultsLoginRequestTeamMakeTeam();
void InitDefaultsLoginRequestTeamInviteTeamImpl();
void InitDefaultsLoginRequestTeamInviteTeam();
void InitDefaultsLoginRequestTeamChangeSlotImpl();
void InitDefaultsLoginRequestTeamChangeSlot();
void InitDefaultsLoginRequestTeamKickPlayerImpl();
void InitDefaultsLoginRequestTeamKickPlayer();
void InitDefaultsLoginRequestTeamGameStartImpl();
void InitDefaultsLoginRequestTeamGameStart();
void InitDefaultsLoginRequestTeamEnterTeamImpl();
void InitDefaultsLoginRequestTeamEnterTeam();
void InitDefaultsLoginRequestTeamPlayerLeaveImpl();
void InitDefaultsLoginRequestTeamPlayerLeave();
void InitDefaultsTeamAckLoginMakeTeamImpl();
void InitDefaultsTeamAckLoginMakeTeam();
void InitDefaultsTeamNotifyLoginTeamInfoImpl();
void InitDefaultsTeamNotifyLoginTeamInfo();
void InitDefaultsTeamAckLoginInviteTeamImpl();
void InitDefaultsTeamAckLoginInviteTeam();
void InitDefaultsTeamAckLoginChangeSlotImpl();
void InitDefaultsTeamAckLoginChangeSlot();
void InitDefaultsTeamAckLoginKickPlayerImpl();
void InitDefaultsTeamAckLoginKickPlayer();
void InitDefaultsTeamAckLoginGameStartImpl();
void InitDefaultsTeamAckLoginGameStart();
void InitDefaultsTeamAckLoginEnterTeamImpl();
void InitDefaultsTeamAckLoginEnterTeam();
void InitDefaultsTeamAckLoginPlayerLeaveImpl();
void InitDefaultsTeamAckLoginPlayerLeave();
void InitDefaultsTeamRequestGameManagerGameStartImpl();
void InitDefaultsTeamRequestGameManagerGameStart();
void InitDefaultsGameManagerAckTeamGameStartImpl();
void InitDefaultsGameManagerAckTeamGameStart();
void InitDefaultsGameNotifyGameManagerInfoImpl();
void InitDefaultsGameNotifyGameManagerInfo();
void InitDefaultsGameManagerAckGameInfoResultImpl();
void InitDefaultsGameManagerAckGameInfoResult();
void InitDefaultsPlayerRequestGameManagerInfoImpl();
void InitDefaultsPlayerRequestGameManagerInfo();
void InitDefaultsGameManagerAckPlayerInfoResultImpl();
void InitDefaultsGameManagerAckPlayerInfoResult();
void InitDefaultsPlayerRequestGameTestImpl();
void InitDefaultsPlayerRequestGameTest();
void InitDefaultsPlayerRequestGameEnterImpl();
void InitDefaultsPlayerRequestGameEnter();
void InitDefaultsPlayerRequestMoveImpl();
void InitDefaultsPlayerRequestMove();
void InitDefaultsPlayerRequestRotationImpl();
void InitDefaultsPlayerRequestRotation();
void InitDefaultsGameAckPlayerEnterImpl();
void InitDefaultsGameAckPlayerEnter();
void InitDefaultsGameNotifyPlayerGameConfigImpl();
void InitDefaultsGameNotifyPlayerGameConfig();
void InitDefaultsGameNotifyPlayerGameRoleDataImpl();
void InitDefaultsGameNotifyPlayerGameRoleData();
void InitDefaultsGameNotifyPlayerGameSceneInfoImpl();
void InitDefaultsGameNotifyPlayerGameSceneInfo();
void InitDefaultsGameNotifyPlayerPrepareTimeImpl();
void InitDefaultsGameNotifyPlayerPrepareTime();
void InitDefaultsGameNotifyPlayerGameReadyTimeImpl();
void InitDefaultsGameNotifyPlayerGameReadyTime();
void InitDefaultsGameNotifyPlayerGameStateImpl();
void InitDefaultsGameNotifyPlayerGameState();
void InitDefaultsGameNotifyPlayerGameInitTetrisImpl();
void InitDefaultsGameNotifyPlayerGameInitTetris();
void InitDefaultsGameNotifyPlayerNextTetrisImpl();
void InitDefaultsGameNotifyPlayerNextTetris();
void InitDefaultsGameNotifyPlayerDeadImpl();
void InitDefaultsGameNotifyPlayerDead();
void InitDefaultsServerInfoImpl();
void InitDefaultsServerInfo();
inline void InitDefaults() {
  InitDefaultsPlayerRequestLoginServerId();
  InitDefaultsPlayerRequestLogin();
  InitDefaultsPlayerRequestLoginMakeTeam();
  InitDefaultsPlayerRequestLoginInviteTeam();
  InitDefaultsPlayerRequestLoginChangeSlot();
  InitDefaultsPlayerRequestLoginGameStart();
  InitDefaultsPlayerRequestLoginOnLinePlayer();
  InitDefaultsPlayerRequestLoginEnterTeam();
  InitDefaultsPlayerRequestLoginRefuseEnterTeam();
  InitDefaultsPlayerRequestLoginLeaveTeam();
  InitDefaultsLoginAckPlayerServerId();
  InitDefaultsLoginAckPlayerLoginResult();
  InitDefaultsLoginNotifyPlayerGameKick();
  InitDefaultsLoginAckPlayerMakeTeam();
  InitDefaultsLoginNotifyPlayerTeamInfo();
  InitDefaultsLoginAckPlayerInviteTeam();
  InitDefaultsLoginNotifyPlayerInviteTeam();
  InitDefaultsLoginAckPlayerChangeSlot();
  InitDefaultsLoginNotifyPlayerTeamKick();
  InitDefaultsLoginAckPlayerGameStart();
  InitDefaultsLoginAckPlayerOnLinePlayer();
  InitDefaultsLoginAckPlayerEnterTeam();
  InitDefaultsLoginNotifyPlayerRefuseEnterTeam();
  InitDefaultsLoginAckPlayerLeaveTeam();
  InitDefaultsLoginNotifyLoginPlayerKick();
  InitDefaultsLoginRequestLoginInviteTeam();
  InitDefaultsLoginAckLoginInviteTeam();
  InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeam();
  InitDefaultsLoginRequestTeamMakeTeam();
  InitDefaultsLoginRequestTeamInviteTeam();
  InitDefaultsLoginRequestTeamChangeSlot();
  InitDefaultsLoginRequestTeamKickPlayer();
  InitDefaultsLoginRequestTeamGameStart();
  InitDefaultsLoginRequestTeamEnterTeam();
  InitDefaultsLoginRequestTeamPlayerLeave();
  InitDefaultsTeamAckLoginMakeTeam();
  InitDefaultsTeamNotifyLoginTeamInfo();
  InitDefaultsTeamAckLoginInviteTeam();
  InitDefaultsTeamAckLoginChangeSlot();
  InitDefaultsTeamAckLoginKickPlayer();
  InitDefaultsTeamAckLoginGameStart();
  InitDefaultsTeamAckLoginEnterTeam();
  InitDefaultsTeamAckLoginPlayerLeave();
  InitDefaultsTeamRequestGameManagerGameStart();
  InitDefaultsGameManagerAckTeamGameStart();
  InitDefaultsGameNotifyGameManagerInfo();
  InitDefaultsGameManagerAckGameInfoResult();
  InitDefaultsPlayerRequestGameManagerInfo();
  InitDefaultsGameManagerAckPlayerInfoResult();
  InitDefaultsPlayerRequestGameTest();
  InitDefaultsPlayerRequestGameEnter();
  InitDefaultsPlayerRequestMove();
  InitDefaultsPlayerRequestRotation();
  InitDefaultsGameAckPlayerEnter();
  InitDefaultsGameNotifyPlayerGameConfig();
  InitDefaultsGameNotifyPlayerGameRoleData();
  InitDefaultsGameNotifyPlayerGameSceneInfo();
  InitDefaultsGameNotifyPlayerPrepareTime();
  InitDefaultsGameNotifyPlayerGameReadyTime();
  InitDefaultsGameNotifyPlayerGameState();
  InitDefaultsGameNotifyPlayerGameInitTetris();
  InitDefaultsGameNotifyPlayerNextTetris();
  InitDefaultsGameNotifyPlayerDead();
  InitDefaultsServerInfo();
}
}  // namespace protobuf_web_5fgame_2eproto
namespace GameProto {
class GameAckPlayerEnter;
class GameAckPlayerEnterDefaultTypeInternal;
extern GameAckPlayerEnterDefaultTypeInternal _GameAckPlayerEnter_default_instance_;
class GameManagerAckGameInfoResult;
class GameManagerAckGameInfoResultDefaultTypeInternal;
extern GameManagerAckGameInfoResultDefaultTypeInternal _GameManagerAckGameInfoResult_default_instance_;
class GameManagerAckPlayerInfoResult;
class GameManagerAckPlayerInfoResultDefaultTypeInternal;
extern GameManagerAckPlayerInfoResultDefaultTypeInternal _GameManagerAckPlayerInfoResult_default_instance_;
class GameManagerAckTeamGameStart;
class GameManagerAckTeamGameStartDefaultTypeInternal;
extern GameManagerAckTeamGameStartDefaultTypeInternal _GameManagerAckTeamGameStart_default_instance_;
class GameNotifyGameManagerInfo;
class GameNotifyGameManagerInfoDefaultTypeInternal;
extern GameNotifyGameManagerInfoDefaultTypeInternal _GameNotifyGameManagerInfo_default_instance_;
class GameNotifyPlayerDead;
class GameNotifyPlayerDeadDefaultTypeInternal;
extern GameNotifyPlayerDeadDefaultTypeInternal _GameNotifyPlayerDead_default_instance_;
class GameNotifyPlayerGameConfig;
class GameNotifyPlayerGameConfigDefaultTypeInternal;
extern GameNotifyPlayerGameConfigDefaultTypeInternal _GameNotifyPlayerGameConfig_default_instance_;
class GameNotifyPlayerGameInitTetris;
class GameNotifyPlayerGameInitTetrisDefaultTypeInternal;
extern GameNotifyPlayerGameInitTetrisDefaultTypeInternal _GameNotifyPlayerGameInitTetris_default_instance_;
class GameNotifyPlayerGameReadyTime;
class GameNotifyPlayerGameReadyTimeDefaultTypeInternal;
extern GameNotifyPlayerGameReadyTimeDefaultTypeInternal _GameNotifyPlayerGameReadyTime_default_instance_;
class GameNotifyPlayerGameRoleData;
class GameNotifyPlayerGameRoleDataDefaultTypeInternal;
extern GameNotifyPlayerGameRoleDataDefaultTypeInternal _GameNotifyPlayerGameRoleData_default_instance_;
class GameNotifyPlayerGameSceneInfo;
class GameNotifyPlayerGameSceneInfoDefaultTypeInternal;
extern GameNotifyPlayerGameSceneInfoDefaultTypeInternal _GameNotifyPlayerGameSceneInfo_default_instance_;
class GameNotifyPlayerGameState;
class GameNotifyPlayerGameStateDefaultTypeInternal;
extern GameNotifyPlayerGameStateDefaultTypeInternal _GameNotifyPlayerGameState_default_instance_;
class GameNotifyPlayerNextTetris;
class GameNotifyPlayerNextTetrisDefaultTypeInternal;
extern GameNotifyPlayerNextTetrisDefaultTypeInternal _GameNotifyPlayerNextTetris_default_instance_;
class GameNotifyPlayerPrepareTime;
class GameNotifyPlayerPrepareTimeDefaultTypeInternal;
extern GameNotifyPlayerPrepareTimeDefaultTypeInternal _GameNotifyPlayerPrepareTime_default_instance_;
class LoginAckLoginInviteTeam;
class LoginAckLoginInviteTeamDefaultTypeInternal;
extern LoginAckLoginInviteTeamDefaultTypeInternal _LoginAckLoginInviteTeam_default_instance_;
class LoginAckPlayerChangeSlot;
class LoginAckPlayerChangeSlotDefaultTypeInternal;
extern LoginAckPlayerChangeSlotDefaultTypeInternal _LoginAckPlayerChangeSlot_default_instance_;
class LoginAckPlayerEnterTeam;
class LoginAckPlayerEnterTeamDefaultTypeInternal;
extern LoginAckPlayerEnterTeamDefaultTypeInternal _LoginAckPlayerEnterTeam_default_instance_;
class LoginAckPlayerGameStart;
class LoginAckPlayerGameStartDefaultTypeInternal;
extern LoginAckPlayerGameStartDefaultTypeInternal _LoginAckPlayerGameStart_default_instance_;
class LoginAckPlayerInviteTeam;
class LoginAckPlayerInviteTeamDefaultTypeInternal;
extern LoginAckPlayerInviteTeamDefaultTypeInternal _LoginAckPlayerInviteTeam_default_instance_;
class LoginAckPlayerLeaveTeam;
class LoginAckPlayerLeaveTeamDefaultTypeInternal;
extern LoginAckPlayerLeaveTeamDefaultTypeInternal _LoginAckPlayerLeaveTeam_default_instance_;
class LoginAckPlayerLoginResult;
class LoginAckPlayerLoginResultDefaultTypeInternal;
extern LoginAckPlayerLoginResultDefaultTypeInternal _LoginAckPlayerLoginResult_default_instance_;
class LoginAckPlayerMakeTeam;
class LoginAckPlayerMakeTeamDefaultTypeInternal;
extern LoginAckPlayerMakeTeamDefaultTypeInternal _LoginAckPlayerMakeTeam_default_instance_;
class LoginAckPlayerOnLinePlayer;
class LoginAckPlayerOnLinePlayerDefaultTypeInternal;
extern LoginAckPlayerOnLinePlayerDefaultTypeInternal _LoginAckPlayerOnLinePlayer_default_instance_;
class LoginAckPlayerServerId;
class LoginAckPlayerServerIdDefaultTypeInternal;
extern LoginAckPlayerServerIdDefaultTypeInternal _LoginAckPlayerServerId_default_instance_;
class LoginNotifyLoginPlayerKick;
class LoginNotifyLoginPlayerKickDefaultTypeInternal;
extern LoginNotifyLoginPlayerKickDefaultTypeInternal _LoginNotifyLoginPlayerKick_default_instance_;
class LoginNotifyLoginPlayerRefuseEnterTeam;
class LoginNotifyLoginPlayerRefuseEnterTeamDefaultTypeInternal;
extern LoginNotifyLoginPlayerRefuseEnterTeamDefaultTypeInternal _LoginNotifyLoginPlayerRefuseEnterTeam_default_instance_;
class LoginNotifyPlayerGameKick;
class LoginNotifyPlayerGameKickDefaultTypeInternal;
extern LoginNotifyPlayerGameKickDefaultTypeInternal _LoginNotifyPlayerGameKick_default_instance_;
class LoginNotifyPlayerInviteTeam;
class LoginNotifyPlayerInviteTeamDefaultTypeInternal;
extern LoginNotifyPlayerInviteTeamDefaultTypeInternal _LoginNotifyPlayerInviteTeam_default_instance_;
class LoginNotifyPlayerRefuseEnterTeam;
class LoginNotifyPlayerRefuseEnterTeamDefaultTypeInternal;
extern LoginNotifyPlayerRefuseEnterTeamDefaultTypeInternal _LoginNotifyPlayerRefuseEnterTeam_default_instance_;
class LoginNotifyPlayerTeamInfo;
class LoginNotifyPlayerTeamInfoDefaultTypeInternal;
extern LoginNotifyPlayerTeamInfoDefaultTypeInternal _LoginNotifyPlayerTeamInfo_default_instance_;
class LoginNotifyPlayerTeamKick;
class LoginNotifyPlayerTeamKickDefaultTypeInternal;
extern LoginNotifyPlayerTeamKickDefaultTypeInternal _LoginNotifyPlayerTeamKick_default_instance_;
class LoginRequestLoginInviteTeam;
class LoginRequestLoginInviteTeamDefaultTypeInternal;
extern LoginRequestLoginInviteTeamDefaultTypeInternal _LoginRequestLoginInviteTeam_default_instance_;
class LoginRequestTeamChangeSlot;
class LoginRequestTeamChangeSlotDefaultTypeInternal;
extern LoginRequestTeamChangeSlotDefaultTypeInternal _LoginRequestTeamChangeSlot_default_instance_;
class LoginRequestTeamEnterTeam;
class LoginRequestTeamEnterTeamDefaultTypeInternal;
extern LoginRequestTeamEnterTeamDefaultTypeInternal _LoginRequestTeamEnterTeam_default_instance_;
class LoginRequestTeamGameStart;
class LoginRequestTeamGameStartDefaultTypeInternal;
extern LoginRequestTeamGameStartDefaultTypeInternal _LoginRequestTeamGameStart_default_instance_;
class LoginRequestTeamInviteTeam;
class LoginRequestTeamInviteTeamDefaultTypeInternal;
extern LoginRequestTeamInviteTeamDefaultTypeInternal _LoginRequestTeamInviteTeam_default_instance_;
class LoginRequestTeamKickPlayer;
class LoginRequestTeamKickPlayerDefaultTypeInternal;
extern LoginRequestTeamKickPlayerDefaultTypeInternal _LoginRequestTeamKickPlayer_default_instance_;
class LoginRequestTeamMakeTeam;
class LoginRequestTeamMakeTeamDefaultTypeInternal;
extern LoginRequestTeamMakeTeamDefaultTypeInternal _LoginRequestTeamMakeTeam_default_instance_;
class LoginRequestTeamPlayerLeave;
class LoginRequestTeamPlayerLeaveDefaultTypeInternal;
extern LoginRequestTeamPlayerLeaveDefaultTypeInternal _LoginRequestTeamPlayerLeave_default_instance_;
class PlayerRequestGameEnter;
class PlayerRequestGameEnterDefaultTypeInternal;
extern PlayerRequestGameEnterDefaultTypeInternal _PlayerRequestGameEnter_default_instance_;
class PlayerRequestGameManagerInfo;
class PlayerRequestGameManagerInfoDefaultTypeInternal;
extern PlayerRequestGameManagerInfoDefaultTypeInternal _PlayerRequestGameManagerInfo_default_instance_;
class PlayerRequestGameTest;
class PlayerRequestGameTestDefaultTypeInternal;
extern PlayerRequestGameTestDefaultTypeInternal _PlayerRequestGameTest_default_instance_;
class PlayerRequestLogin;
class PlayerRequestLoginDefaultTypeInternal;
extern PlayerRequestLoginDefaultTypeInternal _PlayerRequestLogin_default_instance_;
class PlayerRequestLoginChangeSlot;
class PlayerRequestLoginChangeSlotDefaultTypeInternal;
extern PlayerRequestLoginChangeSlotDefaultTypeInternal _PlayerRequestLoginChangeSlot_default_instance_;
class PlayerRequestLoginEnterTeam;
class PlayerRequestLoginEnterTeamDefaultTypeInternal;
extern PlayerRequestLoginEnterTeamDefaultTypeInternal _PlayerRequestLoginEnterTeam_default_instance_;
class PlayerRequestLoginGameStart;
class PlayerRequestLoginGameStartDefaultTypeInternal;
extern PlayerRequestLoginGameStartDefaultTypeInternal _PlayerRequestLoginGameStart_default_instance_;
class PlayerRequestLoginInviteTeam;
class PlayerRequestLoginInviteTeamDefaultTypeInternal;
extern PlayerRequestLoginInviteTeamDefaultTypeInternal _PlayerRequestLoginInviteTeam_default_instance_;
class PlayerRequestLoginLeaveTeam;
class PlayerRequestLoginLeaveTeamDefaultTypeInternal;
extern PlayerRequestLoginLeaveTeamDefaultTypeInternal _PlayerRequestLoginLeaveTeam_default_instance_;
class PlayerRequestLoginMakeTeam;
class PlayerRequestLoginMakeTeamDefaultTypeInternal;
extern PlayerRequestLoginMakeTeamDefaultTypeInternal _PlayerRequestLoginMakeTeam_default_instance_;
class PlayerRequestLoginOnLinePlayer;
class PlayerRequestLoginOnLinePlayerDefaultTypeInternal;
extern PlayerRequestLoginOnLinePlayerDefaultTypeInternal _PlayerRequestLoginOnLinePlayer_default_instance_;
class PlayerRequestLoginRefuseEnterTeam;
class PlayerRequestLoginRefuseEnterTeamDefaultTypeInternal;
extern PlayerRequestLoginRefuseEnterTeamDefaultTypeInternal _PlayerRequestLoginRefuseEnterTeam_default_instance_;
class PlayerRequestLoginServerId;
class PlayerRequestLoginServerIdDefaultTypeInternal;
extern PlayerRequestLoginServerIdDefaultTypeInternal _PlayerRequestLoginServerId_default_instance_;
class PlayerRequestMove;
class PlayerRequestMoveDefaultTypeInternal;
extern PlayerRequestMoveDefaultTypeInternal _PlayerRequestMove_default_instance_;
class PlayerRequestRotation;
class PlayerRequestRotationDefaultTypeInternal;
extern PlayerRequestRotationDefaultTypeInternal _PlayerRequestRotation_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class TeamAckLoginChangeSlot;
class TeamAckLoginChangeSlotDefaultTypeInternal;
extern TeamAckLoginChangeSlotDefaultTypeInternal _TeamAckLoginChangeSlot_default_instance_;
class TeamAckLoginEnterTeam;
class TeamAckLoginEnterTeamDefaultTypeInternal;
extern TeamAckLoginEnterTeamDefaultTypeInternal _TeamAckLoginEnterTeam_default_instance_;
class TeamAckLoginGameStart;
class TeamAckLoginGameStartDefaultTypeInternal;
extern TeamAckLoginGameStartDefaultTypeInternal _TeamAckLoginGameStart_default_instance_;
class TeamAckLoginInviteTeam;
class TeamAckLoginInviteTeamDefaultTypeInternal;
extern TeamAckLoginInviteTeamDefaultTypeInternal _TeamAckLoginInviteTeam_default_instance_;
class TeamAckLoginKickPlayer;
class TeamAckLoginKickPlayerDefaultTypeInternal;
extern TeamAckLoginKickPlayerDefaultTypeInternal _TeamAckLoginKickPlayer_default_instance_;
class TeamAckLoginMakeTeam;
class TeamAckLoginMakeTeamDefaultTypeInternal;
extern TeamAckLoginMakeTeamDefaultTypeInternal _TeamAckLoginMakeTeam_default_instance_;
class TeamAckLoginPlayerLeave;
class TeamAckLoginPlayerLeaveDefaultTypeInternal;
extern TeamAckLoginPlayerLeaveDefaultTypeInternal _TeamAckLoginPlayerLeave_default_instance_;
class TeamNotifyLoginTeamInfo;
class TeamNotifyLoginTeamInfoDefaultTypeInternal;
extern TeamNotifyLoginTeamInfoDefaultTypeInternal _TeamNotifyLoginTeamInfo_default_instance_;
class TeamRequestGameManagerGameStart;
class TeamRequestGameManagerGameStartDefaultTypeInternal;
extern TeamRequestGameManagerGameStartDefaultTypeInternal _TeamRequestGameManagerGameStart_default_instance_;
}  // namespace GameProto
namespace GameProto {

enum EServerType {
  ST_NONE = 0,
  ST_Login = 1,
  ST_Team = 2,
  ST_GameManager = 3,
  EServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EServerType_IsValid(int value);
const EServerType EServerType_MIN = ST_NONE;
const EServerType EServerType_MAX = ST_GameManager;
const int EServerType_ARRAYSIZE = EServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServerType_descriptor();
inline const ::std::string& EServerType_Name(EServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerType_descriptor(), value);
}
inline bool EServerType_Parse(
    const ::std::string& name, EServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerType>(
    EServerType_descriptor(), name, value);
}
enum ETeamType {
  TT_NONE = 0,
  TT_Normal = 1,
  ETeamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ETeamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ETeamType_IsValid(int value);
const ETeamType ETeamType_MIN = TT_NONE;
const ETeamType ETeamType_MAX = TT_Normal;
const int ETeamType_ARRAYSIZE = ETeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamType_descriptor();
inline const ::std::string& ETeamType_Name(ETeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamType_descriptor(), value);
}
inline bool ETeamType_Parse(
    const ::std::string& name, ETeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamType>(
    ETeamType_descriptor(), name, value);
}
enum EErrorCode {
  EC_NONE = 0,
  EC_AlreadyInTeam = 1,
  EC_MakeTeamNotIdle = 2,
  EC_CannotFindPlayer = 3,
  EC_NoTeamId = 4,
  EC_NotLeader = 5,
  EC_TeamHasStart = 6,
  EC_NoGameManagerServer = 7,
  EC_NoTeamServer = 8,
  EC_NoLoginServer = 9,
  EC_PlayerNotOnline = 10,
  EC_FailIntoTeam = 11,
  EErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EErrorCode_IsValid(int value);
const EErrorCode EErrorCode_MIN = EC_NONE;
const EErrorCode EErrorCode_MAX = EC_FailIntoTeam;
const int EErrorCode_ARRAYSIZE = EErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EErrorCode_descriptor();
inline const ::std::string& EErrorCode_Name(EErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EErrorCode_descriptor(), value);
}
inline bool EErrorCode_Parse(
    const ::std::string& name, EErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EErrorCode>(
    EErrorCode_descriptor(), name, value);
}
enum EMoveDirection {
  EMD_NONE = 0,
  EMD_Down = 1,
  EMD_Left = 2,
  EMD_Right = 3,
  EMoveDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EMoveDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EMoveDirection_IsValid(int value);
const EMoveDirection EMoveDirection_MIN = EMD_NONE;
const EMoveDirection EMoveDirection_MAX = EMD_Right;
const int EMoveDirection_ARRAYSIZE = EMoveDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMoveDirection_descriptor();
inline const ::std::string& EMoveDirection_Name(EMoveDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMoveDirection_descriptor(), value);
}
inline bool EMoveDirection_Parse(
    const ::std::string& name, EMoveDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMoveDirection>(
    EMoveDirection_descriptor(), name, value);
}
enum ERotationDirection {
  ERD_NONE = 0,
  ERD_Left = 1,
  ERD_Right = 2,
  ERotationDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ERotationDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ERotationDirection_IsValid(int value);
const ERotationDirection ERotationDirection_MIN = ERD_NONE;
const ERotationDirection ERotationDirection_MAX = ERD_Right;
const int ERotationDirection_ARRAYSIZE = ERotationDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERotationDirection_descriptor();
inline const ::std::string& ERotationDirection_Name(ERotationDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERotationDirection_descriptor(), value);
}
inline bool ERotationDirection_Parse(
    const ::std::string& name, ERotationDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERotationDirection>(
    ERotationDirection_descriptor(), name, value);
}
// ===================================================================

class PlayerRequestLoginServerId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginServerId) */ {
 public:
  PlayerRequestLoginServerId();
  virtual ~PlayerRequestLoginServerId();

  PlayerRequestLoginServerId(const PlayerRequestLoginServerId& from);

  inline PlayerRequestLoginServerId& operator=(const PlayerRequestLoginServerId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginServerId(PlayerRequestLoginServerId&& from) noexcept
    : PlayerRequestLoginServerId() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginServerId& operator=(PlayerRequestLoginServerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginServerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginServerId* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginServerId*>(
               &_PlayerRequestLoginServerId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerRequestLoginServerId* other);
  friend void swap(PlayerRequestLoginServerId& a, PlayerRequestLoginServerId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginServerId* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginServerId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginServerId& from);
  void MergeFrom(const PlayerRequestLoginServerId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginServerId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginServerId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginServerIdImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLogin) */ {
 public:
  PlayerRequestLogin();
  virtual ~PlayerRequestLogin();

  PlayerRequestLogin(const PlayerRequestLogin& from);

  inline PlayerRequestLogin& operator=(const PlayerRequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLogin(PlayerRequestLogin&& from) noexcept
    : PlayerRequestLogin() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLogin& operator=(PlayerRequestLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLogin* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLogin*>(
               &_PlayerRequestLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerRequestLogin* other);
  friend void swap(PlayerRequestLogin& a, PlayerRequestLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLogin& from);
  void MergeFrom(const PlayerRequestLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_nick_name = 2;
  void clear_sz_nick_name();
  static const int kSzNickNameFieldNumber = 2;
  const ::std::string& sz_nick_name() const;
  void set_sz_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_nick_name(::std::string&& value);
  #endif
  void set_sz_nick_name(const char* value);
  void set_sz_nick_name(const char* value, size_t size);
  ::std::string* mutable_sz_nick_name();
  ::std::string* release_sz_nick_name();
  void set_allocated_sz_nick_name(::std::string* sz_nick_name);

  // string sz_avatar = 3;
  void clear_sz_avatar();
  static const int kSzAvatarFieldNumber = 3;
  const ::std::string& sz_avatar() const;
  void set_sz_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_avatar(::std::string&& value);
  #endif
  void set_sz_avatar(const char* value);
  void set_sz_avatar(const char* value, size_t size);
  ::std::string* mutable_sz_avatar();
  ::std::string* release_sz_avatar();
  void set_allocated_sz_avatar(::std::string* sz_avatar);

  // string sz_token = 6;
  void clear_sz_token();
  static const int kSzTokenFieldNumber = 6;
  const ::std::string& sz_token() const;
  void set_sz_token(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_token(::std::string&& value);
  #endif
  void set_sz_token(const char* value);
  void set_sz_token(const char* value, size_t size);
  ::std::string* mutable_sz_token();
  ::std::string* release_sz_token();
  void set_allocated_sz_token(::std::string* sz_token);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_sex = 4;
  void clear_dw_sex();
  static const int kDwSexFieldNumber = 4;
  ::google::protobuf::uint32 dw_sex() const;
  void set_dw_sex(::google::protobuf::uint32 value);

  // uint32 dw_balance = 5;
  void clear_dw_balance();
  static const int kDwBalanceFieldNumber = 5;
  ::google::protobuf::uint32 dw_balance() const;
  void set_dw_balance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_nick_name_;
  ::google::protobuf::internal::ArenaStringPtr sz_avatar_;
  ::google::protobuf::internal::ArenaStringPtr sz_token_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_sex_;
  ::google::protobuf::uint32 dw_balance_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginMakeTeam) */ {
 public:
  PlayerRequestLoginMakeTeam();
  virtual ~PlayerRequestLoginMakeTeam();

  PlayerRequestLoginMakeTeam(const PlayerRequestLoginMakeTeam& from);

  inline PlayerRequestLoginMakeTeam& operator=(const PlayerRequestLoginMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginMakeTeam(PlayerRequestLoginMakeTeam&& from) noexcept
    : PlayerRequestLoginMakeTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginMakeTeam& operator=(PlayerRequestLoginMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginMakeTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginMakeTeam*>(
               &_PlayerRequestLoginMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerRequestLoginMakeTeam* other);
  friend void swap(PlayerRequestLoginMakeTeam& a, PlayerRequestLoginMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginMakeTeam& from);
  void MergeFrom(const PlayerRequestLoginMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginMakeTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginInviteTeam) */ {
 public:
  PlayerRequestLoginInviteTeam();
  virtual ~PlayerRequestLoginInviteTeam();

  PlayerRequestLoginInviteTeam(const PlayerRequestLoginInviteTeam& from);

  inline PlayerRequestLoginInviteTeam& operator=(const PlayerRequestLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginInviteTeam(PlayerRequestLoginInviteTeam&& from) noexcept
    : PlayerRequestLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginInviteTeam& operator=(PlayerRequestLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginInviteTeam*>(
               &_PlayerRequestLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerRequestLoginInviteTeam* other);
  friend void swap(PlayerRequestLoginInviteTeam& a, PlayerRequestLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginInviteTeam& from);
  void MergeFrom(const PlayerRequestLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginChangeSlot) */ {
 public:
  PlayerRequestLoginChangeSlot();
  virtual ~PlayerRequestLoginChangeSlot();

  PlayerRequestLoginChangeSlot(const PlayerRequestLoginChangeSlot& from);

  inline PlayerRequestLoginChangeSlot& operator=(const PlayerRequestLoginChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginChangeSlot(PlayerRequestLoginChangeSlot&& from) noexcept
    : PlayerRequestLoginChangeSlot() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginChangeSlot& operator=(PlayerRequestLoginChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginChangeSlot* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginChangeSlot*>(
               &_PlayerRequestLoginChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlayerRequestLoginChangeSlot* other);
  friend void swap(PlayerRequestLoginChangeSlot& a, PlayerRequestLoginChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginChangeSlot& from);
  void MergeFrom(const PlayerRequestLoginChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_slot_id = 1;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 1;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginChangeSlotImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginGameStart) */ {
 public:
  PlayerRequestLoginGameStart();
  virtual ~PlayerRequestLoginGameStart();

  PlayerRequestLoginGameStart(const PlayerRequestLoginGameStart& from);

  inline PlayerRequestLoginGameStart& operator=(const PlayerRequestLoginGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginGameStart(PlayerRequestLoginGameStart&& from) noexcept
    : PlayerRequestLoginGameStart() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginGameStart& operator=(PlayerRequestLoginGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginGameStart* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginGameStart*>(
               &_PlayerRequestLoginGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PlayerRequestLoginGameStart* other);
  friend void swap(PlayerRequestLoginGameStart& a, PlayerRequestLoginGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginGameStart& from);
  void MergeFrom(const PlayerRequestLoginGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginGameStartImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginOnLinePlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginOnLinePlayer) */ {
 public:
  PlayerRequestLoginOnLinePlayer();
  virtual ~PlayerRequestLoginOnLinePlayer();

  PlayerRequestLoginOnLinePlayer(const PlayerRequestLoginOnLinePlayer& from);

  inline PlayerRequestLoginOnLinePlayer& operator=(const PlayerRequestLoginOnLinePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginOnLinePlayer(PlayerRequestLoginOnLinePlayer&& from) noexcept
    : PlayerRequestLoginOnLinePlayer() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginOnLinePlayer& operator=(PlayerRequestLoginOnLinePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginOnLinePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginOnLinePlayer* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginOnLinePlayer*>(
               &_PlayerRequestLoginOnLinePlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PlayerRequestLoginOnLinePlayer* other);
  friend void swap(PlayerRequestLoginOnLinePlayer& a, PlayerRequestLoginOnLinePlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginOnLinePlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginOnLinePlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginOnLinePlayer& from);
  void MergeFrom(const PlayerRequestLoginOnLinePlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginOnLinePlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginOnLinePlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginOnLinePlayerImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginEnterTeam) */ {
 public:
  PlayerRequestLoginEnterTeam();
  virtual ~PlayerRequestLoginEnterTeam();

  PlayerRequestLoginEnterTeam(const PlayerRequestLoginEnterTeam& from);

  inline PlayerRequestLoginEnterTeam& operator=(const PlayerRequestLoginEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginEnterTeam(PlayerRequestLoginEnterTeam&& from) noexcept
    : PlayerRequestLoginEnterTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginEnterTeam& operator=(PlayerRequestLoginEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginEnterTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginEnterTeam*>(
               &_PlayerRequestLoginEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PlayerRequestLoginEnterTeam* other);
  friend void swap(PlayerRequestLoginEnterTeam& a, PlayerRequestLoginEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginEnterTeam& from);
  void MergeFrom(const PlayerRequestLoginEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_team_server_id = 1;
  void clear_dw_team_server_id();
  static const int kDwTeamServerIdFieldNumber = 1;
  ::google::protobuf::uint32 dw_team_server_id() const;
  void set_dw_team_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_team_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginEnterTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginRefuseEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginRefuseEnterTeam) */ {
 public:
  PlayerRequestLoginRefuseEnterTeam();
  virtual ~PlayerRequestLoginRefuseEnterTeam();

  PlayerRequestLoginRefuseEnterTeam(const PlayerRequestLoginRefuseEnterTeam& from);

  inline PlayerRequestLoginRefuseEnterTeam& operator=(const PlayerRequestLoginRefuseEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginRefuseEnterTeam(PlayerRequestLoginRefuseEnterTeam&& from) noexcept
    : PlayerRequestLoginRefuseEnterTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginRefuseEnterTeam& operator=(PlayerRequestLoginRefuseEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginRefuseEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginRefuseEnterTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginRefuseEnterTeam*>(
               &_PlayerRequestLoginRefuseEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PlayerRequestLoginRefuseEnterTeam* other);
  friend void swap(PlayerRequestLoginRefuseEnterTeam& a, PlayerRequestLoginRefuseEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginRefuseEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginRefuseEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginRefuseEnterTeam& from);
  void MergeFrom(const PlayerRequestLoginRefuseEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginRefuseEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_Reason = 2;
  void clear_sz_reason();
  static const int kSzReasonFieldNumber = 2;
  const ::std::string& sz_reason() const;
  void set_sz_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_reason(::std::string&& value);
  #endif
  void set_sz_reason(const char* value);
  void set_sz_reason(const char* value, size_t size);
  ::std::string* mutable_sz_reason();
  ::std::string* release_sz_reason();
  void set_allocated_sz_reason(::std::string* sz_reason);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginRefuseEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_reason_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginRefuseEnterTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginLeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginLeaveTeam) */ {
 public:
  PlayerRequestLoginLeaveTeam();
  virtual ~PlayerRequestLoginLeaveTeam();

  PlayerRequestLoginLeaveTeam(const PlayerRequestLoginLeaveTeam& from);

  inline PlayerRequestLoginLeaveTeam& operator=(const PlayerRequestLoginLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginLeaveTeam(PlayerRequestLoginLeaveTeam&& from) noexcept
    : PlayerRequestLoginLeaveTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginLeaveTeam& operator=(PlayerRequestLoginLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginLeaveTeam*>(
               &_PlayerRequestLoginLeaveTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PlayerRequestLoginLeaveTeam* other);
  friend void swap(PlayerRequestLoginLeaveTeam& a, PlayerRequestLoginLeaveTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginLeaveTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginLeaveTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginLeaveTeam& from);
  void MergeFrom(const PlayerRequestLoginLeaveTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginLeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginLeaveTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginLeaveTeamImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerServerId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerServerId) */ {
 public:
  LoginAckPlayerServerId();
  virtual ~LoginAckPlayerServerId();

  LoginAckPlayerServerId(const LoginAckPlayerServerId& from);

  inline LoginAckPlayerServerId& operator=(const LoginAckPlayerServerId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerServerId(LoginAckPlayerServerId&& from) noexcept
    : LoginAckPlayerServerId() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerServerId& operator=(LoginAckPlayerServerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerServerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerServerId* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerServerId*>(
               &_LoginAckPlayerServerId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LoginAckPlayerServerId* other);
  friend void swap(LoginAckPlayerServerId& a, LoginAckPlayerServerId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerServerId* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerServerId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerServerId& from);
  void MergeFrom(const LoginAckPlayerServerId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerServerId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_server_id = 2;
  void clear_dw_server_id();
  static const int kDwServerIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_id() const;
  void set_dw_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerServerId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerServerIdImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerLoginResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerLoginResult) */ {
 public:
  LoginAckPlayerLoginResult();
  virtual ~LoginAckPlayerLoginResult();

  LoginAckPlayerLoginResult(const LoginAckPlayerLoginResult& from);

  inline LoginAckPlayerLoginResult& operator=(const LoginAckPlayerLoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerLoginResult(LoginAckPlayerLoginResult&& from) noexcept
    : LoginAckPlayerLoginResult() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerLoginResult& operator=(LoginAckPlayerLoginResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerLoginResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerLoginResult* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerLoginResult*>(
               &_LoginAckPlayerLoginResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LoginAckPlayerLoginResult* other);
  friend void swap(LoginAckPlayerLoginResult& a, LoginAckPlayerLoginResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerLoginResult* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerLoginResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerLoginResult& from);
  void MergeFrom(const LoginAckPlayerLoginResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerLoginResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerLoginResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResultImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerGameKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerGameKick) */ {
 public:
  LoginNotifyPlayerGameKick();
  virtual ~LoginNotifyPlayerGameKick();

  LoginNotifyPlayerGameKick(const LoginNotifyPlayerGameKick& from);

  inline LoginNotifyPlayerGameKick& operator=(const LoginNotifyPlayerGameKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerGameKick(LoginNotifyPlayerGameKick&& from) noexcept
    : LoginNotifyPlayerGameKick() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerGameKick& operator=(LoginNotifyPlayerGameKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerGameKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerGameKick* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerGameKick*>(
               &_LoginNotifyPlayerGameKick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(LoginNotifyPlayerGameKick* other);
  friend void swap(LoginNotifyPlayerGameKick& a, LoginNotifyPlayerGameKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerGameKick* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerGameKick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerGameKick& from);
  void MergeFrom(const LoginNotifyPlayerGameKick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerGameKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerGameKick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerGameKickImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerMakeTeam) */ {
 public:
  LoginAckPlayerMakeTeam();
  virtual ~LoginAckPlayerMakeTeam();

  LoginAckPlayerMakeTeam(const LoginAckPlayerMakeTeam& from);

  inline LoginAckPlayerMakeTeam& operator=(const LoginAckPlayerMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerMakeTeam(LoginAckPlayerMakeTeam&& from) noexcept
    : LoginAckPlayerMakeTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerMakeTeam& operator=(LoginAckPlayerMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerMakeTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerMakeTeam*>(
               &_LoginAckPlayerMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(LoginAckPlayerMakeTeam* other);
  friend void swap(LoginAckPlayerMakeTeam& a, LoginAckPlayerMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerMakeTeam& from);
  void MergeFrom(const LoginAckPlayerMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot_id = 3;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 3;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerMakeTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerTeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerTeamInfo) */ {
 public:
  LoginNotifyPlayerTeamInfo();
  virtual ~LoginNotifyPlayerTeamInfo();

  LoginNotifyPlayerTeamInfo(const LoginNotifyPlayerTeamInfo& from);

  inline LoginNotifyPlayerTeamInfo& operator=(const LoginNotifyPlayerTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerTeamInfo(LoginNotifyPlayerTeamInfo&& from) noexcept
    : LoginNotifyPlayerTeamInfo() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerTeamInfo& operator=(LoginNotifyPlayerTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerTeamInfo* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerTeamInfo*>(
               &_LoginNotifyPlayerTeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(LoginNotifyPlayerTeamInfo* other);
  friend void swap(LoginNotifyPlayerTeamInfo& a, LoginNotifyPlayerTeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerTeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerTeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerTeamInfo& from);
  void MergeFrom(const LoginNotifyPlayerTeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerTeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  int team_role_data_size() const;
  void clear_team_role_data();
  static const int kTeamRoleDataFieldNumber = 1;
  const ::GameProto::TeamRoleData& team_role_data(int index) const;
  ::GameProto::TeamRoleData* mutable_team_role_data(int index);
  ::GameProto::TeamRoleData* add_team_role_data();
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
      mutable_team_role_data();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
      team_role_data() const;

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerTeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData > team_role_data_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamInfoImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerInviteTeam) */ {
 public:
  LoginAckPlayerInviteTeam();
  virtual ~LoginAckPlayerInviteTeam();

  LoginAckPlayerInviteTeam(const LoginAckPlayerInviteTeam& from);

  inline LoginAckPlayerInviteTeam& operator=(const LoginAckPlayerInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerInviteTeam(LoginAckPlayerInviteTeam&& from) noexcept
    : LoginAckPlayerInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerInviteTeam& operator=(LoginAckPlayerInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerInviteTeam*>(
               &_LoginAckPlayerInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(LoginAckPlayerInviteTeam* other);
  friend void swap(LoginAckPlayerInviteTeam& a, LoginAckPlayerInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerInviteTeam& from);
  void MergeFrom(const LoginAckPlayerInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerInviteTeam) */ {
 public:
  LoginNotifyPlayerInviteTeam();
  virtual ~LoginNotifyPlayerInviteTeam();

  LoginNotifyPlayerInviteTeam(const LoginNotifyPlayerInviteTeam& from);

  inline LoginNotifyPlayerInviteTeam& operator=(const LoginNotifyPlayerInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerInviteTeam(LoginNotifyPlayerInviteTeam&& from) noexcept
    : LoginNotifyPlayerInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerInviteTeam& operator=(LoginNotifyPlayerInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerInviteTeam*>(
               &_LoginNotifyPlayerInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(LoginNotifyPlayerInviteTeam* other);
  friend void swap(LoginNotifyPlayerInviteTeam& a, LoginNotifyPlayerInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerInviteTeam& from);
  void MergeFrom(const LoginNotifyPlayerInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_team_server_id = 3;
  void clear_dw_team_server_id();
  static const int kDwTeamServerIdFieldNumber = 3;
  ::google::protobuf::uint32 dw_team_server_id() const;
  void set_dw_team_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_team_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerChangeSlot) */ {
 public:
  LoginAckPlayerChangeSlot();
  virtual ~LoginAckPlayerChangeSlot();

  LoginAckPlayerChangeSlot(const LoginAckPlayerChangeSlot& from);

  inline LoginAckPlayerChangeSlot& operator=(const LoginAckPlayerChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerChangeSlot(LoginAckPlayerChangeSlot&& from) noexcept
    : LoginAckPlayerChangeSlot() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerChangeSlot& operator=(LoginAckPlayerChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerChangeSlot* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerChangeSlot*>(
               &_LoginAckPlayerChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(LoginAckPlayerChangeSlot* other);
  friend void swap(LoginAckPlayerChangeSlot& a, LoginAckPlayerChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerChangeSlot& from);
  void MergeFrom(const LoginAckPlayerChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerChangeSlotImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerTeamKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerTeamKick) */ {
 public:
  LoginNotifyPlayerTeamKick();
  virtual ~LoginNotifyPlayerTeamKick();

  LoginNotifyPlayerTeamKick(const LoginNotifyPlayerTeamKick& from);

  inline LoginNotifyPlayerTeamKick& operator=(const LoginNotifyPlayerTeamKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerTeamKick(LoginNotifyPlayerTeamKick&& from) noexcept
    : LoginNotifyPlayerTeamKick() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerTeamKick& operator=(LoginNotifyPlayerTeamKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerTeamKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerTeamKick* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerTeamKick*>(
               &_LoginNotifyPlayerTeamKick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(LoginNotifyPlayerTeamKick* other);
  friend void swap(LoginNotifyPlayerTeamKick& a, LoginNotifyPlayerTeamKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerTeamKick* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerTeamKick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerTeamKick& from);
  void MergeFrom(const LoginNotifyPlayerTeamKick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerTeamKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerTeamKick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamKickImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerGameStart) */ {
 public:
  LoginAckPlayerGameStart();
  virtual ~LoginAckPlayerGameStart();

  LoginAckPlayerGameStart(const LoginAckPlayerGameStart& from);

  inline LoginAckPlayerGameStart& operator=(const LoginAckPlayerGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerGameStart(LoginAckPlayerGameStart&& from) noexcept
    : LoginAckPlayerGameStart() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerGameStart& operator=(LoginAckPlayerGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerGameStart* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerGameStart*>(
               &_LoginAckPlayerGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(LoginAckPlayerGameStart* other);
  friend void swap(LoginAckPlayerGameStart& a, LoginAckPlayerGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerGameStart& from);
  void MergeFrom(const LoginAckPlayerGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_listen_ip = 5;
  void clear_sz_listen_ip();
  static const int kSzListenIpFieldNumber = 5;
  const ::std::string& sz_listen_ip() const;
  void set_sz_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_listen_ip(::std::string&& value);
  #endif
  void set_sz_listen_ip(const char* value);
  void set_sz_listen_ip(const char* value, size_t size);
  ::std::string* mutable_sz_listen_ip();
  ::std::string* release_sz_listen_ip();
  void set_allocated_sz_listen_ip(::std::string* sz_listen_ip);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_player_port = 2;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 3;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint32 dw_slave_server_port = 4;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 4;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // uint64 qw_team_id = 6;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 6;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_listen_ip_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerGameStartImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerOnLinePlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerOnLinePlayer) */ {
 public:
  LoginAckPlayerOnLinePlayer();
  virtual ~LoginAckPlayerOnLinePlayer();

  LoginAckPlayerOnLinePlayer(const LoginAckPlayerOnLinePlayer& from);

  inline LoginAckPlayerOnLinePlayer& operator=(const LoginAckPlayerOnLinePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerOnLinePlayer(LoginAckPlayerOnLinePlayer&& from) noexcept
    : LoginAckPlayerOnLinePlayer() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerOnLinePlayer& operator=(LoginAckPlayerOnLinePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerOnLinePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerOnLinePlayer* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerOnLinePlayer*>(
               &_LoginAckPlayerOnLinePlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(LoginAckPlayerOnLinePlayer* other);
  friend void swap(LoginAckPlayerOnLinePlayer& a, LoginAckPlayerOnLinePlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerOnLinePlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerOnLinePlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerOnLinePlayer& from);
  void MergeFrom(const LoginAckPlayerOnLinePlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerOnLinePlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 qw_player_id = 2;
  int qw_player_id_size() const;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id(int index) const;
  void set_qw_player_id(int index, ::google::protobuf::uint64 value);
  void add_qw_player_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      qw_player_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_qw_player_id();

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerOnLinePlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > qw_player_id_;
  mutable int _qw_player_id_cached_byte_size_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerOnLinePlayerImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerEnterTeam) */ {
 public:
  LoginAckPlayerEnterTeam();
  virtual ~LoginAckPlayerEnterTeam();

  LoginAckPlayerEnterTeam(const LoginAckPlayerEnterTeam& from);

  inline LoginAckPlayerEnterTeam& operator=(const LoginAckPlayerEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerEnterTeam(LoginAckPlayerEnterTeam&& from) noexcept
    : LoginAckPlayerEnterTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerEnterTeam& operator=(LoginAckPlayerEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerEnterTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerEnterTeam*>(
               &_LoginAckPlayerEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(LoginAckPlayerEnterTeam* other);
  friend void swap(LoginAckPlayerEnterTeam& a, LoginAckPlayerEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerEnterTeam& from);
  void MergeFrom(const LoginAckPlayerEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerEnterTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerRefuseEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerRefuseEnterTeam) */ {
 public:
  LoginNotifyPlayerRefuseEnterTeam();
  virtual ~LoginNotifyPlayerRefuseEnterTeam();

  LoginNotifyPlayerRefuseEnterTeam(const LoginNotifyPlayerRefuseEnterTeam& from);

  inline LoginNotifyPlayerRefuseEnterTeam& operator=(const LoginNotifyPlayerRefuseEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerRefuseEnterTeam(LoginNotifyPlayerRefuseEnterTeam&& from) noexcept
    : LoginNotifyPlayerRefuseEnterTeam() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerRefuseEnterTeam& operator=(LoginNotifyPlayerRefuseEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerRefuseEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerRefuseEnterTeam* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerRefuseEnterTeam*>(
               &_LoginNotifyPlayerRefuseEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(LoginNotifyPlayerRefuseEnterTeam* other);
  friend void swap(LoginNotifyPlayerRefuseEnterTeam& a, LoginNotifyPlayerRefuseEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerRefuseEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerRefuseEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerRefuseEnterTeam& from);
  void MergeFrom(const LoginNotifyPlayerRefuseEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerRefuseEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_Reason = 2;
  void clear_sz_reason();
  static const int kSzReasonFieldNumber = 2;
  const ::std::string& sz_reason() const;
  void set_sz_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_reason(::std::string&& value);
  #endif
  void set_sz_reason(const char* value);
  void set_sz_reason(const char* value, size_t size);
  ::std::string* mutable_sz_reason();
  ::std::string* release_sz_reason();
  void set_allocated_sz_reason(::std::string* sz_reason);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerRefuseEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_reason_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerRefuseEnterTeamImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerLeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerLeaveTeam) */ {
 public:
  LoginAckPlayerLeaveTeam();
  virtual ~LoginAckPlayerLeaveTeam();

  LoginAckPlayerLeaveTeam(const LoginAckPlayerLeaveTeam& from);

  inline LoginAckPlayerLeaveTeam& operator=(const LoginAckPlayerLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerLeaveTeam(LoginAckPlayerLeaveTeam&& from) noexcept
    : LoginAckPlayerLeaveTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerLeaveTeam& operator=(LoginAckPlayerLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerLeaveTeam*>(
               &_LoginAckPlayerLeaveTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(LoginAckPlayerLeaveTeam* other);
  friend void swap(LoginAckPlayerLeaveTeam& a, LoginAckPlayerLeaveTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerLeaveTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerLeaveTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerLeaveTeam& from);
  void MergeFrom(const LoginAckPlayerLeaveTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerLeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerLeaveTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLeaveTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyLoginPlayerKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyLoginPlayerKick) */ {
 public:
  LoginNotifyLoginPlayerKick();
  virtual ~LoginNotifyLoginPlayerKick();

  LoginNotifyLoginPlayerKick(const LoginNotifyLoginPlayerKick& from);

  inline LoginNotifyLoginPlayerKick& operator=(const LoginNotifyLoginPlayerKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyLoginPlayerKick(LoginNotifyLoginPlayerKick&& from) noexcept
    : LoginNotifyLoginPlayerKick() {
    *this = ::std::move(from);
  }

  inline LoginNotifyLoginPlayerKick& operator=(LoginNotifyLoginPlayerKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyLoginPlayerKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyLoginPlayerKick* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyLoginPlayerKick*>(
               &_LoginNotifyLoginPlayerKick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(LoginNotifyLoginPlayerKick* other);
  friend void swap(LoginNotifyLoginPlayerKick& a, LoginNotifyLoginPlayerKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyLoginPlayerKick* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyLoginPlayerKick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyLoginPlayerKick& from);
  void MergeFrom(const LoginNotifyLoginPlayerKick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyLoginPlayerKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyLoginPlayerKick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerKickImpl();
};
// -------------------------------------------------------------------

class LoginRequestLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestLoginInviteTeam) */ {
 public:
  LoginRequestLoginInviteTeam();
  virtual ~LoginRequestLoginInviteTeam();

  LoginRequestLoginInviteTeam(const LoginRequestLoginInviteTeam& from);

  inline LoginRequestLoginInviteTeam& operator=(const LoginRequestLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestLoginInviteTeam(LoginRequestLoginInviteTeam&& from) noexcept
    : LoginRequestLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestLoginInviteTeam& operator=(LoginRequestLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestLoginInviteTeam*>(
               &_LoginRequestLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(LoginRequestLoginInviteTeam* other);
  friend void swap(LoginRequestLoginInviteTeam& a, LoginRequestLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestLoginInviteTeam& from);
  void MergeFrom(const LoginRequestLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_invite_id = 1;
  void clear_qw_invite_id();
  static const int kQwInviteIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_invite_id() const;
  void set_qw_invite_id(::google::protobuf::uint64 value);

  // uint64 qw_invitee_id = 2;
  void clear_qw_invitee_id();
  static const int kQwInviteeIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_invitee_id() const;
  void set_qw_invitee_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 3;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_team_server_id = 4;
  void clear_dw_team_server_id();
  static const int kDwTeamServerIdFieldNumber = 4;
  ::google::protobuf::uint32 dw_team_server_id() const;
  void set_dw_team_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_invite_id_;
  ::google::protobuf::uint64 qw_invitee_id_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_team_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginAckLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckLoginInviteTeam) */ {
 public:
  LoginAckLoginInviteTeam();
  virtual ~LoginAckLoginInviteTeam();

  LoginAckLoginInviteTeam(const LoginAckLoginInviteTeam& from);

  inline LoginAckLoginInviteTeam& operator=(const LoginAckLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckLoginInviteTeam(LoginAckLoginInviteTeam&& from) noexcept
    : LoginAckLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckLoginInviteTeam& operator=(LoginAckLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckLoginInviteTeam*>(
               &_LoginAckLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(LoginAckLoginInviteTeam* other);
  friend void swap(LoginAckLoginInviteTeam& a, LoginAckLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckLoginInviteTeam& from);
  void MergeFrom(const LoginAckLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_invite_id = 2;
  void clear_qw_invite_id();
  static const int kQwInviteIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_invite_id() const;
  void set_qw_invite_id(::google::protobuf::uint64 value);

  // uint64 qw_invitee_id = 3;
  void clear_qw_invitee_id();
  static const int kQwInviteeIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_invitee_id() const;
  void set_qw_invitee_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_invite_id_;
  ::google::protobuf::uint64 qw_invitee_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyLoginPlayerRefuseEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam) */ {
 public:
  LoginNotifyLoginPlayerRefuseEnterTeam();
  virtual ~LoginNotifyLoginPlayerRefuseEnterTeam();

  LoginNotifyLoginPlayerRefuseEnterTeam(const LoginNotifyLoginPlayerRefuseEnterTeam& from);

  inline LoginNotifyLoginPlayerRefuseEnterTeam& operator=(const LoginNotifyLoginPlayerRefuseEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyLoginPlayerRefuseEnterTeam(LoginNotifyLoginPlayerRefuseEnterTeam&& from) noexcept
    : LoginNotifyLoginPlayerRefuseEnterTeam() {
    *this = ::std::move(from);
  }

  inline LoginNotifyLoginPlayerRefuseEnterTeam& operator=(LoginNotifyLoginPlayerRefuseEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyLoginPlayerRefuseEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyLoginPlayerRefuseEnterTeam* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyLoginPlayerRefuseEnterTeam*>(
               &_LoginNotifyLoginPlayerRefuseEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(LoginNotifyLoginPlayerRefuseEnterTeam* other);
  friend void swap(LoginNotifyLoginPlayerRefuseEnterTeam& a, LoginNotifyLoginPlayerRefuseEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyLoginPlayerRefuseEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyLoginPlayerRefuseEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyLoginPlayerRefuseEnterTeam& from);
  void MergeFrom(const LoginNotifyLoginPlayerRefuseEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyLoginPlayerRefuseEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_Reason = 3;
  void clear_sz_reason();
  static const int kSzReasonFieldNumber = 3;
  const ::std::string& sz_reason() const;
  void set_sz_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_reason(::std::string&& value);
  #endif
  void set_sz_reason(const char* value);
  void set_sz_reason(const char* value, size_t size);
  ::std::string* mutable_sz_reason();
  ::std::string* release_sz_reason();
  void set_allocated_sz_reason(::std::string* sz_reason);

  // uint64 qw_invite_id = 1;
  void clear_qw_invite_id();
  static const int kQwInviteIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_invite_id() const;
  void set_qw_invite_id(::google::protobuf::uint64 value);

  // uint64 qw_invitee_id = 2;
  void clear_qw_invitee_id();
  static const int kQwInviteeIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_invitee_id() const;
  void set_qw_invitee_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_reason_;
  ::google::protobuf::uint64 qw_invite_id_;
  ::google::protobuf::uint64 qw_invitee_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamMakeTeam) */ {
 public:
  LoginRequestTeamMakeTeam();
  virtual ~LoginRequestTeamMakeTeam();

  LoginRequestTeamMakeTeam(const LoginRequestTeamMakeTeam& from);

  inline LoginRequestTeamMakeTeam& operator=(const LoginRequestTeamMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamMakeTeam(LoginRequestTeamMakeTeam&& from) noexcept
    : LoginRequestTeamMakeTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamMakeTeam& operator=(LoginRequestTeamMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamMakeTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamMakeTeam*>(
               &_LoginRequestTeamMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(LoginRequestTeamMakeTeam* other);
  friend void swap(LoginRequestTeamMakeTeam& a, LoginRequestTeamMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamMakeTeam& from);
  void MergeFrom(const LoginRequestTeamMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 1;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 1;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamMakeTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamInviteTeam) */ {
 public:
  LoginRequestTeamInviteTeam();
  virtual ~LoginRequestTeamInviteTeam();

  LoginRequestTeamInviteTeam(const LoginRequestTeamInviteTeam& from);

  inline LoginRequestTeamInviteTeam& operator=(const LoginRequestTeamInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamInviteTeam(LoginRequestTeamInviteTeam&& from) noexcept
    : LoginRequestTeamInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamInviteTeam& operator=(LoginRequestTeamInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamInviteTeam*>(
               &_LoginRequestTeamInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(LoginRequestTeamInviteTeam* other);
  friend void swap(LoginRequestTeamInviteTeam& a, LoginRequestTeamInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamInviteTeam& from);
  void MergeFrom(const LoginRequestTeamInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot_id = 2;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamChangeSlot) */ {
 public:
  LoginRequestTeamChangeSlot();
  virtual ~LoginRequestTeamChangeSlot();

  LoginRequestTeamChangeSlot(const LoginRequestTeamChangeSlot& from);

  inline LoginRequestTeamChangeSlot& operator=(const LoginRequestTeamChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamChangeSlot(LoginRequestTeamChangeSlot&& from) noexcept
    : LoginRequestTeamChangeSlot() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamChangeSlot& operator=(LoginRequestTeamChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamChangeSlot* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamChangeSlot*>(
               &_LoginRequestTeamChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(LoginRequestTeamChangeSlot* other);
  friend void swap(LoginRequestTeamChangeSlot& a, LoginRequestTeamChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamChangeSlot& from);
  void MergeFrom(const LoginRequestTeamChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot_id = 2;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamChangeSlotImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamKickPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamKickPlayer) */ {
 public:
  LoginRequestTeamKickPlayer();
  virtual ~LoginRequestTeamKickPlayer();

  LoginRequestTeamKickPlayer(const LoginRequestTeamKickPlayer& from);

  inline LoginRequestTeamKickPlayer& operator=(const LoginRequestTeamKickPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamKickPlayer(LoginRequestTeamKickPlayer&& from) noexcept
    : LoginRequestTeamKickPlayer() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamKickPlayer& operator=(LoginRequestTeamKickPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamKickPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamKickPlayer* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamKickPlayer*>(
               &_LoginRequestTeamKickPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(LoginRequestTeamKickPlayer* other);
  friend void swap(LoginRequestTeamKickPlayer& a, LoginRequestTeamKickPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamKickPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamKickPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamKickPlayer& from);
  void MergeFrom(const LoginRequestTeamKickPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamKickPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamKickPlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamKickPlayerImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamGameStart) */ {
 public:
  LoginRequestTeamGameStart();
  virtual ~LoginRequestTeamGameStart();

  LoginRequestTeamGameStart(const LoginRequestTeamGameStart& from);

  inline LoginRequestTeamGameStart& operator=(const LoginRequestTeamGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamGameStart(LoginRequestTeamGameStart&& from) noexcept
    : LoginRequestTeamGameStart() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamGameStart& operator=(LoginRequestTeamGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamGameStart* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamGameStart*>(
               &_LoginRequestTeamGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(LoginRequestTeamGameStart* other);
  friend void swap(LoginRequestTeamGameStart& a, LoginRequestTeamGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamGameStart& from);
  void MergeFrom(const LoginRequestTeamGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_team_id = 1;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamGameStartImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamEnterTeam) */ {
 public:
  LoginRequestTeamEnterTeam();
  virtual ~LoginRequestTeamEnterTeam();

  LoginRequestTeamEnterTeam(const LoginRequestTeamEnterTeam& from);

  inline LoginRequestTeamEnterTeam& operator=(const LoginRequestTeamEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamEnterTeam(LoginRequestTeamEnterTeam&& from) noexcept
    : LoginRequestTeamEnterTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamEnterTeam& operator=(LoginRequestTeamEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamEnterTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamEnterTeam*>(
               &_LoginRequestTeamEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(LoginRequestTeamEnterTeam* other);
  friend void swap(LoginRequestTeamEnterTeam& a, LoginRequestTeamEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamEnterTeam& from);
  void MergeFrom(const LoginRequestTeamEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 2;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 2;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint64 qw_team_id = 1;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamEnterTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamPlayerLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamPlayerLeave) */ {
 public:
  LoginRequestTeamPlayerLeave();
  virtual ~LoginRequestTeamPlayerLeave();

  LoginRequestTeamPlayerLeave(const LoginRequestTeamPlayerLeave& from);

  inline LoginRequestTeamPlayerLeave& operator=(const LoginRequestTeamPlayerLeave& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamPlayerLeave(LoginRequestTeamPlayerLeave&& from) noexcept
    : LoginRequestTeamPlayerLeave() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamPlayerLeave& operator=(LoginRequestTeamPlayerLeave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamPlayerLeave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamPlayerLeave* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamPlayerLeave*>(
               &_LoginRequestTeamPlayerLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(LoginRequestTeamPlayerLeave* other);
  friend void swap(LoginRequestTeamPlayerLeave& a, LoginRequestTeamPlayerLeave& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamPlayerLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamPlayerLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamPlayerLeave& from);
  void MergeFrom(const LoginRequestTeamPlayerLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamPlayerLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamPlayerLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamPlayerLeaveImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginMakeTeam) */ {
 public:
  TeamAckLoginMakeTeam();
  virtual ~TeamAckLoginMakeTeam();

  TeamAckLoginMakeTeam(const TeamAckLoginMakeTeam& from);

  inline TeamAckLoginMakeTeam& operator=(const TeamAckLoginMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginMakeTeam(TeamAckLoginMakeTeam&& from) noexcept
    : TeamAckLoginMakeTeam() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginMakeTeam& operator=(TeamAckLoginMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginMakeTeam* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginMakeTeam*>(
               &_TeamAckLoginMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(TeamAckLoginMakeTeam* other);
  friend void swap(TeamAckLoginMakeTeam& a, TeamAckLoginMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginMakeTeam& from);
  void MergeFrom(const TeamAckLoginMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot_id = 4;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 4;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // uint64 qw_team_id = 3;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_id_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginMakeTeamImpl();
};
// -------------------------------------------------------------------

class TeamNotifyLoginTeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamNotifyLoginTeamInfo) */ {
 public:
  TeamNotifyLoginTeamInfo();
  virtual ~TeamNotifyLoginTeamInfo();

  TeamNotifyLoginTeamInfo(const TeamNotifyLoginTeamInfo& from);

  inline TeamNotifyLoginTeamInfo& operator=(const TeamNotifyLoginTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamNotifyLoginTeamInfo(TeamNotifyLoginTeamInfo&& from) noexcept
    : TeamNotifyLoginTeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamNotifyLoginTeamInfo& operator=(TeamNotifyLoginTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamNotifyLoginTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamNotifyLoginTeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamNotifyLoginTeamInfo*>(
               &_TeamNotifyLoginTeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(TeamNotifyLoginTeamInfo* other);
  friend void swap(TeamNotifyLoginTeamInfo& a, TeamNotifyLoginTeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamNotifyLoginTeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamNotifyLoginTeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamNotifyLoginTeamInfo& from);
  void MergeFrom(const TeamNotifyLoginTeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamNotifyLoginTeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  int team_role_data_size() const;
  void clear_team_role_data();
  static const int kTeamRoleDataFieldNumber = 1;
  const ::GameProto::TeamRoleData& team_role_data(int index) const;
  ::GameProto::TeamRoleData* mutable_team_role_data(int index);
  ::GameProto::TeamRoleData* add_team_role_data();
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
      mutable_team_role_data();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
      team_role_data() const;

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint64 qw_player_id = 3;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamNotifyLoginTeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData > team_role_data_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamNotifyLoginTeamInfoImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginInviteTeam) */ {
 public:
  TeamAckLoginInviteTeam();
  virtual ~TeamAckLoginInviteTeam();

  TeamAckLoginInviteTeam(const TeamAckLoginInviteTeam& from);

  inline TeamAckLoginInviteTeam& operator=(const TeamAckLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginInviteTeam(TeamAckLoginInviteTeam&& from) noexcept
    : TeamAckLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginInviteTeam& operator=(TeamAckLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginInviteTeam*>(
               &_TeamAckLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(TeamAckLoginInviteTeam* other);
  friend void swap(TeamAckLoginInviteTeam& a, TeamAckLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginInviteTeam& from);
  void MergeFrom(const TeamAckLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginChangeSlot) */ {
 public:
  TeamAckLoginChangeSlot();
  virtual ~TeamAckLoginChangeSlot();

  TeamAckLoginChangeSlot(const TeamAckLoginChangeSlot& from);

  inline TeamAckLoginChangeSlot& operator=(const TeamAckLoginChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginChangeSlot(TeamAckLoginChangeSlot&& from) noexcept
    : TeamAckLoginChangeSlot() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginChangeSlot& operator=(TeamAckLoginChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginChangeSlot* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginChangeSlot*>(
               &_TeamAckLoginChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(TeamAckLoginChangeSlot* other);
  friend void swap(TeamAckLoginChangeSlot& a, TeamAckLoginChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginChangeSlot& from);
  void MergeFrom(const TeamAckLoginChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginChangeSlotImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginKickPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginKickPlayer) */ {
 public:
  TeamAckLoginKickPlayer();
  virtual ~TeamAckLoginKickPlayer();

  TeamAckLoginKickPlayer(const TeamAckLoginKickPlayer& from);

  inline TeamAckLoginKickPlayer& operator=(const TeamAckLoginKickPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginKickPlayer(TeamAckLoginKickPlayer&& from) noexcept
    : TeamAckLoginKickPlayer() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginKickPlayer& operator=(TeamAckLoginKickPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginKickPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginKickPlayer* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginKickPlayer*>(
               &_TeamAckLoginKickPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(TeamAckLoginKickPlayer* other);
  friend void swap(TeamAckLoginKickPlayer& a, TeamAckLoginKickPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginKickPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginKickPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginKickPlayer& from);
  void MergeFrom(const TeamAckLoginKickPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginKickPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginKickPlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginKickPlayerImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginGameStart) */ {
 public:
  TeamAckLoginGameStart();
  virtual ~TeamAckLoginGameStart();

  TeamAckLoginGameStart(const TeamAckLoginGameStart& from);

  inline TeamAckLoginGameStart& operator=(const TeamAckLoginGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginGameStart(TeamAckLoginGameStart&& from) noexcept
    : TeamAckLoginGameStart() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginGameStart& operator=(TeamAckLoginGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginGameStart* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginGameStart*>(
               &_TeamAckLoginGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(TeamAckLoginGameStart* other);
  friend void swap(TeamAckLoginGameStart& a, TeamAckLoginGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginGameStart& from);
  void MergeFrom(const TeamAckLoginGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_listen_ip = 5;
  void clear_sz_listen_ip();
  static const int kSzListenIpFieldNumber = 5;
  const ::std::string& sz_listen_ip() const;
  void set_sz_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_listen_ip(::std::string&& value);
  #endif
  void set_sz_listen_ip(const char* value);
  void set_sz_listen_ip(const char* value, size_t size);
  ::std::string* mutable_sz_listen_ip();
  ::std::string* release_sz_listen_ip();
  void set_allocated_sz_listen_ip(::std::string* sz_listen_ip);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_player_port = 2;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 3;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint32 dw_slave_server_port = 4;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 4;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // uint64 qw_player_id = 6;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 6;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 7;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 7;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_listen_ip_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginGameStartImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginEnterTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginEnterTeam) */ {
 public:
  TeamAckLoginEnterTeam();
  virtual ~TeamAckLoginEnterTeam();

  TeamAckLoginEnterTeam(const TeamAckLoginEnterTeam& from);

  inline TeamAckLoginEnterTeam& operator=(const TeamAckLoginEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginEnterTeam(TeamAckLoginEnterTeam&& from) noexcept
    : TeamAckLoginEnterTeam() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginEnterTeam& operator=(TeamAckLoginEnterTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginEnterTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginEnterTeam* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginEnterTeam*>(
               &_TeamAckLoginEnterTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(TeamAckLoginEnterTeam* other);
  friend void swap(TeamAckLoginEnterTeam& a, TeamAckLoginEnterTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginEnterTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginEnterTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginEnterTeam& from);
  void MergeFrom(const TeamAckLoginEnterTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginEnterTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 3;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginEnterTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginEnterTeamImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginPlayerLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginPlayerLeave) */ {
 public:
  TeamAckLoginPlayerLeave();
  virtual ~TeamAckLoginPlayerLeave();

  TeamAckLoginPlayerLeave(const TeamAckLoginPlayerLeave& from);

  inline TeamAckLoginPlayerLeave& operator=(const TeamAckLoginPlayerLeave& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginPlayerLeave(TeamAckLoginPlayerLeave&& from) noexcept
    : TeamAckLoginPlayerLeave() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginPlayerLeave& operator=(TeamAckLoginPlayerLeave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginPlayerLeave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginPlayerLeave* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginPlayerLeave*>(
               &_TeamAckLoginPlayerLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(TeamAckLoginPlayerLeave* other);
  friend void swap(TeamAckLoginPlayerLeave& a, TeamAckLoginPlayerLeave& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginPlayerLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginPlayerLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginPlayerLeave& from);
  void MergeFrom(const TeamAckLoginPlayerLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginPlayerLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginPlayerLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginPlayerLeaveImpl();
};
// -------------------------------------------------------------------

class TeamRequestGameManagerGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamRequestGameManagerGameStart) */ {
 public:
  TeamRequestGameManagerGameStart();
  virtual ~TeamRequestGameManagerGameStart();

  TeamRequestGameManagerGameStart(const TeamRequestGameManagerGameStart& from);

  inline TeamRequestGameManagerGameStart& operator=(const TeamRequestGameManagerGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRequestGameManagerGameStart(TeamRequestGameManagerGameStart&& from) noexcept
    : TeamRequestGameManagerGameStart() {
    *this = ::std::move(from);
  }

  inline TeamRequestGameManagerGameStart& operator=(TeamRequestGameManagerGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRequestGameManagerGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRequestGameManagerGameStart* internal_default_instance() {
    return reinterpret_cast<const TeamRequestGameManagerGameStart*>(
               &_TeamRequestGameManagerGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(TeamRequestGameManagerGameStart* other);
  friend void swap(TeamRequestGameManagerGameStart& a, TeamRequestGameManagerGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRequestGameManagerGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRequestGameManagerGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRequestGameManagerGameStart& from);
  void MergeFrom(const TeamRequestGameManagerGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRequestGameManagerGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 qw_player_ids = 2;
  int qw_player_ids_size() const;
  void clear_qw_player_ids();
  static const int kQwPlayerIdsFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_ids(int index) const;
  void set_qw_player_ids(int index, ::google::protobuf::uint64 value);
  void add_qw_player_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      qw_player_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_qw_player_ids();

  // uint64 qw_team_id = 1;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamRequestGameManagerGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > qw_player_ids_;
  mutable int _qw_player_ids_cached_byte_size_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamRequestGameManagerGameStartImpl();
};
// -------------------------------------------------------------------

class GameManagerAckTeamGameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameManagerAckTeamGameStart) */ {
 public:
  GameManagerAckTeamGameStart();
  virtual ~GameManagerAckTeamGameStart();

  GameManagerAckTeamGameStart(const GameManagerAckTeamGameStart& from);

  inline GameManagerAckTeamGameStart& operator=(const GameManagerAckTeamGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameManagerAckTeamGameStart(GameManagerAckTeamGameStart&& from) noexcept
    : GameManagerAckTeamGameStart() {
    *this = ::std::move(from);
  }

  inline GameManagerAckTeamGameStart& operator=(GameManagerAckTeamGameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameManagerAckTeamGameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameManagerAckTeamGameStart* internal_default_instance() {
    return reinterpret_cast<const GameManagerAckTeamGameStart*>(
               &_GameManagerAckTeamGameStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(GameManagerAckTeamGameStart* other);
  friend void swap(GameManagerAckTeamGameStart& a, GameManagerAckTeamGameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameManagerAckTeamGameStart* New() const PROTOBUF_FINAL { return New(NULL); }

  GameManagerAckTeamGameStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameManagerAckTeamGameStart& from);
  void MergeFrom(const GameManagerAckTeamGameStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameManagerAckTeamGameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_listen_ip = 6;
  void clear_sz_listen_ip();
  static const int kSzListenIpFieldNumber = 6;
  const ::std::string& sz_listen_ip() const;
  void set_sz_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_listen_ip(::std::string&& value);
  #endif
  void set_sz_listen_ip(const char* value);
  void set_sz_listen_ip(const char* value, size_t size);
  ::std::string* mutable_sz_listen_ip();
  ::std::string* release_sz_listen_ip();
  void set_allocated_sz_listen_ip(::std::string* sz_listen_ip);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_player_port = 2;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 3;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint32 dw_slave_server_port = 4;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 4;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // uint64 qw_team_id = 5;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 5;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameManagerAckTeamGameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_listen_ip_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  ::google::protobuf::uint64 qw_team_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckTeamGameStartImpl();
};
// -------------------------------------------------------------------

class GameNotifyGameManagerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyGameManagerInfo) */ {
 public:
  GameNotifyGameManagerInfo();
  virtual ~GameNotifyGameManagerInfo();

  GameNotifyGameManagerInfo(const GameNotifyGameManagerInfo& from);

  inline GameNotifyGameManagerInfo& operator=(const GameNotifyGameManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyGameManagerInfo(GameNotifyGameManagerInfo&& from) noexcept
    : GameNotifyGameManagerInfo() {
    *this = ::std::move(from);
  }

  inline GameNotifyGameManagerInfo& operator=(GameNotifyGameManagerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyGameManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyGameManagerInfo* internal_default_instance() {
    return reinterpret_cast<const GameNotifyGameManagerInfo*>(
               &_GameNotifyGameManagerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(GameNotifyGameManagerInfo* other);
  friend void swap(GameNotifyGameManagerInfo& a, GameNotifyGameManagerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyGameManagerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyGameManagerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyGameManagerInfo& from);
  void MergeFrom(const GameNotifyGameManagerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyGameManagerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_player_port = 1;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 1;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 2;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint64 qw_team_id = 4;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 4;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_slave_server_port = 3;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // uint32 dw_team_server_id = 5;
  void clear_dw_team_server_id();
  static const int kDwTeamServerIdFieldNumber = 5;
  ::google::protobuf::uint32 dw_team_server_id() const;
  void set_dw_team_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyGameManagerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  ::google::protobuf::uint32 dw_team_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfoImpl();
};
// -------------------------------------------------------------------

class GameManagerAckGameInfoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameManagerAckGameInfoResult) */ {
 public:
  GameManagerAckGameInfoResult();
  virtual ~GameManagerAckGameInfoResult();

  GameManagerAckGameInfoResult(const GameManagerAckGameInfoResult& from);

  inline GameManagerAckGameInfoResult& operator=(const GameManagerAckGameInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameManagerAckGameInfoResult(GameManagerAckGameInfoResult&& from) noexcept
    : GameManagerAckGameInfoResult() {
    *this = ::std::move(from);
  }

  inline GameManagerAckGameInfoResult& operator=(GameManagerAckGameInfoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameManagerAckGameInfoResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameManagerAckGameInfoResult* internal_default_instance() {
    return reinterpret_cast<const GameManagerAckGameInfoResult*>(
               &_GameManagerAckGameInfoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(GameManagerAckGameInfoResult* other);
  friend void swap(GameManagerAckGameInfoResult& a, GameManagerAckGameInfoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameManagerAckGameInfoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GameManagerAckGameInfoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameManagerAckGameInfoResult& from);
  void MergeFrom(const GameManagerAckGameInfoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameManagerAckGameInfoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameManagerAckGameInfoResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResultImpl();
};
// -------------------------------------------------------------------

class PlayerRequestGameManagerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestGameManagerInfo) */ {
 public:
  PlayerRequestGameManagerInfo();
  virtual ~PlayerRequestGameManagerInfo();

  PlayerRequestGameManagerInfo(const PlayerRequestGameManagerInfo& from);

  inline PlayerRequestGameManagerInfo& operator=(const PlayerRequestGameManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestGameManagerInfo(PlayerRequestGameManagerInfo&& from) noexcept
    : PlayerRequestGameManagerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerRequestGameManagerInfo& operator=(PlayerRequestGameManagerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestGameManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestGameManagerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestGameManagerInfo*>(
               &_PlayerRequestGameManagerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(PlayerRequestGameManagerInfo* other);
  friend void swap(PlayerRequestGameManagerInfo& a, PlayerRequestGameManagerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestGameManagerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestGameManagerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestGameManagerInfo& from);
  void MergeFrom(const PlayerRequestGameManagerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestGameManagerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestGameManagerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfoImpl();
};
// -------------------------------------------------------------------

class GameManagerAckPlayerInfoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameManagerAckPlayerInfoResult) */ {
 public:
  GameManagerAckPlayerInfoResult();
  virtual ~GameManagerAckPlayerInfoResult();

  GameManagerAckPlayerInfoResult(const GameManagerAckPlayerInfoResult& from);

  inline GameManagerAckPlayerInfoResult& operator=(const GameManagerAckPlayerInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameManagerAckPlayerInfoResult(GameManagerAckPlayerInfoResult&& from) noexcept
    : GameManagerAckPlayerInfoResult() {
    *this = ::std::move(from);
  }

  inline GameManagerAckPlayerInfoResult& operator=(GameManagerAckPlayerInfoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameManagerAckPlayerInfoResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameManagerAckPlayerInfoResult* internal_default_instance() {
    return reinterpret_cast<const GameManagerAckPlayerInfoResult*>(
               &_GameManagerAckPlayerInfoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(GameManagerAckPlayerInfoResult* other);
  friend void swap(GameManagerAckPlayerInfoResult& a, GameManagerAckPlayerInfoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameManagerAckPlayerInfoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GameManagerAckPlayerInfoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameManagerAckPlayerInfoResult& from);
  void MergeFrom(const GameManagerAckPlayerInfoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameManagerAckPlayerInfoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_player_port = 1;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 1;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 2;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint32 dw_slave_server_port = 3;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameManagerAckPlayerInfoResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResultImpl();
};
// -------------------------------------------------------------------

class PlayerRequestGameTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestGameTest) */ {
 public:
  PlayerRequestGameTest();
  virtual ~PlayerRequestGameTest();

  PlayerRequestGameTest(const PlayerRequestGameTest& from);

  inline PlayerRequestGameTest& operator=(const PlayerRequestGameTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestGameTest(PlayerRequestGameTest&& from) noexcept
    : PlayerRequestGameTest() {
    *this = ::std::move(from);
  }

  inline PlayerRequestGameTest& operator=(PlayerRequestGameTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestGameTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestGameTest* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestGameTest*>(
               &_PlayerRequestGameTest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(PlayerRequestGameTest* other);
  friend void swap(PlayerRequestGameTest& a, PlayerRequestGameTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestGameTest* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestGameTest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestGameTest& from);
  void MergeFrom(const PlayerRequestGameTest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestGameTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_test = 1;
  void clear_sz_test();
  static const int kSzTestFieldNumber = 1;
  const ::std::string& sz_test() const;
  void set_sz_test(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_test(::std::string&& value);
  #endif
  void set_sz_test(const char* value);
  void set_sz_test(const char* value, size_t size);
  ::std::string* mutable_sz_test();
  ::std::string* release_sz_test();
  void set_allocated_sz_test(::std::string* sz_test);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestGameTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_test_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTestImpl();
};
// -------------------------------------------------------------------

class PlayerRequestGameEnter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestGameEnter) */ {
 public:
  PlayerRequestGameEnter();
  virtual ~PlayerRequestGameEnter();

  PlayerRequestGameEnter(const PlayerRequestGameEnter& from);

  inline PlayerRequestGameEnter& operator=(const PlayerRequestGameEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestGameEnter(PlayerRequestGameEnter&& from) noexcept
    : PlayerRequestGameEnter() {
    *this = ::std::move(from);
  }

  inline PlayerRequestGameEnter& operator=(PlayerRequestGameEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestGameEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestGameEnter* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestGameEnter*>(
               &_PlayerRequestGameEnter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(PlayerRequestGameEnter* other);
  friend void swap(PlayerRequestGameEnter& a, PlayerRequestGameEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestGameEnter* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestGameEnter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestGameEnter& from);
  void MergeFrom(const PlayerRequestGameEnter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestGameEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestGameEnter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameEnterImpl();
};
// -------------------------------------------------------------------

class PlayerRequestMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestMove) */ {
 public:
  PlayerRequestMove();
  virtual ~PlayerRequestMove();

  PlayerRequestMove(const PlayerRequestMove& from);

  inline PlayerRequestMove& operator=(const PlayerRequestMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestMove(PlayerRequestMove&& from) noexcept
    : PlayerRequestMove() {
    *this = ::std::move(from);
  }

  inline PlayerRequestMove& operator=(PlayerRequestMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestMove* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestMove*>(
               &_PlayerRequestMove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(PlayerRequestMove* other);
  friend void swap(PlayerRequestMove& a, PlayerRequestMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestMove* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestMove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestMove& from);
  void MergeFrom(const PlayerRequestMove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float f_tick = 1;
  void clear_f_tick();
  static const int kFTickFieldNumber = 1;
  float f_tick() const;
  void set_f_tick(float value);

  // .GameProto.EMoveDirection e_direction = 2;
  void clear_e_direction();
  static const int kEDirectionFieldNumber = 2;
  ::GameProto::EMoveDirection e_direction() const;
  void set_e_direction(::GameProto::EMoveDirection value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float f_tick_;
  int e_direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestMoveImpl();
};
// -------------------------------------------------------------------

class PlayerRequestRotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestRotation) */ {
 public:
  PlayerRequestRotation();
  virtual ~PlayerRequestRotation();

  PlayerRequestRotation(const PlayerRequestRotation& from);

  inline PlayerRequestRotation& operator=(const PlayerRequestRotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestRotation(PlayerRequestRotation&& from) noexcept
    : PlayerRequestRotation() {
    *this = ::std::move(from);
  }

  inline PlayerRequestRotation& operator=(PlayerRequestRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestRotation* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestRotation*>(
               &_PlayerRequestRotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(PlayerRequestRotation* other);
  friend void swap(PlayerRequestRotation& a, PlayerRequestRotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestRotation* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestRotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestRotation& from);
  void MergeFrom(const PlayerRequestRotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestRotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float f_tick = 1;
  void clear_f_tick();
  static const int kFTickFieldNumber = 1;
  float f_tick() const;
  void set_f_tick(float value);

  // .GameProto.ERotationDirection e_direction = 2;
  void clear_e_direction();
  static const int kEDirectionFieldNumber = 2;
  ::GameProto::ERotationDirection e_direction() const;
  void set_e_direction(::GameProto::ERotationDirection value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestRotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float f_tick_;
  int e_direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestRotationImpl();
};
// -------------------------------------------------------------------

class GameAckPlayerEnter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameAckPlayerEnter) */ {
 public:
  GameAckPlayerEnter();
  virtual ~GameAckPlayerEnter();

  GameAckPlayerEnter(const GameAckPlayerEnter& from);

  inline GameAckPlayerEnter& operator=(const GameAckPlayerEnter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameAckPlayerEnter(GameAckPlayerEnter&& from) noexcept
    : GameAckPlayerEnter() {
    *this = ::std::move(from);
  }

  inline GameAckPlayerEnter& operator=(GameAckPlayerEnter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAckPlayerEnter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAckPlayerEnter* internal_default_instance() {
    return reinterpret_cast<const GameAckPlayerEnter*>(
               &_GameAckPlayerEnter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(GameAckPlayerEnter* other);
  friend void swap(GameAckPlayerEnter& a, GameAckPlayerEnter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameAckPlayerEnter* New() const PROTOBUF_FINAL { return New(NULL); }

  GameAckPlayerEnter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameAckPlayerEnter& from);
  void MergeFrom(const GameAckPlayerEnter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameAckPlayerEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_game_type = 2;
  void clear_dw_game_type();
  static const int kDwGameTypeFieldNumber = 2;
  ::google::protobuf::uint32 dw_game_type() const;
  void set_dw_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameAckPlayerEnter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_game_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameAckPlayerEnterImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameConfig) */ {
 public:
  GameNotifyPlayerGameConfig();
  virtual ~GameNotifyPlayerGameConfig();

  GameNotifyPlayerGameConfig(const GameNotifyPlayerGameConfig& from);

  inline GameNotifyPlayerGameConfig& operator=(const GameNotifyPlayerGameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameConfig(GameNotifyPlayerGameConfig&& from) noexcept
    : GameNotifyPlayerGameConfig() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameConfig& operator=(GameNotifyPlayerGameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameConfig* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameConfig*>(
               &_GameNotifyPlayerGameConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(GameNotifyPlayerGameConfig* other);
  friend void swap(GameNotifyPlayerGameConfig& a, GameNotifyPlayerGameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameConfig& from);
  void MergeFrom(const GameNotifyPlayerGameConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.GameConfigCommon common_config = 2;
  bool has_common_config() const;
  void clear_common_config();
  static const int kCommonConfigFieldNumber = 2;
  const ::GameProto::GameConfigCommon& common_config() const;
  ::GameProto::GameConfigCommon* release_common_config();
  ::GameProto::GameConfigCommon* mutable_common_config();
  void set_allocated_common_config(::GameProto::GameConfigCommon* common_config);

  // uint32 dw_game_type = 1;
  void clear_dw_game_type();
  static const int kDwGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 dw_game_type() const;
  void set_dw_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::GameConfigCommon* common_config_;
  ::google::protobuf::uint32 dw_game_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameConfigImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameRoleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameRoleData) */ {
 public:
  GameNotifyPlayerGameRoleData();
  virtual ~GameNotifyPlayerGameRoleData();

  GameNotifyPlayerGameRoleData(const GameNotifyPlayerGameRoleData& from);

  inline GameNotifyPlayerGameRoleData& operator=(const GameNotifyPlayerGameRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameRoleData(GameNotifyPlayerGameRoleData&& from) noexcept
    : GameNotifyPlayerGameRoleData() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameRoleData& operator=(GameNotifyPlayerGameRoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameRoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameRoleData* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameRoleData*>(
               &_GameNotifyPlayerGameRoleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(GameNotifyPlayerGameRoleData* other);
  friend void swap(GameNotifyPlayerGameRoleData& a, GameNotifyPlayerGameRoleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameRoleData* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameRoleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameRoleData& from);
  void MergeFrom(const GameNotifyPlayerGameRoleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameRoleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.GameCommonRoleData common_role_data = 2;
  bool has_common_role_data() const;
  void clear_common_role_data();
  static const int kCommonRoleDataFieldNumber = 2;
  const ::GameProto::GameCommonRoleData& common_role_data() const;
  ::GameProto::GameCommonRoleData* release_common_role_data();
  ::GameProto::GameCommonRoleData* mutable_common_role_data();
  void set_allocated_common_role_data(::GameProto::GameCommonRoleData* common_role_data);

  // uint32 dw_game_type = 1;
  void clear_dw_game_type();
  static const int kDwGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 dw_game_type() const;
  void set_dw_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameRoleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::GameCommonRoleData* common_role_data_;
  ::google::protobuf::uint32 dw_game_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameRoleDataImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameSceneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameSceneInfo) */ {
 public:
  GameNotifyPlayerGameSceneInfo();
  virtual ~GameNotifyPlayerGameSceneInfo();

  GameNotifyPlayerGameSceneInfo(const GameNotifyPlayerGameSceneInfo& from);

  inline GameNotifyPlayerGameSceneInfo& operator=(const GameNotifyPlayerGameSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameSceneInfo(GameNotifyPlayerGameSceneInfo&& from) noexcept
    : GameNotifyPlayerGameSceneInfo() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameSceneInfo& operator=(GameNotifyPlayerGameSceneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameSceneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameSceneInfo* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameSceneInfo*>(
               &_GameNotifyPlayerGameSceneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(GameNotifyPlayerGameSceneInfo* other);
  friend void swap(GameNotifyPlayerGameSceneInfo& a, GameNotifyPlayerGameSceneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameSceneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameSceneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameSceneInfo& from);
  void MergeFrom(const GameNotifyPlayerGameSceneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameSceneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.GameCommonSceneInfo common_scene_info = 3;
  bool has_common_scene_info() const;
  void clear_common_scene_info();
  static const int kCommonSceneInfoFieldNumber = 3;
  const ::GameProto::GameCommonSceneInfo& common_scene_info() const;
  ::GameProto::GameCommonSceneInfo* release_common_scene_info();
  ::GameProto::GameCommonSceneInfo* mutable_common_scene_info();
  void set_allocated_common_scene_info(::GameProto::GameCommonSceneInfo* common_scene_info);

  // uint32 dw_game_type = 1;
  void clear_dw_game_type();
  static const int kDwGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 dw_game_type() const;
  void set_dw_game_type(::google::protobuf::uint32 value);

  // .GameProto.EGameSceneState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::GameProto::EGameSceneState state() const;
  void set_state(::GameProto::EGameSceneState value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameSceneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::GameCommonSceneInfo* common_scene_info_;
  ::google::protobuf::uint32 dw_game_type_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameSceneInfoImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerPrepareTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerPrepareTime) */ {
 public:
  GameNotifyPlayerPrepareTime();
  virtual ~GameNotifyPlayerPrepareTime();

  GameNotifyPlayerPrepareTime(const GameNotifyPlayerPrepareTime& from);

  inline GameNotifyPlayerPrepareTime& operator=(const GameNotifyPlayerPrepareTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerPrepareTime(GameNotifyPlayerPrepareTime&& from) noexcept
    : GameNotifyPlayerPrepareTime() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerPrepareTime& operator=(GameNotifyPlayerPrepareTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerPrepareTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerPrepareTime* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerPrepareTime*>(
               &_GameNotifyPlayerPrepareTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(GameNotifyPlayerPrepareTime* other);
  friend void swap(GameNotifyPlayerPrepareTime& a, GameNotifyPlayerPrepareTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerPrepareTime* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerPrepareTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerPrepareTime& from);
  void MergeFrom(const GameNotifyPlayerPrepareTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerPrepareTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_left_time = 1;
  void clear_dw_left_time();
  static const int kDwLeftTimeFieldNumber = 1;
  ::google::protobuf::uint32 dw_left_time() const;
  void set_dw_left_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerPrepareTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_left_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerPrepareTimeImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameReadyTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameReadyTime) */ {
 public:
  GameNotifyPlayerGameReadyTime();
  virtual ~GameNotifyPlayerGameReadyTime();

  GameNotifyPlayerGameReadyTime(const GameNotifyPlayerGameReadyTime& from);

  inline GameNotifyPlayerGameReadyTime& operator=(const GameNotifyPlayerGameReadyTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameReadyTime(GameNotifyPlayerGameReadyTime&& from) noexcept
    : GameNotifyPlayerGameReadyTime() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameReadyTime& operator=(GameNotifyPlayerGameReadyTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameReadyTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameReadyTime* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameReadyTime*>(
               &_GameNotifyPlayerGameReadyTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(GameNotifyPlayerGameReadyTime* other);
  friend void swap(GameNotifyPlayerGameReadyTime& a, GameNotifyPlayerGameReadyTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameReadyTime* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameReadyTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameReadyTime& from);
  void MergeFrom(const GameNotifyPlayerGameReadyTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameReadyTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_left_time = 1;
  void clear_dw_left_time();
  static const int kDwLeftTimeFieldNumber = 1;
  ::google::protobuf::uint32 dw_left_time() const;
  void set_dw_left_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameReadyTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_left_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameReadyTimeImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameState) */ {
 public:
  GameNotifyPlayerGameState();
  virtual ~GameNotifyPlayerGameState();

  GameNotifyPlayerGameState(const GameNotifyPlayerGameState& from);

  inline GameNotifyPlayerGameState& operator=(const GameNotifyPlayerGameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameState(GameNotifyPlayerGameState&& from) noexcept
    : GameNotifyPlayerGameState() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameState& operator=(GameNotifyPlayerGameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameState* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameState*>(
               &_GameNotifyPlayerGameState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(GameNotifyPlayerGameState* other);
  friend void swap(GameNotifyPlayerGameState& a, GameNotifyPlayerGameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameState* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameState& from);
  void MergeFrom(const GameNotifyPlayerGameState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.EGameSceneState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::GameProto::EGameSceneState state() const;
  void set_state(::GameProto::EGameSceneState value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameStateImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerGameInitTetris : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerGameInitTetris) */ {
 public:
  GameNotifyPlayerGameInitTetris();
  virtual ~GameNotifyPlayerGameInitTetris();

  GameNotifyPlayerGameInitTetris(const GameNotifyPlayerGameInitTetris& from);

  inline GameNotifyPlayerGameInitTetris& operator=(const GameNotifyPlayerGameInitTetris& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerGameInitTetris(GameNotifyPlayerGameInitTetris&& from) noexcept
    : GameNotifyPlayerGameInitTetris() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerGameInitTetris& operator=(GameNotifyPlayerGameInitTetris&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerGameInitTetris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerGameInitTetris* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerGameInitTetris*>(
               &_GameNotifyPlayerGameInitTetris_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(GameNotifyPlayerGameInitTetris* other);
  friend void swap(GameNotifyPlayerGameInitTetris& a, GameNotifyPlayerGameInitTetris& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerGameInitTetris* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerGameInitTetris* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerGameInitTetris& from);
  void MergeFrom(const GameNotifyPlayerGameInitTetris& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerGameInitTetris* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.Tetris curr_tetris = 3;
  bool has_curr_tetris() const;
  void clear_curr_tetris();
  static const int kCurrTetrisFieldNumber = 3;
  const ::GameProto::Tetris& curr_tetris() const;
  ::GameProto::Tetris* release_curr_tetris();
  ::GameProto::Tetris* mutable_curr_tetris();
  void set_allocated_curr_tetris(::GameProto::Tetris* curr_tetris);

  // .GameProto.Tetris next_tetris = 4;
  bool has_next_tetris() const;
  void clear_next_tetris();
  static const int kNextTetrisFieldNumber = 4;
  const ::GameProto::Tetris& next_tetris() const;
  ::GameProto::Tetris* release_next_tetris();
  ::GameProto::Tetris* mutable_next_tetris();
  void set_allocated_next_tetris(::GameProto::Tetris* next_tetris);

  // uint64 dw_player_id = 1;
  void clear_dw_player_id();
  static const int kDwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 dw_player_id() const;
  void set_dw_player_id(::google::protobuf::uint64 value);

  // float f_tick = 2;
  void clear_f_tick();
  static const int kFTickFieldNumber = 2;
  float f_tick() const;
  void set_f_tick(float value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerGameInitTetris)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::Tetris* curr_tetris_;
  ::GameProto::Tetris* next_tetris_;
  ::google::protobuf::uint64 dw_player_id_;
  float f_tick_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameInitTetrisImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerNextTetris : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerNextTetris) */ {
 public:
  GameNotifyPlayerNextTetris();
  virtual ~GameNotifyPlayerNextTetris();

  GameNotifyPlayerNextTetris(const GameNotifyPlayerNextTetris& from);

  inline GameNotifyPlayerNextTetris& operator=(const GameNotifyPlayerNextTetris& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerNextTetris(GameNotifyPlayerNextTetris&& from) noexcept
    : GameNotifyPlayerNextTetris() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerNextTetris& operator=(GameNotifyPlayerNextTetris&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerNextTetris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerNextTetris* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerNextTetris*>(
               &_GameNotifyPlayerNextTetris_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(GameNotifyPlayerNextTetris* other);
  friend void swap(GameNotifyPlayerNextTetris& a, GameNotifyPlayerNextTetris& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerNextTetris* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerNextTetris* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerNextTetris& from);
  void MergeFrom(const GameNotifyPlayerNextTetris& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerNextTetris* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.Tetris next_tetris = 3;
  bool has_next_tetris() const;
  void clear_next_tetris();
  static const int kNextTetrisFieldNumber = 3;
  const ::GameProto::Tetris& next_tetris() const;
  ::GameProto::Tetris* release_next_tetris();
  ::GameProto::Tetris* mutable_next_tetris();
  void set_allocated_next_tetris(::GameProto::Tetris* next_tetris);

  // uint64 dw_player_id = 1;
  void clear_dw_player_id();
  static const int kDwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 dw_player_id() const;
  void set_dw_player_id(::google::protobuf::uint64 value);

  // float f_tick = 2;
  void clear_f_tick();
  static const int kFTickFieldNumber = 2;
  float f_tick() const;
  void set_f_tick(float value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerNextTetris)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::Tetris* next_tetris_;
  ::google::protobuf::uint64 dw_player_id_;
  float f_tick_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerNextTetrisImpl();
};
// -------------------------------------------------------------------

class GameNotifyPlayerDead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyPlayerDead) */ {
 public:
  GameNotifyPlayerDead();
  virtual ~GameNotifyPlayerDead();

  GameNotifyPlayerDead(const GameNotifyPlayerDead& from);

  inline GameNotifyPlayerDead& operator=(const GameNotifyPlayerDead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyPlayerDead(GameNotifyPlayerDead&& from) noexcept
    : GameNotifyPlayerDead() {
    *this = ::std::move(from);
  }

  inline GameNotifyPlayerDead& operator=(GameNotifyPlayerDead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyPlayerDead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyPlayerDead* internal_default_instance() {
    return reinterpret_cast<const GameNotifyPlayerDead*>(
               &_GameNotifyPlayerDead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(GameNotifyPlayerDead* other);
  friend void swap(GameNotifyPlayerDead& a, GameNotifyPlayerDead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyPlayerDead* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyPlayerDead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyPlayerDead& from);
  void MergeFrom(const GameNotifyPlayerDead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyPlayerDead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 dw_player_id = 1;
  void clear_dw_player_id();
  static const int kDwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 dw_player_id() const;
  void set_dw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyPlayerDead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 dw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerDeadImpl();
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_listen_ip = 2;
  void clear_sz_listen_ip();
  static const int kSzListenIpFieldNumber = 2;
  const ::std::string& sz_listen_ip() const;
  void set_sz_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_listen_ip(::std::string&& value);
  #endif
  void set_sz_listen_ip(const char* value);
  void set_sz_listen_ip(const char* value, size_t size);
  ::std::string* mutable_sz_listen_ip();
  ::std::string* release_sz_listen_ip();
  void set_allocated_sz_listen_ip(::std::string* sz_listen_ip);

  // uint32 dw_server_id = 1;
  void clear_dw_server_id();
  static const int kDwServerIdFieldNumber = 1;
  ::google::protobuf::uint32 dw_server_id() const;
  void set_dw_server_id(::google::protobuf::uint32 value);

  // uint32 dw_team_port = 3;
  void clear_dw_team_port();
  static const int kDwTeamPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_team_port() const;
  void set_dw_team_port(::google::protobuf::uint32 value);

  // uint32 dw_game_server_manager_port = 4;
  void clear_dw_game_server_manager_port();
  static const int kDwGameServerManagerPortFieldNumber = 4;
  ::google::protobuf::uint32 dw_game_server_manager_port() const;
  void set_dw_game_server_manager_port(::google::protobuf::uint32 value);

  // uint32 dw_login_port = 5;
  void clear_dw_login_port();
  static const int kDwLoginPortFieldNumber = 5;
  ::google::protobuf::uint32 dw_login_port() const;
  void set_dw_login_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_listen_ip_;
  ::google::protobuf::uint32 dw_server_id_;
  ::google::protobuf::uint32 dw_team_port_;
  ::google::protobuf::uint32 dw_game_server_manager_port_;
  ::google::protobuf::uint32 dw_login_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerRequestLoginServerId

// -------------------------------------------------------------------

// PlayerRequestLogin

// uint64 qw_player_id = 1;
inline void PlayerRequestLogin::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestLogin::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.qw_player_id)
  return qw_player_id_;
}
inline void PlayerRequestLogin::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.qw_player_id)
}

// string sz_nick_name = 2;
inline void PlayerRequestLogin::clear_sz_nick_name() {
  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_nick_name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_nick_name)
  return sz_nick_name_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_nick_name(const ::std::string& value) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_nick_name)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_nick_name(::std::string&& value) {
  
  sz_nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_nick_name)
}
#endif
inline void PlayerRequestLogin::set_sz_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_nick_name)
}
inline void PlayerRequestLogin::set_sz_nick_name(const char* value, size_t size) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_nick_name)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_nick_name)
  return sz_nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_nick_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_nick_name)
  
  return sz_nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_nick_name(::std::string* sz_nick_name) {
  if (sz_nick_name != NULL) {
    
  } else {
    
  }
  sz_nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_nick_name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_nick_name)
}

// string sz_avatar = 3;
inline void PlayerRequestLogin::clear_sz_avatar() {
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_avatar() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_avatar)
  return sz_avatar_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_avatar(const ::std::string& value) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_avatar)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_avatar(::std::string&& value) {
  
  sz_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_avatar)
}
#endif
inline void PlayerRequestLogin::set_sz_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_avatar)
}
inline void PlayerRequestLogin::set_sz_avatar(const char* value, size_t size) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_avatar)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_avatar() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_avatar)
  return sz_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_avatar() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_avatar)
  
  return sz_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_avatar(::std::string* sz_avatar) {
  if (sz_avatar != NULL) {
    
  } else {
    
  }
  sz_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_avatar);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_avatar)
}

// uint32 dw_sex = 4;
inline void PlayerRequestLogin::clear_dw_sex() {
  dw_sex_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLogin::dw_sex() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.dw_sex)
  return dw_sex_;
}
inline void PlayerRequestLogin::set_dw_sex(::google::protobuf::uint32 value) {
  
  dw_sex_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.dw_sex)
}

// uint32 dw_balance = 5;
inline void PlayerRequestLogin::clear_dw_balance() {
  dw_balance_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLogin::dw_balance() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.dw_balance)
  return dw_balance_;
}
inline void PlayerRequestLogin::set_dw_balance(::google::protobuf::uint32 value) {
  
  dw_balance_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.dw_balance)
}

// string sz_token = 6;
inline void PlayerRequestLogin::clear_sz_token() {
  sz_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_token() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_token)
  return sz_token_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_token(const ::std::string& value) {
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_token)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_token(::std::string&& value) {
  
  sz_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_token)
}
#endif
inline void PlayerRequestLogin::set_sz_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_token)
}
inline void PlayerRequestLogin::set_sz_token(const char* value, size_t size) {
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_token)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_token() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_token)
  return sz_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_token() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_token)
  
  return sz_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_token(::std::string* sz_token) {
  if (sz_token != NULL) {
    
  } else {
    
  }
  sz_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_token);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_token)
}

// -------------------------------------------------------------------

// PlayerRequestLoginMakeTeam

// -------------------------------------------------------------------

// PlayerRequestLoginInviteTeam

// uint64 qw_player_id = 1;
inline void PlayerRequestLoginInviteTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestLoginInviteTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
  return qw_player_id_;
}
inline void PlayerRequestLoginInviteTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
}

// -------------------------------------------------------------------

// PlayerRequestLoginChangeSlot

// uint32 dw_slot_id = 1;
inline void PlayerRequestLoginChangeSlot::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLoginChangeSlot::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginChangeSlot.dw_slot_id)
  return dw_slot_id_;
}
inline void PlayerRequestLoginChangeSlot::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginChangeSlot.dw_slot_id)
}

// -------------------------------------------------------------------

// PlayerRequestLoginGameStart

// -------------------------------------------------------------------

// PlayerRequestLoginOnLinePlayer

// -------------------------------------------------------------------

// PlayerRequestLoginEnterTeam

// uint32 dw_team_server_id = 1;
inline void PlayerRequestLoginEnterTeam::clear_dw_team_server_id() {
  dw_team_server_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLoginEnterTeam::dw_team_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginEnterTeam.dw_team_server_id)
  return dw_team_server_id_;
}
inline void PlayerRequestLoginEnterTeam::set_dw_team_server_id(::google::protobuf::uint32 value) {
  
  dw_team_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginEnterTeam.dw_team_server_id)
}

// uint64 qw_team_id = 2;
inline void PlayerRequestLoginEnterTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestLoginEnterTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginEnterTeam.qw_team_id)
  return qw_team_id_;
}
inline void PlayerRequestLoginEnterTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginEnterTeam.qw_team_id)
}

// -------------------------------------------------------------------

// PlayerRequestLoginRefuseEnterTeam

// uint64 qw_player_id = 1;
inline void PlayerRequestLoginRefuseEnterTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestLoginRefuseEnterTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginRefuseEnterTeam.qw_player_id)
  return qw_player_id_;
}
inline void PlayerRequestLoginRefuseEnterTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginRefuseEnterTeam.qw_player_id)
}

// string sz_Reason = 2;
inline void PlayerRequestLoginRefuseEnterTeam::clear_sz_reason() {
  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLoginRefuseEnterTeam::sz_reason() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
  return sz_reason_.GetNoArena();
}
inline void PlayerRequestLoginRefuseEnterTeam::set_sz_reason(const ::std::string& value) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
}
#if LANG_CXX11
inline void PlayerRequestLoginRefuseEnterTeam::set_sz_reason(::std::string&& value) {
  
  sz_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
}
#endif
inline void PlayerRequestLoginRefuseEnterTeam::set_sz_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
}
inline void PlayerRequestLoginRefuseEnterTeam::set_sz_reason(const char* value, size_t size) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
}
inline ::std::string* PlayerRequestLoginRefuseEnterTeam::mutable_sz_reason() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
  return sz_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLoginRefuseEnterTeam::release_sz_reason() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
  
  return sz_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLoginRefuseEnterTeam::set_allocated_sz_reason(::std::string* sz_reason) {
  if (sz_reason != NULL) {
    
  } else {
    
  }
  sz_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_reason);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason)
}

// -------------------------------------------------------------------

// PlayerRequestLoginLeaveTeam

// -------------------------------------------------------------------

// LoginAckPlayerServerId

// uint32 dw_result = 1;
inline void LoginAckPlayerServerId::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerServerId::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerServerId.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerServerId::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerServerId.dw_result)
}

// uint32 dw_server_id = 2;
inline void LoginAckPlayerServerId::clear_dw_server_id() {
  dw_server_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerServerId::dw_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerServerId.dw_server_id)
  return dw_server_id_;
}
inline void LoginAckPlayerServerId::set_dw_server_id(::google::protobuf::uint32 value) {
  
  dw_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerServerId.dw_server_id)
}

// -------------------------------------------------------------------

// LoginAckPlayerLoginResult

// uint32 dw_result = 1;
inline void LoginAckPlayerLoginResult::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerLoginResult::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerLoginResult.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerLoginResult::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerLoginResult.dw_result)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerGameKick

// uint32 dw_result = 1;
inline void LoginNotifyPlayerGameKick::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginNotifyPlayerGameKick::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerGameKick.dw_result)
  return dw_result_;
}
inline void LoginNotifyPlayerGameKick::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerGameKick.dw_result)
}

// -------------------------------------------------------------------

// LoginAckPlayerMakeTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerMakeTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerMakeTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerMakeTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerMakeTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerMakeTeam.dw_result)
}

// uint64 qw_team_id = 2;
inline void LoginAckPlayerMakeTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAckPlayerMakeTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerMakeTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginAckPlayerMakeTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerMakeTeam.qw_team_id)
}

// uint32 dw_slot_id = 3;
inline void LoginAckPlayerMakeTeam::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerMakeTeam::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerMakeTeam.dw_slot_id)
  return dw_slot_id_;
}
inline void LoginAckPlayerMakeTeam::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerMakeTeam.dw_slot_id)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerTeamInfo

// repeated .GameProto.TeamRoleData team_role_data = 1;
inline int LoginNotifyPlayerTeamInfo::team_role_data_size() const {
  return team_role_data_.size();
}
inline const ::GameProto::TeamRoleData& LoginNotifyPlayerTeamInfo::team_role_data(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Get(index);
}
inline ::GameProto::TeamRoleData* LoginNotifyPlayerTeamInfo::mutable_team_role_data(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Mutable(index);
}
inline ::GameProto::TeamRoleData* LoginNotifyPlayerTeamInfo::add_team_role_data() {
  // @@protoc_insertion_point(field_add:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
LoginNotifyPlayerTeamInfo::mutable_team_role_data() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return &team_role_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
LoginNotifyPlayerTeamInfo::team_role_data() const {
  // @@protoc_insertion_point(field_list:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_;
}

// uint64 qw_team_id = 2;
inline void LoginNotifyPlayerTeamInfo::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyPlayerTeamInfo::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerTeamInfo.qw_team_id)
  return qw_team_id_;
}
inline void LoginNotifyPlayerTeamInfo::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerTeamInfo.qw_team_id)
}

// -------------------------------------------------------------------

// LoginAckPlayerInviteTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerInviteTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerInviteTeam.dw_result)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerInviteTeam

// uint64 qw_player_id = 1;
inline void LoginNotifyPlayerInviteTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyPlayerInviteTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerInviteTeam.qw_player_id)
  return qw_player_id_;
}
inline void LoginNotifyPlayerInviteTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerInviteTeam.qw_player_id)
}

// uint64 qw_team_id = 2;
inline void LoginNotifyPlayerInviteTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyPlayerInviteTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerInviteTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginNotifyPlayerInviteTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerInviteTeam.qw_team_id)
}

// uint32 dw_team_server_id = 3;
inline void LoginNotifyPlayerInviteTeam::clear_dw_team_server_id() {
  dw_team_server_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginNotifyPlayerInviteTeam::dw_team_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerInviteTeam.dw_team_server_id)
  return dw_team_server_id_;
}
inline void LoginNotifyPlayerInviteTeam::set_dw_team_server_id(::google::protobuf::uint32 value) {
  
  dw_team_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerInviteTeam.dw_team_server_id)
}

// -------------------------------------------------------------------

// LoginAckPlayerChangeSlot

// uint32 dw_result = 1;
inline void LoginAckPlayerChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerChangeSlot.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerChangeSlot.dw_result)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerTeamKick

// -------------------------------------------------------------------

// LoginAckPlayerGameStart

// uint32 dw_result = 1;
inline void LoginAckPlayerGameStart::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerGameStart::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerGameStart::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.dw_result)
}

// uint32 dw_player_port = 2;
inline void LoginAckPlayerGameStart::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerGameStart::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.dw_player_port)
  return dw_player_port_;
}
inline void LoginAckPlayerGameStart::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.dw_player_port)
}

// uint32 dw_server_port = 3;
inline void LoginAckPlayerGameStart::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerGameStart::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.dw_server_port)
  return dw_server_port_;
}
inline void LoginAckPlayerGameStart::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.dw_server_port)
}

// uint32 dw_slave_server_port = 4;
inline void LoginAckPlayerGameStart::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerGameStart::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void LoginAckPlayerGameStart::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.dw_slave_server_port)
}

// string sz_listen_ip = 5;
inline void LoginAckPlayerGameStart::clear_sz_listen_ip() {
  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginAckPlayerGameStart::sz_listen_ip() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
  return sz_listen_ip_.GetNoArena();
}
inline void LoginAckPlayerGameStart::set_sz_listen_ip(const ::std::string& value) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
}
#if LANG_CXX11
inline void LoginAckPlayerGameStart::set_sz_listen_ip(::std::string&& value) {
  
  sz_listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
}
#endif
inline void LoginAckPlayerGameStart::set_sz_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
}
inline void LoginAckPlayerGameStart::set_sz_listen_ip(const char* value, size_t size) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
}
inline ::std::string* LoginAckPlayerGameStart::mutable_sz_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
  return sz_listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginAckPlayerGameStart::release_sz_listen_ip() {
  // @@protoc_insertion_point(field_release:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
  
  return sz_listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAckPlayerGameStart::set_allocated_sz_listen_ip(::std::string* sz_listen_ip) {
  if (sz_listen_ip != NULL) {
    
  } else {
    
  }
  sz_listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_listen_ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginAckPlayerGameStart.sz_listen_ip)
}

// uint64 qw_team_id = 6;
inline void LoginAckPlayerGameStart::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAckPlayerGameStart::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerGameStart.qw_team_id)
  return qw_team_id_;
}
inline void LoginAckPlayerGameStart::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerGameStart.qw_team_id)
}

// -------------------------------------------------------------------

// LoginAckPlayerOnLinePlayer

// uint32 dw_result = 1;
inline void LoginAckPlayerOnLinePlayer::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerOnLinePlayer::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerOnLinePlayer.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerOnLinePlayer::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerOnLinePlayer.dw_result)
}

// repeated uint64 qw_player_id = 2;
inline int LoginAckPlayerOnLinePlayer::qw_player_id_size() const {
  return qw_player_id_.size();
}
inline void LoginAckPlayerOnLinePlayer::clear_qw_player_id() {
  qw_player_id_.Clear();
}
inline ::google::protobuf::uint64 LoginAckPlayerOnLinePlayer::qw_player_id(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerOnLinePlayer.qw_player_id)
  return qw_player_id_.Get(index);
}
inline void LoginAckPlayerOnLinePlayer::set_qw_player_id(int index, ::google::protobuf::uint64 value) {
  qw_player_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerOnLinePlayer.qw_player_id)
}
inline void LoginAckPlayerOnLinePlayer::add_qw_player_id(::google::protobuf::uint64 value) {
  qw_player_id_.Add(value);
  // @@protoc_insertion_point(field_add:GameProto.LoginAckPlayerOnLinePlayer.qw_player_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LoginAckPlayerOnLinePlayer::qw_player_id() const {
  // @@protoc_insertion_point(field_list:GameProto.LoginAckPlayerOnLinePlayer.qw_player_id)
  return qw_player_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LoginAckPlayerOnLinePlayer::mutable_qw_player_id() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.LoginAckPlayerOnLinePlayer.qw_player_id)
  return &qw_player_id_;
}

// -------------------------------------------------------------------

// LoginAckPlayerEnterTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerEnterTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerEnterTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerEnterTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerEnterTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerEnterTeam.dw_result)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerRefuseEnterTeam

// uint64 qw_player_id = 1;
inline void LoginNotifyPlayerRefuseEnterTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyPlayerRefuseEnterTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerRefuseEnterTeam.qw_player_id)
  return qw_player_id_;
}
inline void LoginNotifyPlayerRefuseEnterTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerRefuseEnterTeam.qw_player_id)
}

// string sz_Reason = 2;
inline void LoginNotifyPlayerRefuseEnterTeam::clear_sz_reason() {
  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNotifyPlayerRefuseEnterTeam::sz_reason() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
  return sz_reason_.GetNoArena();
}
inline void LoginNotifyPlayerRefuseEnterTeam::set_sz_reason(const ::std::string& value) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
}
#if LANG_CXX11
inline void LoginNotifyPlayerRefuseEnterTeam::set_sz_reason(::std::string&& value) {
  
  sz_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
}
#endif
inline void LoginNotifyPlayerRefuseEnterTeam::set_sz_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
}
inline void LoginNotifyPlayerRefuseEnterTeam::set_sz_reason(const char* value, size_t size) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
}
inline ::std::string* LoginNotifyPlayerRefuseEnterTeam::mutable_sz_reason() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
  return sz_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNotifyPlayerRefuseEnterTeam::release_sz_reason() {
  // @@protoc_insertion_point(field_release:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
  
  return sz_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNotifyPlayerRefuseEnterTeam::set_allocated_sz_reason(::std::string* sz_reason) {
  if (sz_reason != NULL) {
    
  } else {
    
  }
  sz_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_reason);
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason)
}

// -------------------------------------------------------------------

// LoginAckPlayerLeaveTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerLeaveTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerLeaveTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerLeaveTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerLeaveTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerLeaveTeam.dw_result)
}

// -------------------------------------------------------------------

// LoginNotifyLoginPlayerKick

// uint64 qw_player_id = 1;
inline void LoginNotifyLoginPlayerKick::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyLoginPlayerKick::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyLoginPlayerKick.qw_player_id)
  return qw_player_id_;
}
inline void LoginNotifyLoginPlayerKick::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyLoginPlayerKick.qw_player_id)
}

// -------------------------------------------------------------------

// LoginRequestLoginInviteTeam

// uint64 qw_invite_id = 1;
inline void LoginRequestLoginInviteTeam::clear_qw_invite_id() {
  qw_invite_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestLoginInviteTeam::qw_invite_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestLoginInviteTeam.qw_invite_id)
  return qw_invite_id_;
}
inline void LoginRequestLoginInviteTeam::set_qw_invite_id(::google::protobuf::uint64 value) {
  
  qw_invite_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestLoginInviteTeam.qw_invite_id)
}

// uint64 qw_invitee_id = 2;
inline void LoginRequestLoginInviteTeam::clear_qw_invitee_id() {
  qw_invitee_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestLoginInviteTeam::qw_invitee_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestLoginInviteTeam.qw_invitee_id)
  return qw_invitee_id_;
}
inline void LoginRequestLoginInviteTeam::set_qw_invitee_id(::google::protobuf::uint64 value) {
  
  qw_invitee_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestLoginInviteTeam.qw_invitee_id)
}

// uint64 qw_team_id = 3;
inline void LoginRequestLoginInviteTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestLoginInviteTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestLoginInviteTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestLoginInviteTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestLoginInviteTeam.qw_team_id)
}

// uint32 dw_team_server_id = 4;
inline void LoginRequestLoginInviteTeam::clear_dw_team_server_id() {
  dw_team_server_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestLoginInviteTeam::dw_team_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestLoginInviteTeam.dw_team_server_id)
  return dw_team_server_id_;
}
inline void LoginRequestLoginInviteTeam::set_dw_team_server_id(::google::protobuf::uint32 value) {
  
  dw_team_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestLoginInviteTeam.dw_team_server_id)
}

// -------------------------------------------------------------------

// LoginAckLoginInviteTeam

// uint32 dw_result = 1;
inline void LoginAckLoginInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckLoginInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckLoginInviteTeam.dw_result)
  return dw_result_;
}
inline void LoginAckLoginInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckLoginInviteTeam.dw_result)
}

// uint64 qw_invite_id = 2;
inline void LoginAckLoginInviteTeam::clear_qw_invite_id() {
  qw_invite_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAckLoginInviteTeam::qw_invite_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckLoginInviteTeam.qw_invite_id)
  return qw_invite_id_;
}
inline void LoginAckLoginInviteTeam::set_qw_invite_id(::google::protobuf::uint64 value) {
  
  qw_invite_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckLoginInviteTeam.qw_invite_id)
}

// uint64 qw_invitee_id = 3;
inline void LoginAckLoginInviteTeam::clear_qw_invitee_id() {
  qw_invitee_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAckLoginInviteTeam::qw_invitee_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckLoginInviteTeam.qw_invitee_id)
  return qw_invitee_id_;
}
inline void LoginAckLoginInviteTeam::set_qw_invitee_id(::google::protobuf::uint64 value) {
  
  qw_invitee_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckLoginInviteTeam.qw_invitee_id)
}

// -------------------------------------------------------------------

// LoginNotifyLoginPlayerRefuseEnterTeam

// uint64 qw_invite_id = 1;
inline void LoginNotifyLoginPlayerRefuseEnterTeam::clear_qw_invite_id() {
  qw_invite_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyLoginPlayerRefuseEnterTeam::qw_invite_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.qw_invite_id)
  return qw_invite_id_;
}
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_qw_invite_id(::google::protobuf::uint64 value) {
  
  qw_invite_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.qw_invite_id)
}

// uint64 qw_invitee_id = 2;
inline void LoginNotifyLoginPlayerRefuseEnterTeam::clear_qw_invitee_id() {
  qw_invitee_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginNotifyLoginPlayerRefuseEnterTeam::qw_invitee_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.qw_invitee_id)
  return qw_invitee_id_;
}
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_qw_invitee_id(::google::protobuf::uint64 value) {
  
  qw_invitee_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.qw_invitee_id)
}

// string sz_Reason = 3;
inline void LoginNotifyLoginPlayerRefuseEnterTeam::clear_sz_reason() {
  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNotifyLoginPlayerRefuseEnterTeam::sz_reason() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
  return sz_reason_.GetNoArena();
}
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_sz_reason(const ::std::string& value) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
}
#if LANG_CXX11
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_sz_reason(::std::string&& value) {
  
  sz_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
}
#endif
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_sz_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
}
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_sz_reason(const char* value, size_t size) {
  
  sz_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
}
inline ::std::string* LoginNotifyLoginPlayerRefuseEnterTeam::mutable_sz_reason() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
  return sz_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNotifyLoginPlayerRefuseEnterTeam::release_sz_reason() {
  // @@protoc_insertion_point(field_release:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
  
  return sz_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNotifyLoginPlayerRefuseEnterTeam::set_allocated_sz_reason(::std::string* sz_reason) {
  if (sz_reason != NULL) {
    
  } else {
    
  }
  sz_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_reason);
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason)
}

// -------------------------------------------------------------------

// LoginRequestTeamMakeTeam

// .GameProto.RoleData role_data = 1;
inline bool LoginRequestTeamMakeTeam::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline const ::GameProto::RoleData& LoginRequestTeamMakeTeam::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamMakeTeam.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* LoginRequestTeamMakeTeam::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.LoginRequestTeamMakeTeam.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* LoginRequestTeamMakeTeam::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.LoginRequestTeamMakeTeam.role_data)
  return role_data_;
}
inline void LoginRequestTeamMakeTeam::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(role_data_);
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginRequestTeamMakeTeam.role_data)
}

// uint64 qw_team_id = 2;
inline void LoginRequestTeamMakeTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamMakeTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamMakeTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestTeamMakeTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamMakeTeam.qw_team_id)
}

// -------------------------------------------------------------------

// LoginRequestTeamInviteTeam

// uint32 dw_result = 1;
inline void LoginRequestTeamInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamInviteTeam.dw_result)
  return dw_result_;
}
inline void LoginRequestTeamInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamInviteTeam.dw_result)
}

// uint32 dw_slot_id = 2;
inline void LoginRequestTeamInviteTeam::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamInviteTeam::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamInviteTeam.dw_slot_id)
  return dw_slot_id_;
}
inline void LoginRequestTeamInviteTeam::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamInviteTeam.dw_slot_id)
}

// -------------------------------------------------------------------

// LoginRequestTeamChangeSlot

// uint32 dw_result = 1;
inline void LoginRequestTeamChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamChangeSlot.dw_result)
  return dw_result_;
}
inline void LoginRequestTeamChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamChangeSlot.dw_result)
}

// uint32 dw_slot_id = 2;
inline void LoginRequestTeamChangeSlot::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamChangeSlot::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamChangeSlot.dw_slot_id)
  return dw_slot_id_;
}
inline void LoginRequestTeamChangeSlot::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamChangeSlot.dw_slot_id)
}

// -------------------------------------------------------------------

// LoginRequestTeamKickPlayer

// uint64 qw_player_id = 1;
inline void LoginRequestTeamKickPlayer::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamKickPlayer::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamKickPlayer.qw_player_id)
  return qw_player_id_;
}
inline void LoginRequestTeamKickPlayer::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamKickPlayer.qw_player_id)
}

// uint64 qw_team_id = 2;
inline void LoginRequestTeamKickPlayer::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamKickPlayer::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamKickPlayer.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestTeamKickPlayer::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamKickPlayer.qw_team_id)
}

// -------------------------------------------------------------------

// LoginRequestTeamGameStart

// uint64 qw_team_id = 1;
inline void LoginRequestTeamGameStart::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamGameStart::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamGameStart.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestTeamGameStart::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamGameStart.qw_team_id)
}

// uint64 qw_player_id = 2;
inline void LoginRequestTeamGameStart::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamGameStart::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamGameStart.qw_player_id)
  return qw_player_id_;
}
inline void LoginRequestTeamGameStart::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamGameStart.qw_player_id)
}

// -------------------------------------------------------------------

// LoginRequestTeamEnterTeam

// uint64 qw_team_id = 1;
inline void LoginRequestTeamEnterTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamEnterTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamEnterTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestTeamEnterTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamEnterTeam.qw_team_id)
}

// .GameProto.RoleData role_data = 2;
inline bool LoginRequestTeamEnterTeam::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline const ::GameProto::RoleData& LoginRequestTeamEnterTeam::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamEnterTeam.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* LoginRequestTeamEnterTeam::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.LoginRequestTeamEnterTeam.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* LoginRequestTeamEnterTeam::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.LoginRequestTeamEnterTeam.role_data)
  return role_data_;
}
inline void LoginRequestTeamEnterTeam::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(role_data_);
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginRequestTeamEnterTeam.role_data)
}

// -------------------------------------------------------------------

// LoginRequestTeamPlayerLeave

// uint64 qw_player_id = 1;
inline void LoginRequestTeamPlayerLeave::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamPlayerLeave::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamPlayerLeave.qw_player_id)
  return qw_player_id_;
}
inline void LoginRequestTeamPlayerLeave::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamPlayerLeave.qw_player_id)
}

// uint64 qw_team_id = 2;
inline void LoginRequestTeamPlayerLeave::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamPlayerLeave::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamPlayerLeave.qw_team_id)
  return qw_team_id_;
}
inline void LoginRequestTeamPlayerLeave::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamPlayerLeave.qw_team_id)
}

// -------------------------------------------------------------------

// TeamAckLoginMakeTeam

// uint32 dw_result = 1;
inline void TeamAckLoginMakeTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginMakeTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.dw_result)
  return dw_result_;
}
inline void TeamAckLoginMakeTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.dw_result)
}

// uint64 qw_player_id = 2;
inline void TeamAckLoginMakeTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginMakeTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginMakeTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.qw_player_id)
}

// uint64 qw_team_id = 3;
inline void TeamAckLoginMakeTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginMakeTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.qw_team_id)
  return qw_team_id_;
}
inline void TeamAckLoginMakeTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.qw_team_id)
}

// uint32 dw_slot_id = 4;
inline void TeamAckLoginMakeTeam::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginMakeTeam::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.dw_slot_id)
  return dw_slot_id_;
}
inline void TeamAckLoginMakeTeam::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.dw_slot_id)
}

// -------------------------------------------------------------------

// TeamNotifyLoginTeamInfo

// repeated .GameProto.TeamRoleData team_role_data = 1;
inline int TeamNotifyLoginTeamInfo::team_role_data_size() const {
  return team_role_data_.size();
}
inline const ::GameProto::TeamRoleData& TeamNotifyLoginTeamInfo::team_role_data(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Get(index);
}
inline ::GameProto::TeamRoleData* TeamNotifyLoginTeamInfo::mutable_team_role_data(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Mutable(index);
}
inline ::GameProto::TeamRoleData* TeamNotifyLoginTeamInfo::add_team_role_data() {
  // @@protoc_insertion_point(field_add:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
TeamNotifyLoginTeamInfo::mutable_team_role_data() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return &team_role_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
TeamNotifyLoginTeamInfo::team_role_data() const {
  // @@protoc_insertion_point(field_list:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_;
}

// uint64 qw_team_id = 2;
inline void TeamNotifyLoginTeamInfo::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamNotifyLoginTeamInfo::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamNotifyLoginTeamInfo.qw_team_id)
  return qw_team_id_;
}
inline void TeamNotifyLoginTeamInfo::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamNotifyLoginTeamInfo.qw_team_id)
}

// uint64 qw_player_id = 3;
inline void TeamNotifyLoginTeamInfo::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamNotifyLoginTeamInfo::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamNotifyLoginTeamInfo.qw_player_id)
  return qw_player_id_;
}
inline void TeamNotifyLoginTeamInfo::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamNotifyLoginTeamInfo.qw_player_id)
}

// -------------------------------------------------------------------

// TeamAckLoginInviteTeam

// uint32 dw_result = 1;
inline void TeamAckLoginInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginInviteTeam.dw_result)
  return dw_result_;
}
inline void TeamAckLoginInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginInviteTeam.dw_result)
}

// uint32 dw_slot = 2;
inline void TeamAckLoginInviteTeam::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginInviteTeam::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginInviteTeam.dw_slot)
  return dw_slot_;
}
inline void TeamAckLoginInviteTeam::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginInviteTeam.dw_slot)
}

// -------------------------------------------------------------------

// TeamAckLoginChangeSlot

// uint32 dw_result = 1;
inline void TeamAckLoginChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginChangeSlot.dw_result)
  return dw_result_;
}
inline void TeamAckLoginChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginChangeSlot.dw_result)
}

// uint32 dw_slot = 2;
inline void TeamAckLoginChangeSlot::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginChangeSlot::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginChangeSlot.dw_slot)
  return dw_slot_;
}
inline void TeamAckLoginChangeSlot::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginChangeSlot.dw_slot)
}

// -------------------------------------------------------------------

// TeamAckLoginKickPlayer

// uint32 dw_result = 1;
inline void TeamAckLoginKickPlayer::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginKickPlayer::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginKickPlayer.dw_result)
  return dw_result_;
}
inline void TeamAckLoginKickPlayer::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginKickPlayer.dw_result)
}

// uint64 qw_player_id = 2;
inline void TeamAckLoginKickPlayer::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginKickPlayer::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginKickPlayer.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginKickPlayer::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginKickPlayer.qw_player_id)
}

// -------------------------------------------------------------------

// TeamAckLoginGameStart

// uint32 dw_result = 1;
inline void TeamAckLoginGameStart::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginGameStart::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.dw_result)
  return dw_result_;
}
inline void TeamAckLoginGameStart::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.dw_result)
}

// uint32 dw_player_port = 2;
inline void TeamAckLoginGameStart::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginGameStart::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.dw_player_port)
  return dw_player_port_;
}
inline void TeamAckLoginGameStart::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.dw_player_port)
}

// uint32 dw_server_port = 3;
inline void TeamAckLoginGameStart::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginGameStart::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.dw_server_port)
  return dw_server_port_;
}
inline void TeamAckLoginGameStart::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.dw_server_port)
}

// uint32 dw_slave_server_port = 4;
inline void TeamAckLoginGameStart::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginGameStart::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void TeamAckLoginGameStart::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.dw_slave_server_port)
}

// string sz_listen_ip = 5;
inline void TeamAckLoginGameStart::clear_sz_listen_ip() {
  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamAckLoginGameStart::sz_listen_ip() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.sz_listen_ip)
  return sz_listen_ip_.GetNoArena();
}
inline void TeamAckLoginGameStart::set_sz_listen_ip(const ::std::string& value) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.sz_listen_ip)
}
#if LANG_CXX11
inline void TeamAckLoginGameStart::set_sz_listen_ip(::std::string&& value) {
  
  sz_listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.TeamAckLoginGameStart.sz_listen_ip)
}
#endif
inline void TeamAckLoginGameStart::set_sz_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.TeamAckLoginGameStart.sz_listen_ip)
}
inline void TeamAckLoginGameStart::set_sz_listen_ip(const char* value, size_t size) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.TeamAckLoginGameStart.sz_listen_ip)
}
inline ::std::string* TeamAckLoginGameStart::mutable_sz_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.TeamAckLoginGameStart.sz_listen_ip)
  return sz_listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamAckLoginGameStart::release_sz_listen_ip() {
  // @@protoc_insertion_point(field_release:GameProto.TeamAckLoginGameStart.sz_listen_ip)
  
  return sz_listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamAckLoginGameStart::set_allocated_sz_listen_ip(::std::string* sz_listen_ip) {
  if (sz_listen_ip != NULL) {
    
  } else {
    
  }
  sz_listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_listen_ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.TeamAckLoginGameStart.sz_listen_ip)
}

// uint64 qw_player_id = 6;
inline void TeamAckLoginGameStart::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginGameStart::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginGameStart::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.qw_player_id)
}

// uint64 qw_team_id = 7;
inline void TeamAckLoginGameStart::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginGameStart::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginGameStart.qw_team_id)
  return qw_team_id_;
}
inline void TeamAckLoginGameStart::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginGameStart.qw_team_id)
}

// -------------------------------------------------------------------

// TeamAckLoginEnterTeam

// uint32 dw_result = 1;
inline void TeamAckLoginEnterTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginEnterTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginEnterTeam.dw_result)
  return dw_result_;
}
inline void TeamAckLoginEnterTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginEnterTeam.dw_result)
}

// uint64 qw_player_id = 2;
inline void TeamAckLoginEnterTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginEnterTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginEnterTeam.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginEnterTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginEnterTeam.qw_player_id)
}

// uint64 qw_team_id = 3;
inline void TeamAckLoginEnterTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginEnterTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginEnterTeam.qw_team_id)
  return qw_team_id_;
}
inline void TeamAckLoginEnterTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginEnterTeam.qw_team_id)
}

// -------------------------------------------------------------------

// TeamAckLoginPlayerLeave

// uint32 dw_result = 1;
inline void TeamAckLoginPlayerLeave::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginPlayerLeave::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginPlayerLeave.dw_result)
  return dw_result_;
}
inline void TeamAckLoginPlayerLeave::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginPlayerLeave.dw_result)
}

// uint64 qw_player_id = 2;
inline void TeamAckLoginPlayerLeave::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginPlayerLeave::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginPlayerLeave.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginPlayerLeave::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginPlayerLeave.qw_player_id)
}

// -------------------------------------------------------------------

// TeamRequestGameManagerGameStart

// uint64 qw_team_id = 1;
inline void TeamRequestGameManagerGameStart::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamRequestGameManagerGameStart::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamRequestGameManagerGameStart.qw_team_id)
  return qw_team_id_;
}
inline void TeamRequestGameManagerGameStart::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamRequestGameManagerGameStart.qw_team_id)
}

// repeated uint64 qw_player_ids = 2;
inline int TeamRequestGameManagerGameStart::qw_player_ids_size() const {
  return qw_player_ids_.size();
}
inline void TeamRequestGameManagerGameStart::clear_qw_player_ids() {
  qw_player_ids_.Clear();
}
inline ::google::protobuf::uint64 TeamRequestGameManagerGameStart::qw_player_ids(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.TeamRequestGameManagerGameStart.qw_player_ids)
  return qw_player_ids_.Get(index);
}
inline void TeamRequestGameManagerGameStart::set_qw_player_ids(int index, ::google::protobuf::uint64 value) {
  qw_player_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameProto.TeamRequestGameManagerGameStart.qw_player_ids)
}
inline void TeamRequestGameManagerGameStart::add_qw_player_ids(::google::protobuf::uint64 value) {
  qw_player_ids_.Add(value);
  // @@protoc_insertion_point(field_add:GameProto.TeamRequestGameManagerGameStart.qw_player_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TeamRequestGameManagerGameStart::qw_player_ids() const {
  // @@protoc_insertion_point(field_list:GameProto.TeamRequestGameManagerGameStart.qw_player_ids)
  return qw_player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TeamRequestGameManagerGameStart::mutable_qw_player_ids() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.TeamRequestGameManagerGameStart.qw_player_ids)
  return &qw_player_ids_;
}

// -------------------------------------------------------------------

// GameManagerAckTeamGameStart

// uint32 dw_result = 1;
inline void GameManagerAckTeamGameStart::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckTeamGameStart::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.dw_result)
  return dw_result_;
}
inline void GameManagerAckTeamGameStart::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.dw_result)
}

// uint32 dw_player_port = 2;
inline void GameManagerAckTeamGameStart::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckTeamGameStart::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.dw_player_port)
  return dw_player_port_;
}
inline void GameManagerAckTeamGameStart::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.dw_player_port)
}

// uint32 dw_server_port = 3;
inline void GameManagerAckTeamGameStart::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckTeamGameStart::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.dw_server_port)
  return dw_server_port_;
}
inline void GameManagerAckTeamGameStart::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.dw_server_port)
}

// uint32 dw_slave_server_port = 4;
inline void GameManagerAckTeamGameStart::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckTeamGameStart::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void GameManagerAckTeamGameStart::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.dw_slave_server_port)
}

// uint64 qw_team_id = 5;
inline void GameManagerAckTeamGameStart::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameManagerAckTeamGameStart::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.qw_team_id)
  return qw_team_id_;
}
inline void GameManagerAckTeamGameStart::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.qw_team_id)
}

// string sz_listen_ip = 6;
inline void GameManagerAckTeamGameStart::clear_sz_listen_ip() {
  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameManagerAckTeamGameStart::sz_listen_ip() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
  return sz_listen_ip_.GetNoArena();
}
inline void GameManagerAckTeamGameStart::set_sz_listen_ip(const ::std::string& value) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
}
#if LANG_CXX11
inline void GameManagerAckTeamGameStart::set_sz_listen_ip(::std::string&& value) {
  
  sz_listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
}
#endif
inline void GameManagerAckTeamGameStart::set_sz_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
}
inline void GameManagerAckTeamGameStart::set_sz_listen_ip(const char* value, size_t size) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
}
inline ::std::string* GameManagerAckTeamGameStart::mutable_sz_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
  return sz_listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameManagerAckTeamGameStart::release_sz_listen_ip() {
  // @@protoc_insertion_point(field_release:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
  
  return sz_listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameManagerAckTeamGameStart::set_allocated_sz_listen_ip(::std::string* sz_listen_ip) {
  if (sz_listen_ip != NULL) {
    
  } else {
    
  }
  sz_listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_listen_ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameManagerAckTeamGameStart.sz_listen_ip)
}

// -------------------------------------------------------------------

// GameNotifyGameManagerInfo

// uint32 dw_player_port = 1;
inline void GameNotifyGameManagerInfo::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_player_port)
  return dw_player_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_player_port)
}

// uint32 dw_server_port = 2;
inline void GameNotifyGameManagerInfo::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_server_port)
  return dw_server_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_server_port)
}

// uint32 dw_slave_server_port = 3;
inline void GameNotifyGameManagerInfo::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_slave_server_port)
}

// uint64 qw_team_id = 4;
inline void GameNotifyGameManagerInfo::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameNotifyGameManagerInfo::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.qw_team_id)
  return qw_team_id_;
}
inline void GameNotifyGameManagerInfo::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.qw_team_id)
}

// uint32 dw_team_server_id = 5;
inline void GameNotifyGameManagerInfo::clear_dw_team_server_id() {
  dw_team_server_id_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_team_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_team_server_id)
  return dw_team_server_id_;
}
inline void GameNotifyGameManagerInfo::set_dw_team_server_id(::google::protobuf::uint32 value) {
  
  dw_team_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_team_server_id)
}

// -------------------------------------------------------------------

// GameManagerAckGameInfoResult

// uint32 dw_result = 1;
inline void GameManagerAckGameInfoResult::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckGameInfoResult::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckGameInfoResult.dw_result)
  return dw_result_;
}
inline void GameManagerAckGameInfoResult::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckGameInfoResult.dw_result)
}

// -------------------------------------------------------------------

// PlayerRequestGameManagerInfo

// uint32 dw_result = 1;
inline void PlayerRequestGameManagerInfo::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestGameManagerInfo::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestGameManagerInfo.dw_result)
  return dw_result_;
}
inline void PlayerRequestGameManagerInfo::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestGameManagerInfo.dw_result)
}

// -------------------------------------------------------------------

// GameManagerAckPlayerInfoResult

// uint32 dw_player_port = 1;
inline void GameManagerAckPlayerInfoResult::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_player_port)
  return dw_player_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_player_port)
}

// uint32 dw_server_port = 2;
inline void GameManagerAckPlayerInfoResult::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_server_port)
  return dw_server_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_server_port)
}

// uint32 dw_slave_server_port = 3;
inline void GameManagerAckPlayerInfoResult::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_slave_server_port)
}

// -------------------------------------------------------------------

// PlayerRequestGameTest

// string sz_test = 1;
inline void PlayerRequestGameTest::clear_sz_test() {
  sz_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestGameTest::sz_test() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestGameTest.sz_test)
  return sz_test_.GetNoArena();
}
inline void PlayerRequestGameTest::set_sz_test(const ::std::string& value) {
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestGameTest.sz_test)
}
#if LANG_CXX11
inline void PlayerRequestGameTest::set_sz_test(::std::string&& value) {
  
  sz_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestGameTest.sz_test)
}
#endif
inline void PlayerRequestGameTest::set_sz_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestGameTest.sz_test)
}
inline void PlayerRequestGameTest::set_sz_test(const char* value, size_t size) {
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestGameTest.sz_test)
}
inline ::std::string* PlayerRequestGameTest::mutable_sz_test() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestGameTest.sz_test)
  return sz_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestGameTest::release_sz_test() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestGameTest.sz_test)
  
  return sz_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestGameTest::set_allocated_sz_test(::std::string* sz_test) {
  if (sz_test != NULL) {
    
  } else {
    
  }
  sz_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_test);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestGameTest.sz_test)
}

// -------------------------------------------------------------------

// PlayerRequestGameEnter

// uint64 qw_player_id = 1;
inline void PlayerRequestGameEnter::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestGameEnter::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestGameEnter.qw_player_id)
  return qw_player_id_;
}
inline void PlayerRequestGameEnter::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestGameEnter.qw_player_id)
}

// -------------------------------------------------------------------

// PlayerRequestMove

// float f_tick = 1;
inline void PlayerRequestMove::clear_f_tick() {
  f_tick_ = 0;
}
inline float PlayerRequestMove::f_tick() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestMove.f_tick)
  return f_tick_;
}
inline void PlayerRequestMove::set_f_tick(float value) {
  
  f_tick_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestMove.f_tick)
}

// .GameProto.EMoveDirection e_direction = 2;
inline void PlayerRequestMove::clear_e_direction() {
  e_direction_ = 0;
}
inline ::GameProto::EMoveDirection PlayerRequestMove::e_direction() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestMove.e_direction)
  return static_cast< ::GameProto::EMoveDirection >(e_direction_);
}
inline void PlayerRequestMove::set_e_direction(::GameProto::EMoveDirection value) {
  
  e_direction_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestMove.e_direction)
}

// -------------------------------------------------------------------

// PlayerRequestRotation

// float f_tick = 1;
inline void PlayerRequestRotation::clear_f_tick() {
  f_tick_ = 0;
}
inline float PlayerRequestRotation::f_tick() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestRotation.f_tick)
  return f_tick_;
}
inline void PlayerRequestRotation::set_f_tick(float value) {
  
  f_tick_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestRotation.f_tick)
}

// .GameProto.ERotationDirection e_direction = 2;
inline void PlayerRequestRotation::clear_e_direction() {
  e_direction_ = 0;
}
inline ::GameProto::ERotationDirection PlayerRequestRotation::e_direction() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestRotation.e_direction)
  return static_cast< ::GameProto::ERotationDirection >(e_direction_);
}
inline void PlayerRequestRotation::set_e_direction(::GameProto::ERotationDirection value) {
  
  e_direction_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestRotation.e_direction)
}

// -------------------------------------------------------------------

// GameAckPlayerEnter

// uint32 dw_result = 1;
inline void GameAckPlayerEnter::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 GameAckPlayerEnter::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.GameAckPlayerEnter.dw_result)
  return dw_result_;
}
inline void GameAckPlayerEnter::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameAckPlayerEnter.dw_result)
}

// uint32 dw_game_type = 2;
inline void GameAckPlayerEnter::clear_dw_game_type() {
  dw_game_type_ = 0u;
}
inline ::google::protobuf::uint32 GameAckPlayerEnter::dw_game_type() const {
  // @@protoc_insertion_point(field_get:GameProto.GameAckPlayerEnter.dw_game_type)
  return dw_game_type_;
}
inline void GameAckPlayerEnter::set_dw_game_type(::google::protobuf::uint32 value) {
  
  dw_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameAckPlayerEnter.dw_game_type)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameConfig

// uint32 dw_game_type = 1;
inline void GameNotifyPlayerGameConfig::clear_dw_game_type() {
  dw_game_type_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyPlayerGameConfig::dw_game_type() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameConfig.dw_game_type)
  return dw_game_type_;
}
inline void GameNotifyPlayerGameConfig::set_dw_game_type(::google::protobuf::uint32 value) {
  
  dw_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameConfig.dw_game_type)
}

// .GameProto.GameConfigCommon common_config = 2;
inline bool GameNotifyPlayerGameConfig::has_common_config() const {
  return this != internal_default_instance() && common_config_ != NULL;
}
inline const ::GameProto::GameConfigCommon& GameNotifyPlayerGameConfig::common_config() const {
  const ::GameProto::GameConfigCommon* p = common_config_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameConfig.common_config)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::GameConfigCommon*>(
      &::GameProto::_GameConfigCommon_default_instance_);
}
inline ::GameProto::GameConfigCommon* GameNotifyPlayerGameConfig::release_common_config() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerGameConfig.common_config)
  
  ::GameProto::GameConfigCommon* temp = common_config_;
  common_config_ = NULL;
  return temp;
}
inline ::GameProto::GameConfigCommon* GameNotifyPlayerGameConfig::mutable_common_config() {
  
  if (common_config_ == NULL) {
    common_config_ = new ::GameProto::GameConfigCommon;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerGameConfig.common_config)
  return common_config_;
}
inline void GameNotifyPlayerGameConfig::set_allocated_common_config(::GameProto::GameConfigCommon* common_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(common_config_);
  }
  if (common_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_config, submessage_arena);
    }
    
  } else {
    
  }
  common_config_ = common_config;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerGameConfig.common_config)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameRoleData

// uint32 dw_game_type = 1;
inline void GameNotifyPlayerGameRoleData::clear_dw_game_type() {
  dw_game_type_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyPlayerGameRoleData::dw_game_type() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameRoleData.dw_game_type)
  return dw_game_type_;
}
inline void GameNotifyPlayerGameRoleData::set_dw_game_type(::google::protobuf::uint32 value) {
  
  dw_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameRoleData.dw_game_type)
}

// .GameProto.GameCommonRoleData common_role_data = 2;
inline bool GameNotifyPlayerGameRoleData::has_common_role_data() const {
  return this != internal_default_instance() && common_role_data_ != NULL;
}
inline const ::GameProto::GameCommonRoleData& GameNotifyPlayerGameRoleData::common_role_data() const {
  const ::GameProto::GameCommonRoleData* p = common_role_data_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameRoleData.common_role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::GameCommonRoleData*>(
      &::GameProto::_GameCommonRoleData_default_instance_);
}
inline ::GameProto::GameCommonRoleData* GameNotifyPlayerGameRoleData::release_common_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerGameRoleData.common_role_data)
  
  ::GameProto::GameCommonRoleData* temp = common_role_data_;
  common_role_data_ = NULL;
  return temp;
}
inline ::GameProto::GameCommonRoleData* GameNotifyPlayerGameRoleData::mutable_common_role_data() {
  
  if (common_role_data_ == NULL) {
    common_role_data_ = new ::GameProto::GameCommonRoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerGameRoleData.common_role_data)
  return common_role_data_;
}
inline void GameNotifyPlayerGameRoleData::set_allocated_common_role_data(::GameProto::GameCommonRoleData* common_role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(common_role_data_);
  }
  if (common_role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_role_data, submessage_arena);
    }
    
  } else {
    
  }
  common_role_data_ = common_role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerGameRoleData.common_role_data)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameSceneInfo

// uint32 dw_game_type = 1;
inline void GameNotifyPlayerGameSceneInfo::clear_dw_game_type() {
  dw_game_type_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyPlayerGameSceneInfo::dw_game_type() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameSceneInfo.dw_game_type)
  return dw_game_type_;
}
inline void GameNotifyPlayerGameSceneInfo::set_dw_game_type(::google::protobuf::uint32 value) {
  
  dw_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameSceneInfo.dw_game_type)
}

// .GameProto.EGameSceneState state = 2;
inline void GameNotifyPlayerGameSceneInfo::clear_state() {
  state_ = 0;
}
inline ::GameProto::EGameSceneState GameNotifyPlayerGameSceneInfo::state() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameSceneInfo.state)
  return static_cast< ::GameProto::EGameSceneState >(state_);
}
inline void GameNotifyPlayerGameSceneInfo::set_state(::GameProto::EGameSceneState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameSceneInfo.state)
}

// .GameProto.GameCommonSceneInfo common_scene_info = 3;
inline bool GameNotifyPlayerGameSceneInfo::has_common_scene_info() const {
  return this != internal_default_instance() && common_scene_info_ != NULL;
}
inline const ::GameProto::GameCommonSceneInfo& GameNotifyPlayerGameSceneInfo::common_scene_info() const {
  const ::GameProto::GameCommonSceneInfo* p = common_scene_info_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameSceneInfo.common_scene_info)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::GameCommonSceneInfo*>(
      &::GameProto::_GameCommonSceneInfo_default_instance_);
}
inline ::GameProto::GameCommonSceneInfo* GameNotifyPlayerGameSceneInfo::release_common_scene_info() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerGameSceneInfo.common_scene_info)
  
  ::GameProto::GameCommonSceneInfo* temp = common_scene_info_;
  common_scene_info_ = NULL;
  return temp;
}
inline ::GameProto::GameCommonSceneInfo* GameNotifyPlayerGameSceneInfo::mutable_common_scene_info() {
  
  if (common_scene_info_ == NULL) {
    common_scene_info_ = new ::GameProto::GameCommonSceneInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerGameSceneInfo.common_scene_info)
  return common_scene_info_;
}
inline void GameNotifyPlayerGameSceneInfo::set_allocated_common_scene_info(::GameProto::GameCommonSceneInfo* common_scene_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(common_scene_info_);
  }
  if (common_scene_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_scene_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_scene_info, submessage_arena);
    }
    
  } else {
    
  }
  common_scene_info_ = common_scene_info;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerGameSceneInfo.common_scene_info)
}

// -------------------------------------------------------------------

// GameNotifyPlayerPrepareTime

// uint32 dw_left_time = 1;
inline void GameNotifyPlayerPrepareTime::clear_dw_left_time() {
  dw_left_time_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyPlayerPrepareTime::dw_left_time() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerPrepareTime.dw_left_time)
  return dw_left_time_;
}
inline void GameNotifyPlayerPrepareTime::set_dw_left_time(::google::protobuf::uint32 value) {
  
  dw_left_time_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerPrepareTime.dw_left_time)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameReadyTime

// uint32 dw_left_time = 1;
inline void GameNotifyPlayerGameReadyTime::clear_dw_left_time() {
  dw_left_time_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyPlayerGameReadyTime::dw_left_time() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameReadyTime.dw_left_time)
  return dw_left_time_;
}
inline void GameNotifyPlayerGameReadyTime::set_dw_left_time(::google::protobuf::uint32 value) {
  
  dw_left_time_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameReadyTime.dw_left_time)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameState

// .GameProto.EGameSceneState state = 1;
inline void GameNotifyPlayerGameState::clear_state() {
  state_ = 0;
}
inline ::GameProto::EGameSceneState GameNotifyPlayerGameState::state() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameState.state)
  return static_cast< ::GameProto::EGameSceneState >(state_);
}
inline void GameNotifyPlayerGameState::set_state(::GameProto::EGameSceneState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameState.state)
}

// -------------------------------------------------------------------

// GameNotifyPlayerGameInitTetris

// uint64 dw_player_id = 1;
inline void GameNotifyPlayerGameInitTetris::clear_dw_player_id() {
  dw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameNotifyPlayerGameInitTetris::dw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameInitTetris.dw_player_id)
  return dw_player_id_;
}
inline void GameNotifyPlayerGameInitTetris::set_dw_player_id(::google::protobuf::uint64 value) {
  
  dw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameInitTetris.dw_player_id)
}

// float f_tick = 2;
inline void GameNotifyPlayerGameInitTetris::clear_f_tick() {
  f_tick_ = 0;
}
inline float GameNotifyPlayerGameInitTetris::f_tick() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameInitTetris.f_tick)
  return f_tick_;
}
inline void GameNotifyPlayerGameInitTetris::set_f_tick(float value) {
  
  f_tick_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerGameInitTetris.f_tick)
}

// .GameProto.Tetris curr_tetris = 3;
inline bool GameNotifyPlayerGameInitTetris::has_curr_tetris() const {
  return this != internal_default_instance() && curr_tetris_ != NULL;
}
inline const ::GameProto::Tetris& GameNotifyPlayerGameInitTetris::curr_tetris() const {
  const ::GameProto::Tetris* p = curr_tetris_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameInitTetris.curr_tetris)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::Tetris*>(
      &::GameProto::_Tetris_default_instance_);
}
inline ::GameProto::Tetris* GameNotifyPlayerGameInitTetris::release_curr_tetris() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerGameInitTetris.curr_tetris)
  
  ::GameProto::Tetris* temp = curr_tetris_;
  curr_tetris_ = NULL;
  return temp;
}
inline ::GameProto::Tetris* GameNotifyPlayerGameInitTetris::mutable_curr_tetris() {
  
  if (curr_tetris_ == NULL) {
    curr_tetris_ = new ::GameProto::Tetris;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerGameInitTetris.curr_tetris)
  return curr_tetris_;
}
inline void GameNotifyPlayerGameInitTetris::set_allocated_curr_tetris(::GameProto::Tetris* curr_tetris) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(curr_tetris_);
  }
  if (curr_tetris) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      curr_tetris = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curr_tetris, submessage_arena);
    }
    
  } else {
    
  }
  curr_tetris_ = curr_tetris;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerGameInitTetris.curr_tetris)
}

// .GameProto.Tetris next_tetris = 4;
inline bool GameNotifyPlayerGameInitTetris::has_next_tetris() const {
  return this != internal_default_instance() && next_tetris_ != NULL;
}
inline const ::GameProto::Tetris& GameNotifyPlayerGameInitTetris::next_tetris() const {
  const ::GameProto::Tetris* p = next_tetris_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerGameInitTetris.next_tetris)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::Tetris*>(
      &::GameProto::_Tetris_default_instance_);
}
inline ::GameProto::Tetris* GameNotifyPlayerGameInitTetris::release_next_tetris() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerGameInitTetris.next_tetris)
  
  ::GameProto::Tetris* temp = next_tetris_;
  next_tetris_ = NULL;
  return temp;
}
inline ::GameProto::Tetris* GameNotifyPlayerGameInitTetris::mutable_next_tetris() {
  
  if (next_tetris_ == NULL) {
    next_tetris_ = new ::GameProto::Tetris;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerGameInitTetris.next_tetris)
  return next_tetris_;
}
inline void GameNotifyPlayerGameInitTetris::set_allocated_next_tetris(::GameProto::Tetris* next_tetris) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(next_tetris_);
  }
  if (next_tetris) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_tetris = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_tetris, submessage_arena);
    }
    
  } else {
    
  }
  next_tetris_ = next_tetris;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerGameInitTetris.next_tetris)
}

// -------------------------------------------------------------------

// GameNotifyPlayerNextTetris

// uint64 dw_player_id = 1;
inline void GameNotifyPlayerNextTetris::clear_dw_player_id() {
  dw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameNotifyPlayerNextTetris::dw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerNextTetris.dw_player_id)
  return dw_player_id_;
}
inline void GameNotifyPlayerNextTetris::set_dw_player_id(::google::protobuf::uint64 value) {
  
  dw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerNextTetris.dw_player_id)
}

// float f_tick = 2;
inline void GameNotifyPlayerNextTetris::clear_f_tick() {
  f_tick_ = 0;
}
inline float GameNotifyPlayerNextTetris::f_tick() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerNextTetris.f_tick)
  return f_tick_;
}
inline void GameNotifyPlayerNextTetris::set_f_tick(float value) {
  
  f_tick_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerNextTetris.f_tick)
}

// .GameProto.Tetris next_tetris = 3;
inline bool GameNotifyPlayerNextTetris::has_next_tetris() const {
  return this != internal_default_instance() && next_tetris_ != NULL;
}
inline const ::GameProto::Tetris& GameNotifyPlayerNextTetris::next_tetris() const {
  const ::GameProto::Tetris* p = next_tetris_;
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerNextTetris.next_tetris)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::Tetris*>(
      &::GameProto::_Tetris_default_instance_);
}
inline ::GameProto::Tetris* GameNotifyPlayerNextTetris::release_next_tetris() {
  // @@protoc_insertion_point(field_release:GameProto.GameNotifyPlayerNextTetris.next_tetris)
  
  ::GameProto::Tetris* temp = next_tetris_;
  next_tetris_ = NULL;
  return temp;
}
inline ::GameProto::Tetris* GameNotifyPlayerNextTetris::mutable_next_tetris() {
  
  if (next_tetris_ == NULL) {
    next_tetris_ = new ::GameProto::Tetris;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameNotifyPlayerNextTetris.next_tetris)
  return next_tetris_;
}
inline void GameNotifyPlayerNextTetris::set_allocated_next_tetris(::GameProto::Tetris* next_tetris) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(next_tetris_);
  }
  if (next_tetris) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_tetris = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_tetris, submessage_arena);
    }
    
  } else {
    
  }
  next_tetris_ = next_tetris;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameNotifyPlayerNextTetris.next_tetris)
}

// -------------------------------------------------------------------

// GameNotifyPlayerDead

// uint64 dw_player_id = 1;
inline void GameNotifyPlayerDead::clear_dw_player_id() {
  dw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameNotifyPlayerDead::dw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyPlayerDead.dw_player_id)
  return dw_player_id_;
}
inline void GameNotifyPlayerDead::set_dw_player_id(::google::protobuf::uint64 value) {
  
  dw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyPlayerDead.dw_player_id)
}

// -------------------------------------------------------------------

// ServerInfo

// uint32 dw_server_id = 1;
inline void ServerInfo::clear_dw_server_id() {
  dw_server_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_server_id)
  return dw_server_id_;
}
inline void ServerInfo::set_dw_server_id(::google::protobuf::uint32 value) {
  
  dw_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_server_id)
}

// string sz_listen_ip = 2;
inline void ServerInfo::clear_sz_listen_ip() {
  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::sz_listen_ip() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.sz_listen_ip)
  return sz_listen_ip_.GetNoArena();
}
inline void ServerInfo::set_sz_listen_ip(const ::std::string& value) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.sz_listen_ip)
}
#if LANG_CXX11
inline void ServerInfo::set_sz_listen_ip(::std::string&& value) {
  
  sz_listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ServerInfo.sz_listen_ip)
}
#endif
inline void ServerInfo::set_sz_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerInfo.sz_listen_ip)
}
inline void ServerInfo::set_sz_listen_ip(const char* value, size_t size) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerInfo.sz_listen_ip)
}
inline ::std::string* ServerInfo::mutable_sz_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerInfo.sz_listen_ip)
  return sz_listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_sz_listen_ip() {
  // @@protoc_insertion_point(field_release:GameProto.ServerInfo.sz_listen_ip)
  
  return sz_listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_sz_listen_ip(::std::string* sz_listen_ip) {
  if (sz_listen_ip != NULL) {
    
  } else {
    
  }
  sz_listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_listen_ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerInfo.sz_listen_ip)
}

// uint32 dw_team_port = 3;
inline void ServerInfo::clear_dw_team_port() {
  dw_team_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_team_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_team_port)
  return dw_team_port_;
}
inline void ServerInfo::set_dw_team_port(::google::protobuf::uint32 value) {
  
  dw_team_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_team_port)
}

// uint32 dw_game_server_manager_port = 4;
inline void ServerInfo::clear_dw_game_server_manager_port() {
  dw_game_server_manager_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_game_server_manager_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_game_server_manager_port)
  return dw_game_server_manager_port_;
}
inline void ServerInfo::set_dw_game_server_manager_port(::google::protobuf::uint32 value) {
  
  dw_game_server_manager_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_game_server_manager_port)
}

// uint32 dw_login_port = 5;
inline void ServerInfo::clear_dw_login_port() {
  dw_login_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_login_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_login_port)
  return dw_login_port_;
}
inline void ServerInfo::set_dw_login_port(::google::protobuf::uint32 value) {
  
  dw_login_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_login_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameProto::EServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EServerType>() {
  return ::GameProto::EServerType_descriptor();
}
template <> struct is_proto_enum< ::GameProto::ETeamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ETeamType>() {
  return ::GameProto::ETeamType_descriptor();
}
template <> struct is_proto_enum< ::GameProto::EErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EErrorCode>() {
  return ::GameProto::EErrorCode_descriptor();
}
template <> struct is_proto_enum< ::GameProto::EMoveDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EMoveDirection>() {
  return ::GameProto::EMoveDirection_descriptor();
}
template <> struct is_proto_enum< ::GameProto::ERotationDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ERotationDirection>() {
  return ::GameProto::ERotationDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_web_5fgame_2eproto__INCLUDED
