// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_game.proto

#include "web_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace GameProto {
class PlayerRequestLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLogin>
      _instance;
} _PlayerRequestLogin_default_instance_;
class LoginAckPlayerLoginResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerLoginResult>
      _instance;
} _LoginAckPlayerLoginResult_default_instance_;
class GameNotifyGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyGameManagerInfo>
      _instance;
} _GameNotifyGameManagerInfo_default_instance_;
class GameManagerAckGameInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckGameInfoResult>
      _instance;
} _GameManagerAckGameInfoResult_default_instance_;
class PlayerRequestGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameManagerInfo>
      _instance;
} _PlayerRequestGameManagerInfo_default_instance_;
class GameManagerAckPlayerInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckPlayerInfoResult>
      _instance;
} _GameManagerAckPlayerInfoResult_default_instance_;
class PlayerRequestGameTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameTest>
      _instance;
} _PlayerRequestGameTest_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo>
      _instance;
} _ServerInfo_default_instance_;
}  // namespace GameProto
namespace protobuf_web_5fgame_2eproto {
void InitDefaultsPlayerRequestLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLogin_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLogin::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginImpl);
}

void InitDefaultsLoginAckPlayerLoginResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerLoginResult_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerLoginResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerLoginResult::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerLoginResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerLoginResultImpl);
}

void InitDefaultsGameNotifyGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameNotifyGameManagerInfo_default_instance_;
    new (ptr) ::GameProto::GameNotifyGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckGameInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameManagerAckGameInfoResult_default_instance_;
    new (ptr) ::GameProto::GameManagerAckGameInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameManagerAckGameInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckGameInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckGameInfoResultImpl);
}

void InitDefaultsPlayerRequestGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestGameManagerInfo_default_instance_;
    new (ptr) ::GameProto::PlayerRequestGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckPlayerInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameManagerAckPlayerInfoResult_default_instance_;
    new (ptr) ::GameProto::GameManagerAckPlayerInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameManagerAckPlayerInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckPlayerInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckPlayerInfoResultImpl);
}

void InitDefaultsPlayerRequestGameTestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestGameTest_default_instance_;
    new (ptr) ::GameProto::PlayerRequestGameTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestGameTest::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameTest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameTestImpl);
}

void InitDefaultsServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_ServerInfo_default_instance_;
    new (ptr) ::GameProto::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, dw_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, dw_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLoginResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLoginResult, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, qw_player_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckGameInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckGameInfoResult, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameManagerInfo, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_slave_server_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameTest, sz_test_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, sz_listen_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_team_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_game_server_manager_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_login_port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameProto::PlayerRequestLogin)},
  { 11, -1, sizeof(::GameProto::LoginAckPlayerLoginResult)},
  { 17, -1, sizeof(::GameProto::GameNotifyGameManagerInfo)},
  { 26, -1, sizeof(::GameProto::GameManagerAckGameInfoResult)},
  { 32, -1, sizeof(::GameProto::PlayerRequestGameManagerInfo)},
  { 38, -1, sizeof(::GameProto::GameManagerAckPlayerInfoResult)},
  { 46, -1, sizeof(::GameProto::PlayerRequestGameTest)},
  { 52, -1, sizeof(::GameProto::ServerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerLoginResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameManagerAckGameInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameManagerAckPlayerInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestGameTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_ServerInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "web_game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016web_game.proto\022\tGameProto\"\211\001\n\022PlayerRe"
      "questLogin\022\024\n\014qw_player_id\030\001 \001(\004\022\024\n\014sz_n"
      "ick_name\030\002 \001(\t\022\021\n\tsz_avatar\030\003 \001(\t\022\016\n\006dw_"
      "sex\030\004 \001(\r\022\022\n\ndw_balance\030\005 \001(\r\022\020\n\010sz_toke"
      "n\030\006 \001(\t\".\n\031LoginAckPlayerLoginResult\022\021\n\t"
      "dw_result\030\001 \001(\r\"\202\001\n\031GameNotifyGameManage"
      "rInfo\022\026\n\016dw_player_port\030\001 \001(\r\022\026\n\016dw_serv"
      "er_port\030\002 \001(\r\022\034\n\024dw_slave_server_port\030\003 "
      "\001(\r\022\027\n\017qw_player_point\030\004 \001(\004\"1\n\034GameMana"
      "gerAckGameInfoResult\022\021\n\tdw_result\030\001 \001(\r\""
      "1\n\034PlayerRequestGameManagerInfo\022\021\n\tdw_re"
      "sult\030\001 \001(\r\"n\n\036GameManagerAckPlayerInfoRe"
      "sult\022\026\n\016dw_player_port\030\001 \001(\r\022\026\n\016dw_serve"
      "r_port\030\002 \001(\r\022\034\n\024dw_slave_server_port\030\003 \001"
      "(\r\"(\n\025PlayerRequestGameTest\022\017\n\007sz_test\030\001"
      " \001(\t\"\212\001\n\nServerInfo\022\024\n\014dw_server_id\030\001 \001("
      "\r\022\024\n\014sz_listen_ip\030\002 \001(\t\022\024\n\014dw_team_port\030"
      "\003 \001(\r\022#\n\033dw_game_server_manager_port\030\004 \001"
      "(\r\022\025\n\rdw_login_port\030\005 \001(\r*H\n\nServerType\022"
      "\013\n\007ST_NONE\020\000\022\014\n\010ST_Login\020\001\022\013\n\007ST_Team\020\002\022"
      "\022\n\016ST_GameManager\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "web_game.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_web_5fgame_2eproto
namespace GameProto {
const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[0];
}
bool ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayerRequestLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLogin::kQwPlayerIdFieldNumber;
const int PlayerRequestLogin::kSzNickNameFieldNumber;
const int PlayerRequestLogin::kSzAvatarFieldNumber;
const int PlayerRequestLogin::kDwSexFieldNumber;
const int PlayerRequestLogin::kDwBalanceFieldNumber;
const int PlayerRequestLogin::kSzTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLogin::PlayerRequestLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLogin)
}
PlayerRequestLogin::PlayerRequestLogin(const PlayerRequestLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_nick_name().size() > 0) {
    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_avatar().size() > 0) {
    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  sz_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_token().size() > 0) {
    sz_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_token_);
  }
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_balance_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLogin)
}

void PlayerRequestLogin::SharedCtor() {
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_balance_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  _cached_size_ = 0;
}

PlayerRequestLogin::~PlayerRequestLogin() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLogin)
  SharedDtor();
}

void PlayerRequestLogin::SharedDtor() {
  sz_nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerRequestLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLogin::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLogin& PlayerRequestLogin::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLogin();
  return *internal_default_instance();
}

PlayerRequestLogin* PlayerRequestLogin::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLogin* n = new PlayerRequestLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_balance_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  _internal_metadata_.Clear();
}

bool PlayerRequestLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_nick_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_sex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_balance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_token().data(), static_cast<int>(this->sz_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLogin)
  return false;
#undef DO_
}

void PlayerRequestLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_nick_name(), output);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sz_avatar(), output);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_sex(), output);
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw_balance(), output);
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_token().data(), static_cast<int>(this->sz_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sz_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLogin)
}

::google::protobuf::uint8* PlayerRequestLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_nick_name(), target);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sz_avatar(), target);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_sex(), target);
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw_balance(), target);
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_token().data(), static_cast<int>(this->sz_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sz_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLogin)
  return target;
}

size_t PlayerRequestLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_nick_name());
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_avatar());
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_token());
  }

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_sex());
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_balance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLogin)
    MergeFrom(*source);
  }
}

void PlayerRequestLogin::MergeFrom(const PlayerRequestLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_nick_name().size() > 0) {

    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  if (from.sz_avatar().size() > 0) {

    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  if (from.sz_token().size() > 0) {

    sz_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_token_);
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_sex() != 0) {
    set_dw_sex(from.dw_sex());
  }
  if (from.dw_balance() != 0) {
    set_dw_balance(from.dw_balance());
  }
}

void PlayerRequestLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLogin::CopyFrom(const PlayerRequestLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLogin::IsInitialized() const {
  return true;
}

void PlayerRequestLogin::Swap(PlayerRequestLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLogin::InternalSwap(PlayerRequestLogin* other) {
  using std::swap;
  sz_nick_name_.Swap(&other->sz_nick_name_);
  sz_avatar_.Swap(&other->sz_avatar_);
  sz_token_.Swap(&other->sz_token_);
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_sex_, other->dw_sex_);
  swap(dw_balance_, other->dw_balance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLogin::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerLoginResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerLoginResult::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerLoginResult::LoginAckPlayerLoginResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerLoginResult)
}
LoginAckPlayerLoginResult::LoginAckPlayerLoginResult(const LoginAckPlayerLoginResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerLoginResult)
}

void LoginAckPlayerLoginResult::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerLoginResult::~LoginAckPlayerLoginResult() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerLoginResult)
  SharedDtor();
}

void LoginAckPlayerLoginResult::SharedDtor() {
}

void LoginAckPlayerLoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerLoginResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerLoginResult& LoginAckPlayerLoginResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResult();
  return *internal_default_instance();
}

LoginAckPlayerLoginResult* LoginAckPlayerLoginResult::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerLoginResult* n = new LoginAckPlayerLoginResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerLoginResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerLoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerLoginResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerLoginResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerLoginResult)
  return false;
#undef DO_
}

void LoginAckPlayerLoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerLoginResult)
}

::google::protobuf::uint8* LoginAckPlayerLoginResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerLoginResult)
  return target;
}

size_t LoginAckPlayerLoginResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerLoginResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerLoginResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerLoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerLoginResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerLoginResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerLoginResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerLoginResult)
    MergeFrom(*source);
  }
}

void LoginAckPlayerLoginResult::MergeFrom(const LoginAckPlayerLoginResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerLoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerLoginResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerLoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerLoginResult::CopyFrom(const LoginAckPlayerLoginResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerLoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerLoginResult::IsInitialized() const {
  return true;
}

void LoginAckPlayerLoginResult::Swap(LoginAckPlayerLoginResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerLoginResult::InternalSwap(LoginAckPlayerLoginResult* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerLoginResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyGameManagerInfo::kDwPlayerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwSlaveServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kQwPlayerPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyGameManagerInfo::GameNotifyGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyGameManagerInfo)
}
GameNotifyGameManagerInfo::GameNotifyGameManagerInfo(const GameNotifyGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slave_server_port_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyGameManagerInfo)
}

void GameNotifyGameManagerInfo::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _cached_size_ = 0;
}

GameNotifyGameManagerInfo::~GameNotifyGameManagerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyGameManagerInfo)
  SharedDtor();
}

void GameNotifyGameManagerInfo::SharedDtor() {
}

void GameNotifyGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyGameManagerInfo& GameNotifyGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  return *internal_default_instance();
}

GameNotifyGameManagerInfo* GameNotifyGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  GameNotifyGameManagerInfo* n = new GameNotifyGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _internal_metadata_.Clear();
}

bool GameNotifyGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyGameManagerInfo)
  return false;
#undef DO_
}

void GameNotifyGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->qw_player_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyGameManagerInfo)
}

::google::protobuf::uint8* GameNotifyGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->qw_player_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyGameManagerInfo)
  return target;
}

size_t GameNotifyGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_point());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyGameManagerInfo)
    MergeFrom(*source);
  }
}

void GameNotifyGameManagerInfo::MergeFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.qw_player_point() != 0) {
    set_qw_player_point(from.qw_player_point());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
}

void GameNotifyGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyGameManagerInfo::CopyFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyGameManagerInfo::IsInitialized() const {
  return true;
}

void GameNotifyGameManagerInfo::Swap(GameNotifyGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyGameManagerInfo::InternalSwap(GameNotifyGameManagerInfo* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(qw_player_point_, other->qw_player_point_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckGameInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckGameInfoResult::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckGameInfoResult::GameManagerAckGameInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameManagerAckGameInfoResult)
}
GameManagerAckGameInfoResult::GameManagerAckGameInfoResult(const GameManagerAckGameInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameManagerAckGameInfoResult)
}

void GameManagerAckGameInfoResult::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

GameManagerAckGameInfoResult::~GameManagerAckGameInfoResult() {
  // @@protoc_insertion_point(destructor:GameProto.GameManagerAckGameInfoResult)
  SharedDtor();
}

void GameManagerAckGameInfoResult::SharedDtor() {
}

void GameManagerAckGameInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckGameInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckGameInfoResult& GameManagerAckGameInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  return *internal_default_instance();
}

GameManagerAckGameInfoResult* GameManagerAckGameInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckGameInfoResult* n = new GameManagerAckGameInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckGameInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool GameManagerAckGameInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameManagerAckGameInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameManagerAckGameInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameManagerAckGameInfoResult)
  return false;
#undef DO_
}

void GameManagerAckGameInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameManagerAckGameInfoResult)
}

::google::protobuf::uint8* GameManagerAckGameInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameManagerAckGameInfoResult)
  return target;
}

size_t GameManagerAckGameInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameManagerAckGameInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckGameInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckGameInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckGameInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameManagerAckGameInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameManagerAckGameInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckGameInfoResult::MergeFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void GameManagerAckGameInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckGameInfoResult::CopyFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckGameInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckGameInfoResult::Swap(GameManagerAckGameInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckGameInfoResult::InternalSwap(GameManagerAckGameInfoResult* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckGameInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameManagerInfo::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestGameManagerInfo)
}
PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo(const PlayerRequestGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestGameManagerInfo)
}

void PlayerRequestGameManagerInfo::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

PlayerRequestGameManagerInfo::~PlayerRequestGameManagerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestGameManagerInfo)
  SharedDtor();
}

void PlayerRequestGameManagerInfo::SharedDtor() {
}

void PlayerRequestGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameManagerInfo& PlayerRequestGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  return *internal_default_instance();
}

PlayerRequestGameManagerInfo* PlayerRequestGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameManagerInfo* n = new PlayerRequestGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerRequestGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestGameManagerInfo)
  return false;
#undef DO_
}

void PlayerRequestGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestGameManagerInfo)
}

::google::protobuf::uint8* PlayerRequestGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestGameManagerInfo)
  return target;
}

size_t PlayerRequestGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestGameManagerInfo)
    MergeFrom(*source);
  }
}

void PlayerRequestGameManagerInfo::MergeFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void PlayerRequestGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameManagerInfo::CopyFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameManagerInfo::IsInitialized() const {
  return true;
}

void PlayerRequestGameManagerInfo::Swap(PlayerRequestGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameManagerInfo::InternalSwap(PlayerRequestGameManagerInfo* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckPlayerInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckPlayerInfoResult::kDwPlayerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwServerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwSlaveServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameManagerAckPlayerInfoResult)
}
GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult(const GameManagerAckPlayerInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slave_server_port_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameManagerAckPlayerInfoResult)
}

void GameManagerAckPlayerInfoResult::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _cached_size_ = 0;
}

GameManagerAckPlayerInfoResult::~GameManagerAckPlayerInfoResult() {
  // @@protoc_insertion_point(destructor:GameProto.GameManagerAckPlayerInfoResult)
  SharedDtor();
}

void GameManagerAckPlayerInfoResult::SharedDtor() {
}

void GameManagerAckPlayerInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckPlayerInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckPlayerInfoResult& GameManagerAckPlayerInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  return *internal_default_instance();
}

GameManagerAckPlayerInfoResult* GameManagerAckPlayerInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckPlayerInfoResult* n = new GameManagerAckPlayerInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckPlayerInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _internal_metadata_.Clear();
}

bool GameManagerAckPlayerInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameManagerAckPlayerInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameManagerAckPlayerInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameManagerAckPlayerInfoResult)
  return false;
#undef DO_
}

void GameManagerAckPlayerInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameManagerAckPlayerInfoResult)
}

::google::protobuf::uint8* GameManagerAckPlayerInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameManagerAckPlayerInfoResult)
  return target;
}

size_t GameManagerAckPlayerInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameManagerAckPlayerInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckPlayerInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckPlayerInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckPlayerInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameManagerAckPlayerInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameManagerAckPlayerInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckPlayerInfoResult::MergeFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
}

void GameManagerAckPlayerInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckPlayerInfoResult::CopyFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckPlayerInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckPlayerInfoResult::Swap(GameManagerAckPlayerInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckPlayerInfoResult::InternalSwap(GameManagerAckPlayerInfoResult* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckPlayerInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameTest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameTest::kSzTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameTest::PlayerRequestGameTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestGameTest)
}
PlayerRequestGameTest::PlayerRequestGameTest(const PlayerRequestGameTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_test().size() > 0) {
    sz_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_test_);
  }
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestGameTest)
}

void PlayerRequestGameTest::SharedCtor() {
  sz_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlayerRequestGameTest::~PlayerRequestGameTest() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestGameTest)
  SharedDtor();
}

void PlayerRequestGameTest::SharedDtor() {
  sz_test_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerRequestGameTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameTest::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameTest& PlayerRequestGameTest::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTest();
  return *internal_default_instance();
}

PlayerRequestGameTest* PlayerRequestGameTest::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameTest* n = new PlayerRequestGameTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameTest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PlayerRequestGameTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestGameTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sz_test = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_test()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_test().data(), static_cast<int>(this->sz_test().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestGameTest.sz_test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestGameTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestGameTest)
  return false;
#undef DO_
}

void PlayerRequestGameTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_test().data(), static_cast<int>(this->sz_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestGameTest.sz_test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sz_test(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestGameTest)
}

::google::protobuf::uint8* PlayerRequestGameTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_test().data(), static_cast<int>(this->sz_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestGameTest.sz_test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sz_test(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestGameTest)
  return target;
}

size_t PlayerRequestGameTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestGameTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_test());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestGameTest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestGameTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestGameTest)
    MergeFrom(*source);
  }
}

void PlayerRequestGameTest::MergeFrom(const PlayerRequestGameTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestGameTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_test().size() > 0) {

    sz_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_test_);
  }
}

void PlayerRequestGameTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestGameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameTest::CopyFrom(const PlayerRequestGameTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestGameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameTest::IsInitialized() const {
  return true;
}

void PlayerRequestGameTest::Swap(PlayerRequestGameTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameTest::InternalSwap(PlayerRequestGameTest* other) {
  using std::swap;
  sz_test_.Swap(&other->sz_test_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameTest::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kDwServerIdFieldNumber;
const int ServerInfo::kSzListenIpFieldNumber;
const int ServerInfo::kDwTeamPortFieldNumber;
const int ServerInfo::kDwGameServerManagerPortFieldNumber;
const int ServerInfo::kDwLoginPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_listen_ip().size() > 0) {
    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  ::memcpy(&dw_server_id_, &from.dw_server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_login_port_) -
    reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  // @@protoc_insertion_point(copy_constructor:GameProto.ServerInfo)
}

void ServerInfo::SharedCtor() {
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_login_port_) -
      reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  _cached_size_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  sz_listen_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfo& ServerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfo();
  return *internal_default_instance();
}

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_login_port_) -
      reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  _internal_metadata_.Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_listen_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_listen_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.ServerInfo.sz_listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_team_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_game_server_manager_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_server_manager_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_login_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_login_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_server_id(), output);
  }

  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerInfo.sz_listen_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_listen_ip(), output);
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_team_port(), output);
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_game_server_manager_port(), output);
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw_login_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_server_id(), target);
  }

  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerInfo.sz_listen_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_listen_ip(), target);
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_team_port(), target);
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_game_server_manager_port(), target);
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw_login_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.ServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_listen_ip());
  }

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_id());
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_port());
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_server_manager_port());
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_login_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_listen_ip().size() > 0) {

    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  if (from.dw_server_id() != 0) {
    set_dw_server_id(from.dw_server_id());
  }
  if (from.dw_team_port() != 0) {
    set_dw_team_port(from.dw_team_port());
  }
  if (from.dw_game_server_manager_port() != 0) {
    set_dw_game_server_manager_port(from.dw_game_server_manager_port());
  }
  if (from.dw_login_port() != 0) {
    set_dw_login_port(from.dw_login_port());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  sz_listen_ip_.Swap(&other->sz_listen_ip_);
  swap(dw_server_id_, other->dw_server_id_);
  swap(dw_team_port_, other->dw_team_port_);
  swap(dw_game_server_manager_port_, other->dw_game_server_manager_port_);
  swap(dw_login_port_, other->dw_login_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProto

// @@protoc_insertion_point(global_scope)
