// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_game.proto

#include "web_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace game_proto {
class GameNotifyGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyGameManagerInfo>
      _instance;
} _GameNotifyGameManagerInfo_default_instance_;
class GameManagerAckGameInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckGameInfoResult>
      _instance;
} _GameManagerAckGameInfoResult_default_instance_;
class PlayerRequestGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameManagerInfo>
      _instance;
} _PlayerRequestGameManagerInfo_default_instance_;
class GameManagerAckPlayerInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckPlayerInfoResult>
      _instance;
} _GameManagerAckPlayerInfoResult_default_instance_;
}  // namespace game_proto
namespace protobuf_web_5fgame_2eproto {
void InitDefaultsGameNotifyGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game_proto::_GameNotifyGameManagerInfo_default_instance_;
    new (ptr) ::game_proto::GameNotifyGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game_proto::GameNotifyGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckGameInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game_proto::_GameManagerAckGameInfoResult_default_instance_;
    new (ptr) ::game_proto::GameManagerAckGameInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game_proto::GameManagerAckGameInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckGameInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckGameInfoResultImpl);
}

void InitDefaultsPlayerRequestGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game_proto::_PlayerRequestGameManagerInfo_default_instance_;
    new (ptr) ::game_proto::PlayerRequestGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game_proto::PlayerRequestGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckPlayerInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game_proto::_GameManagerAckPlayerInfoResult_default_instance_;
    new (ptr) ::game_proto::GameManagerAckPlayerInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game_proto::GameManagerAckPlayerInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckPlayerInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckPlayerInfoResultImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameNotifyGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameNotifyGameManagerInfo, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameNotifyGameManagerInfo, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameNotifyGameManagerInfo, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameNotifyGameManagerInfo, qw_player_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckGameInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckGameInfoResult, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::PlayerRequestGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::PlayerRequestGameManagerInfo, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckPlayerInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckPlayerInfoResult, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckPlayerInfoResult, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game_proto::GameManagerAckPlayerInfoResult, dw_slave_server_port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game_proto::GameNotifyGameManagerInfo)},
  { 9, -1, sizeof(::game_proto::GameManagerAckGameInfoResult)},
  { 15, -1, sizeof(::game_proto::PlayerRequestGameManagerInfo)},
  { 21, -1, sizeof(::game_proto::GameManagerAckPlayerInfoResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::game_proto::_GameNotifyGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game_proto::_GameManagerAckGameInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game_proto::_PlayerRequestGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game_proto::_GameManagerAckPlayerInfoResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "web_game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016web_game.proto\022\ngame_proto\"\202\001\n\031GameNot"
      "ifyGameManagerInfo\022\026\n\016dw_player_port\030\001 \001"
      "(\r\022\026\n\016dw_server_port\030\002 \001(\r\022\034\n\024dw_slave_s"
      "erver_port\030\003 \001(\r\022\027\n\017qw_player_point\030\004 \001("
      "\004\"1\n\034GameManagerAckGameInfoResult\022\021\n\tdw_"
      "result\030\001 \001(\r\"1\n\034PlayerRequestGameManager"
      "Info\022\021\n\tdw_result\030\001 \001(\r\"n\n\036GameManagerAc"
      "kPlayerInfoResult\022\026\n\016dw_player_port\030\001 \001("
      "\r\022\026\n\016dw_server_port\030\002 \001(\r\022\034\n\024dw_slave_se"
      "rver_port\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "web_game.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_web_5fgame_2eproto
namespace game_proto {

// ===================================================================

void GameNotifyGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyGameManagerInfo::kDwPlayerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwSlaveServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kQwPlayerPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyGameManagerInfo::GameNotifyGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_proto.GameNotifyGameManagerInfo)
}
GameNotifyGameManagerInfo::GameNotifyGameManagerInfo(const GameNotifyGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slave_server_port_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  // @@protoc_insertion_point(copy_constructor:game_proto.GameNotifyGameManagerInfo)
}

void GameNotifyGameManagerInfo::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _cached_size_ = 0;
}

GameNotifyGameManagerInfo::~GameNotifyGameManagerInfo() {
  // @@protoc_insertion_point(destructor:game_proto.GameNotifyGameManagerInfo)
  SharedDtor();
}

void GameNotifyGameManagerInfo::SharedDtor() {
}

void GameNotifyGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyGameManagerInfo& GameNotifyGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  return *internal_default_instance();
}

GameNotifyGameManagerInfo* GameNotifyGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  GameNotifyGameManagerInfo* n = new GameNotifyGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game_proto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _internal_metadata_.Clear();
}

bool GameNotifyGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_proto.GameNotifyGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_proto.GameNotifyGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_proto.GameNotifyGameManagerInfo)
  return false;
#undef DO_
}

void GameNotifyGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_proto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->qw_player_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game_proto.GameNotifyGameManagerInfo)
}

::google::protobuf::uint8* GameNotifyGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game_proto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->qw_player_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_proto.GameNotifyGameManagerInfo)
  return target;
}

size_t GameNotifyGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game_proto.GameNotifyGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint64 qw_player_point = 4;
  if (this->qw_player_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_point());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game_proto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game_proto.GameNotifyGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game_proto.GameNotifyGameManagerInfo)
    MergeFrom(*source);
  }
}

void GameNotifyGameManagerInfo::MergeFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game_proto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.qw_player_point() != 0) {
    set_qw_player_point(from.qw_player_point());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
}

void GameNotifyGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game_proto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyGameManagerInfo::CopyFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_proto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyGameManagerInfo::IsInitialized() const {
  return true;
}

void GameNotifyGameManagerInfo::Swap(GameNotifyGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyGameManagerInfo::InternalSwap(GameNotifyGameManagerInfo* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(qw_player_point_, other->qw_player_point_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckGameInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckGameInfoResult::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckGameInfoResult::GameManagerAckGameInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_proto.GameManagerAckGameInfoResult)
}
GameManagerAckGameInfoResult::GameManagerAckGameInfoResult(const GameManagerAckGameInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:game_proto.GameManagerAckGameInfoResult)
}

void GameManagerAckGameInfoResult::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

GameManagerAckGameInfoResult::~GameManagerAckGameInfoResult() {
  // @@protoc_insertion_point(destructor:game_proto.GameManagerAckGameInfoResult)
  SharedDtor();
}

void GameManagerAckGameInfoResult::SharedDtor() {
}

void GameManagerAckGameInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckGameInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckGameInfoResult& GameManagerAckGameInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  return *internal_default_instance();
}

GameManagerAckGameInfoResult* GameManagerAckGameInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckGameInfoResult* n = new GameManagerAckGameInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckGameInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:game_proto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool GameManagerAckGameInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_proto.GameManagerAckGameInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_proto.GameManagerAckGameInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_proto.GameManagerAckGameInfoResult)
  return false;
#undef DO_
}

void GameManagerAckGameInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_proto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game_proto.GameManagerAckGameInfoResult)
}

::google::protobuf::uint8* GameManagerAckGameInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game_proto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_proto.GameManagerAckGameInfoResult)
  return target;
}

size_t GameManagerAckGameInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game_proto.GameManagerAckGameInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckGameInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game_proto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckGameInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckGameInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game_proto.GameManagerAckGameInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game_proto.GameManagerAckGameInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckGameInfoResult::MergeFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game_proto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void GameManagerAckGameInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game_proto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckGameInfoResult::CopyFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_proto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckGameInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckGameInfoResult::Swap(GameManagerAckGameInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckGameInfoResult::InternalSwap(GameManagerAckGameInfoResult* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckGameInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameManagerInfo::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_proto.PlayerRequestGameManagerInfo)
}
PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo(const PlayerRequestGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:game_proto.PlayerRequestGameManagerInfo)
}

void PlayerRequestGameManagerInfo::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

PlayerRequestGameManagerInfo::~PlayerRequestGameManagerInfo() {
  // @@protoc_insertion_point(destructor:game_proto.PlayerRequestGameManagerInfo)
  SharedDtor();
}

void PlayerRequestGameManagerInfo::SharedDtor() {
}

void PlayerRequestGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameManagerInfo& PlayerRequestGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  return *internal_default_instance();
}

PlayerRequestGameManagerInfo* PlayerRequestGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameManagerInfo* n = new PlayerRequestGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game_proto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerRequestGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_proto.PlayerRequestGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_proto.PlayerRequestGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_proto.PlayerRequestGameManagerInfo)
  return false;
#undef DO_
}

void PlayerRequestGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_proto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game_proto.PlayerRequestGameManagerInfo)
}

::google::protobuf::uint8* PlayerRequestGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game_proto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_proto.PlayerRequestGameManagerInfo)
  return target;
}

size_t PlayerRequestGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game_proto.PlayerRequestGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game_proto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game_proto.PlayerRequestGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game_proto.PlayerRequestGameManagerInfo)
    MergeFrom(*source);
  }
}

void PlayerRequestGameManagerInfo::MergeFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game_proto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void PlayerRequestGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game_proto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameManagerInfo::CopyFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_proto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameManagerInfo::IsInitialized() const {
  return true;
}

void PlayerRequestGameManagerInfo::Swap(PlayerRequestGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameManagerInfo::InternalSwap(PlayerRequestGameManagerInfo* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckPlayerInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckPlayerInfoResult::kDwPlayerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwServerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwSlaveServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_proto.GameManagerAckPlayerInfoResult)
}
GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult(const GameManagerAckPlayerInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slave_server_port_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  // @@protoc_insertion_point(copy_constructor:game_proto.GameManagerAckPlayerInfoResult)
}

void GameManagerAckPlayerInfoResult::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _cached_size_ = 0;
}

GameManagerAckPlayerInfoResult::~GameManagerAckPlayerInfoResult() {
  // @@protoc_insertion_point(destructor:game_proto.GameManagerAckPlayerInfoResult)
  SharedDtor();
}

void GameManagerAckPlayerInfoResult::SharedDtor() {
}

void GameManagerAckPlayerInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckPlayerInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckPlayerInfoResult& GameManagerAckPlayerInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  return *internal_default_instance();
}

GameManagerAckPlayerInfoResult* GameManagerAckPlayerInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckPlayerInfoResult* n = new GameManagerAckPlayerInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckPlayerInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:game_proto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _internal_metadata_.Clear();
}

bool GameManagerAckPlayerInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_proto.GameManagerAckPlayerInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_proto.GameManagerAckPlayerInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_proto.GameManagerAckPlayerInfoResult)
  return false;
#undef DO_
}

void GameManagerAckPlayerInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_proto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game_proto.GameManagerAckPlayerInfoResult)
}

::google::protobuf::uint8* GameManagerAckPlayerInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game_proto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_proto.GameManagerAckPlayerInfoResult)
  return target;
}

size_t GameManagerAckPlayerInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game_proto.GameManagerAckPlayerInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckPlayerInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game_proto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckPlayerInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckPlayerInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game_proto.GameManagerAckPlayerInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game_proto.GameManagerAckPlayerInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckPlayerInfoResult::MergeFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game_proto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
}

void GameManagerAckPlayerInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game_proto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckPlayerInfoResult::CopyFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_proto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckPlayerInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckPlayerInfoResult::Swap(GameManagerAckPlayerInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckPlayerInfoResult::InternalSwap(GameManagerAckPlayerInfoResult* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckPlayerInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game_proto

// @@protoc_insertion_point(global_scope)
