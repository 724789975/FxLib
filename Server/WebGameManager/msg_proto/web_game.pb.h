// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_game.proto

#ifndef PROTOBUF_web_5fgame_2eproto__INCLUDED
#define PROTOBUF_web_5fgame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "web_data.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_web_5fgame_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[22];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlayerRequestLoginImpl();
void InitDefaultsPlayerRequestLogin();
void InitDefaultsPlayerRequestLoginMakeTeamImpl();
void InitDefaultsPlayerRequestLoginMakeTeam();
void InitDefaultsPlayerRequestLoginInviteTeamImpl();
void InitDefaultsPlayerRequestLoginInviteTeam();
void InitDefaultsPlayerRequestLoginChangeSlotImpl();
void InitDefaultsPlayerRequestLoginChangeSlot();
void InitDefaultsLoginAckPlayerLoginResultImpl();
void InitDefaultsLoginAckPlayerLoginResult();
void InitDefaultsLoginAckPlayerMakeTeamImpl();
void InitDefaultsLoginAckPlayerMakeTeam();
void InitDefaultsLoginNotifyPlayerTeamInfoImpl();
void InitDefaultsLoginNotifyPlayerTeamInfo();
void InitDefaultsLoginAckPlayerInviteTeamImpl();
void InitDefaultsLoginAckPlayerInviteTeam();
void InitDefaultsLoginAckPlayerChangeSlotImpl();
void InitDefaultsLoginAckPlayerChangeSlot();
void InitDefaultsLoginRequestTeamMakeTeamImpl();
void InitDefaultsLoginRequestTeamMakeTeam();
void InitDefaultsLoginRequestTeamInviteTeamImpl();
void InitDefaultsLoginRequestTeamInviteTeam();
void InitDefaultsLoginRequestTeamChangeSlotImpl();
void InitDefaultsLoginRequestTeamChangeSlot();
void InitDefaultsTeamAckLoginMakeTeamImpl();
void InitDefaultsTeamAckLoginMakeTeam();
void InitDefaultsTeamNotifyLoginTeamInfoImpl();
void InitDefaultsTeamNotifyLoginTeamInfo();
void InitDefaultsTeamAckLoginInviteTeamImpl();
void InitDefaultsTeamAckLoginInviteTeam();
void InitDefaultsTeamAckLoginChangeSlotImpl();
void InitDefaultsTeamAckLoginChangeSlot();
void InitDefaultsGameNotifyGameManagerInfoImpl();
void InitDefaultsGameNotifyGameManagerInfo();
void InitDefaultsGameManagerAckGameInfoResultImpl();
void InitDefaultsGameManagerAckGameInfoResult();
void InitDefaultsPlayerRequestGameManagerInfoImpl();
void InitDefaultsPlayerRequestGameManagerInfo();
void InitDefaultsGameManagerAckPlayerInfoResultImpl();
void InitDefaultsGameManagerAckPlayerInfoResult();
void InitDefaultsPlayerRequestGameTestImpl();
void InitDefaultsPlayerRequestGameTest();
void InitDefaultsServerInfoImpl();
void InitDefaultsServerInfo();
inline void InitDefaults() {
  InitDefaultsPlayerRequestLogin();
  InitDefaultsPlayerRequestLoginMakeTeam();
  InitDefaultsPlayerRequestLoginInviteTeam();
  InitDefaultsPlayerRequestLoginChangeSlot();
  InitDefaultsLoginAckPlayerLoginResult();
  InitDefaultsLoginAckPlayerMakeTeam();
  InitDefaultsLoginNotifyPlayerTeamInfo();
  InitDefaultsLoginAckPlayerInviteTeam();
  InitDefaultsLoginAckPlayerChangeSlot();
  InitDefaultsLoginRequestTeamMakeTeam();
  InitDefaultsLoginRequestTeamInviteTeam();
  InitDefaultsLoginRequestTeamChangeSlot();
  InitDefaultsTeamAckLoginMakeTeam();
  InitDefaultsTeamNotifyLoginTeamInfo();
  InitDefaultsTeamAckLoginInviteTeam();
  InitDefaultsTeamAckLoginChangeSlot();
  InitDefaultsGameNotifyGameManagerInfo();
  InitDefaultsGameManagerAckGameInfoResult();
  InitDefaultsPlayerRequestGameManagerInfo();
  InitDefaultsGameManagerAckPlayerInfoResult();
  InitDefaultsPlayerRequestGameTest();
  InitDefaultsServerInfo();
}
}  // namespace protobuf_web_5fgame_2eproto
namespace GameProto {
class GameManagerAckGameInfoResult;
class GameManagerAckGameInfoResultDefaultTypeInternal;
extern GameManagerAckGameInfoResultDefaultTypeInternal _GameManagerAckGameInfoResult_default_instance_;
class GameManagerAckPlayerInfoResult;
class GameManagerAckPlayerInfoResultDefaultTypeInternal;
extern GameManagerAckPlayerInfoResultDefaultTypeInternal _GameManagerAckPlayerInfoResult_default_instance_;
class GameNotifyGameManagerInfo;
class GameNotifyGameManagerInfoDefaultTypeInternal;
extern GameNotifyGameManagerInfoDefaultTypeInternal _GameNotifyGameManagerInfo_default_instance_;
class LoginAckPlayerChangeSlot;
class LoginAckPlayerChangeSlotDefaultTypeInternal;
extern LoginAckPlayerChangeSlotDefaultTypeInternal _LoginAckPlayerChangeSlot_default_instance_;
class LoginAckPlayerInviteTeam;
class LoginAckPlayerInviteTeamDefaultTypeInternal;
extern LoginAckPlayerInviteTeamDefaultTypeInternal _LoginAckPlayerInviteTeam_default_instance_;
class LoginAckPlayerLoginResult;
class LoginAckPlayerLoginResultDefaultTypeInternal;
extern LoginAckPlayerLoginResultDefaultTypeInternal _LoginAckPlayerLoginResult_default_instance_;
class LoginAckPlayerMakeTeam;
class LoginAckPlayerMakeTeamDefaultTypeInternal;
extern LoginAckPlayerMakeTeamDefaultTypeInternal _LoginAckPlayerMakeTeam_default_instance_;
class LoginNotifyPlayerTeamInfo;
class LoginNotifyPlayerTeamInfoDefaultTypeInternal;
extern LoginNotifyPlayerTeamInfoDefaultTypeInternal _LoginNotifyPlayerTeamInfo_default_instance_;
class LoginRequestTeamChangeSlot;
class LoginRequestTeamChangeSlotDefaultTypeInternal;
extern LoginRequestTeamChangeSlotDefaultTypeInternal _LoginRequestTeamChangeSlot_default_instance_;
class LoginRequestTeamInviteTeam;
class LoginRequestTeamInviteTeamDefaultTypeInternal;
extern LoginRequestTeamInviteTeamDefaultTypeInternal _LoginRequestTeamInviteTeam_default_instance_;
class LoginRequestTeamMakeTeam;
class LoginRequestTeamMakeTeamDefaultTypeInternal;
extern LoginRequestTeamMakeTeamDefaultTypeInternal _LoginRequestTeamMakeTeam_default_instance_;
class PlayerRequestGameManagerInfo;
class PlayerRequestGameManagerInfoDefaultTypeInternal;
extern PlayerRequestGameManagerInfoDefaultTypeInternal _PlayerRequestGameManagerInfo_default_instance_;
class PlayerRequestGameTest;
class PlayerRequestGameTestDefaultTypeInternal;
extern PlayerRequestGameTestDefaultTypeInternal _PlayerRequestGameTest_default_instance_;
class PlayerRequestLogin;
class PlayerRequestLoginDefaultTypeInternal;
extern PlayerRequestLoginDefaultTypeInternal _PlayerRequestLogin_default_instance_;
class PlayerRequestLoginChangeSlot;
class PlayerRequestLoginChangeSlotDefaultTypeInternal;
extern PlayerRequestLoginChangeSlotDefaultTypeInternal _PlayerRequestLoginChangeSlot_default_instance_;
class PlayerRequestLoginInviteTeam;
class PlayerRequestLoginInviteTeamDefaultTypeInternal;
extern PlayerRequestLoginInviteTeamDefaultTypeInternal _PlayerRequestLoginInviteTeam_default_instance_;
class PlayerRequestLoginMakeTeam;
class PlayerRequestLoginMakeTeamDefaultTypeInternal;
extern PlayerRequestLoginMakeTeamDefaultTypeInternal _PlayerRequestLoginMakeTeam_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class TeamAckLoginChangeSlot;
class TeamAckLoginChangeSlotDefaultTypeInternal;
extern TeamAckLoginChangeSlotDefaultTypeInternal _TeamAckLoginChangeSlot_default_instance_;
class TeamAckLoginInviteTeam;
class TeamAckLoginInviteTeamDefaultTypeInternal;
extern TeamAckLoginInviteTeamDefaultTypeInternal _TeamAckLoginInviteTeam_default_instance_;
class TeamAckLoginMakeTeam;
class TeamAckLoginMakeTeamDefaultTypeInternal;
extern TeamAckLoginMakeTeamDefaultTypeInternal _TeamAckLoginMakeTeam_default_instance_;
class TeamNotifyLoginTeamInfo;
class TeamNotifyLoginTeamInfoDefaultTypeInternal;
extern TeamNotifyLoginTeamInfoDefaultTypeInternal _TeamNotifyLoginTeamInfo_default_instance_;
}  // namespace GameProto
namespace GameProto {

enum EServerType {
  ST_NONE = 0,
  ST_Login = 1,
  ST_Team = 2,
  ST_GameManager = 3,
  EServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EServerType_IsValid(int value);
const EServerType EServerType_MIN = ST_NONE;
const EServerType EServerType_MAX = ST_GameManager;
const int EServerType_ARRAYSIZE = EServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServerType_descriptor();
inline const ::std::string& EServerType_Name(EServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerType_descriptor(), value);
}
inline bool EServerType_Parse(
    const ::std::string& name, EServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerType>(
    EServerType_descriptor(), name, value);
}
enum ETeamType {
  TT_NONE = 0,
  TT_Normal = 1,
  ETeamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ETeamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ETeamType_IsValid(int value);
const ETeamType ETeamType_MIN = TT_NONE;
const ETeamType ETeamType_MAX = TT_Normal;
const int ETeamType_ARRAYSIZE = ETeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamType_descriptor();
inline const ::std::string& ETeamType_Name(ETeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamType_descriptor(), value);
}
inline bool ETeamType_Parse(
    const ::std::string& name, ETeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamType>(
    ETeamType_descriptor(), name, value);
}
enum EErrorCode {
  EC_NONE = 0,
  EC_MakeTeamNotIdle = 1,
  EC_NoTeamServer = 2,
  EErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EErrorCode_IsValid(int value);
const EErrorCode EErrorCode_MIN = EC_NONE;
const EErrorCode EErrorCode_MAX = EC_NoTeamServer;
const int EErrorCode_ARRAYSIZE = EErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EErrorCode_descriptor();
inline const ::std::string& EErrorCode_Name(EErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EErrorCode_descriptor(), value);
}
inline bool EErrorCode_Parse(
    const ::std::string& name, EErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EErrorCode>(
    EErrorCode_descriptor(), name, value);
}
// ===================================================================

class PlayerRequestLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLogin) */ {
 public:
  PlayerRequestLogin();
  virtual ~PlayerRequestLogin();

  PlayerRequestLogin(const PlayerRequestLogin& from);

  inline PlayerRequestLogin& operator=(const PlayerRequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLogin(PlayerRequestLogin&& from) noexcept
    : PlayerRequestLogin() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLogin& operator=(PlayerRequestLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLogin* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLogin*>(
               &_PlayerRequestLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerRequestLogin* other);
  friend void swap(PlayerRequestLogin& a, PlayerRequestLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLogin& from);
  void MergeFrom(const PlayerRequestLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_nick_name = 2;
  void clear_sz_nick_name();
  static const int kSzNickNameFieldNumber = 2;
  const ::std::string& sz_nick_name() const;
  void set_sz_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_nick_name(::std::string&& value);
  #endif
  void set_sz_nick_name(const char* value);
  void set_sz_nick_name(const char* value, size_t size);
  ::std::string* mutable_sz_nick_name();
  ::std::string* release_sz_nick_name();
  void set_allocated_sz_nick_name(::std::string* sz_nick_name);

  // string sz_avatar = 3;
  void clear_sz_avatar();
  static const int kSzAvatarFieldNumber = 3;
  const ::std::string& sz_avatar() const;
  void set_sz_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_avatar(::std::string&& value);
  #endif
  void set_sz_avatar(const char* value);
  void set_sz_avatar(const char* value, size_t size);
  ::std::string* mutable_sz_avatar();
  ::std::string* release_sz_avatar();
  void set_allocated_sz_avatar(::std::string* sz_avatar);

  // string sz_token = 6;
  void clear_sz_token();
  static const int kSzTokenFieldNumber = 6;
  const ::std::string& sz_token() const;
  void set_sz_token(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_token(::std::string&& value);
  #endif
  void set_sz_token(const char* value);
  void set_sz_token(const char* value, size_t size);
  ::std::string* mutable_sz_token();
  ::std::string* release_sz_token();
  void set_allocated_sz_token(::std::string* sz_token);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_sex = 4;
  void clear_dw_sex();
  static const int kDwSexFieldNumber = 4;
  ::google::protobuf::uint32 dw_sex() const;
  void set_dw_sex(::google::protobuf::uint32 value);

  // uint32 dw_balance = 5;
  void clear_dw_balance();
  static const int kDwBalanceFieldNumber = 5;
  ::google::protobuf::uint32 dw_balance() const;
  void set_dw_balance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_nick_name_;
  ::google::protobuf::internal::ArenaStringPtr sz_avatar_;
  ::google::protobuf::internal::ArenaStringPtr sz_token_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_sex_;
  ::google::protobuf::uint32 dw_balance_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginMakeTeam) */ {
 public:
  PlayerRequestLoginMakeTeam();
  virtual ~PlayerRequestLoginMakeTeam();

  PlayerRequestLoginMakeTeam(const PlayerRequestLoginMakeTeam& from);

  inline PlayerRequestLoginMakeTeam& operator=(const PlayerRequestLoginMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginMakeTeam(PlayerRequestLoginMakeTeam&& from) noexcept
    : PlayerRequestLoginMakeTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginMakeTeam& operator=(PlayerRequestLoginMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginMakeTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginMakeTeam*>(
               &_PlayerRequestLoginMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerRequestLoginMakeTeam* other);
  friend void swap(PlayerRequestLoginMakeTeam& a, PlayerRequestLoginMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginMakeTeam& from);
  void MergeFrom(const PlayerRequestLoginMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginMakeTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginInviteTeam) */ {
 public:
  PlayerRequestLoginInviteTeam();
  virtual ~PlayerRequestLoginInviteTeam();

  PlayerRequestLoginInviteTeam(const PlayerRequestLoginInviteTeam& from);

  inline PlayerRequestLoginInviteTeam& operator=(const PlayerRequestLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginInviteTeam(PlayerRequestLoginInviteTeam&& from) noexcept
    : PlayerRequestLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginInviteTeam& operator=(PlayerRequestLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginInviteTeam*>(
               &_PlayerRequestLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerRequestLoginInviteTeam* other);
  friend void swap(PlayerRequestLoginInviteTeam& a, PlayerRequestLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginInviteTeam& from);
  void MergeFrom(const PlayerRequestLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 qw_player_id = 1;
  int qw_player_id_size() const;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id(int index) const;
  void set_qw_player_id(int index, ::google::protobuf::uint64 value);
  void add_qw_player_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      qw_player_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_qw_player_id();

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > qw_player_id_;
  mutable int _qw_player_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class PlayerRequestLoginChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestLoginChangeSlot) */ {
 public:
  PlayerRequestLoginChangeSlot();
  virtual ~PlayerRequestLoginChangeSlot();

  PlayerRequestLoginChangeSlot(const PlayerRequestLoginChangeSlot& from);

  inline PlayerRequestLoginChangeSlot& operator=(const PlayerRequestLoginChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestLoginChangeSlot(PlayerRequestLoginChangeSlot&& from) noexcept
    : PlayerRequestLoginChangeSlot() {
    *this = ::std::move(from);
  }

  inline PlayerRequestLoginChangeSlot& operator=(PlayerRequestLoginChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestLoginChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestLoginChangeSlot* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestLoginChangeSlot*>(
               &_PlayerRequestLoginChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerRequestLoginChangeSlot* other);
  friend void swap(PlayerRequestLoginChangeSlot& a, PlayerRequestLoginChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestLoginChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestLoginChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestLoginChangeSlot& from);
  void MergeFrom(const PlayerRequestLoginChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestLoginChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_slot_id = 1;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 1;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestLoginChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginChangeSlotImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerLoginResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerLoginResult) */ {
 public:
  LoginAckPlayerLoginResult();
  virtual ~LoginAckPlayerLoginResult();

  LoginAckPlayerLoginResult(const LoginAckPlayerLoginResult& from);

  inline LoginAckPlayerLoginResult& operator=(const LoginAckPlayerLoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerLoginResult(LoginAckPlayerLoginResult&& from) noexcept
    : LoginAckPlayerLoginResult() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerLoginResult& operator=(LoginAckPlayerLoginResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerLoginResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerLoginResult* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerLoginResult*>(
               &_LoginAckPlayerLoginResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LoginAckPlayerLoginResult* other);
  friend void swap(LoginAckPlayerLoginResult& a, LoginAckPlayerLoginResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerLoginResult* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerLoginResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerLoginResult& from);
  void MergeFrom(const LoginAckPlayerLoginResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerLoginResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerLoginResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResultImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerMakeTeam) */ {
 public:
  LoginAckPlayerMakeTeam();
  virtual ~LoginAckPlayerMakeTeam();

  LoginAckPlayerMakeTeam(const LoginAckPlayerMakeTeam& from);

  inline LoginAckPlayerMakeTeam& operator=(const LoginAckPlayerMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerMakeTeam(LoginAckPlayerMakeTeam&& from) noexcept
    : LoginAckPlayerMakeTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerMakeTeam& operator=(LoginAckPlayerMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerMakeTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerMakeTeam*>(
               &_LoginAckPlayerMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LoginAckPlayerMakeTeam* other);
  friend void swap(LoginAckPlayerMakeTeam& a, LoginAckPlayerMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerMakeTeam& from);
  void MergeFrom(const LoginAckPlayerMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_team_id = 2;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerMakeTeamImpl();
};
// -------------------------------------------------------------------

class LoginNotifyPlayerTeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginNotifyPlayerTeamInfo) */ {
 public:
  LoginNotifyPlayerTeamInfo();
  virtual ~LoginNotifyPlayerTeamInfo();

  LoginNotifyPlayerTeamInfo(const LoginNotifyPlayerTeamInfo& from);

  inline LoginNotifyPlayerTeamInfo& operator=(const LoginNotifyPlayerTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotifyPlayerTeamInfo(LoginNotifyPlayerTeamInfo&& from) noexcept
    : LoginNotifyPlayerTeamInfo() {
    *this = ::std::move(from);
  }

  inline LoginNotifyPlayerTeamInfo& operator=(LoginNotifyPlayerTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNotifyPlayerTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginNotifyPlayerTeamInfo* internal_default_instance() {
    return reinterpret_cast<const LoginNotifyPlayerTeamInfo*>(
               &_LoginNotifyPlayerTeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(LoginNotifyPlayerTeamInfo* other);
  friend void swap(LoginNotifyPlayerTeamInfo& a, LoginNotifyPlayerTeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotifyPlayerTeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotifyPlayerTeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginNotifyPlayerTeamInfo& from);
  void MergeFrom(const LoginNotifyPlayerTeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginNotifyPlayerTeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  int team_role_data_size() const;
  void clear_team_role_data();
  static const int kTeamRoleDataFieldNumber = 1;
  const ::GameProto::TeamRoleData& team_role_data(int index) const;
  ::GameProto::TeamRoleData* mutable_team_role_data(int index);
  ::GameProto::TeamRoleData* add_team_role_data();
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
      mutable_team_role_data();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
      team_role_data() const;

  // @@protoc_insertion_point(class_scope:GameProto.LoginNotifyPlayerTeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData > team_role_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamInfoImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerInviteTeam) */ {
 public:
  LoginAckPlayerInviteTeam();
  virtual ~LoginAckPlayerInviteTeam();

  LoginAckPlayerInviteTeam(const LoginAckPlayerInviteTeam& from);

  inline LoginAckPlayerInviteTeam& operator=(const LoginAckPlayerInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerInviteTeam(LoginAckPlayerInviteTeam&& from) noexcept
    : LoginAckPlayerInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerInviteTeam& operator=(LoginAckPlayerInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerInviteTeam*>(
               &_LoginAckPlayerInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(LoginAckPlayerInviteTeam* other);
  friend void swap(LoginAckPlayerInviteTeam& a, LoginAckPlayerInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerInviteTeam& from);
  void MergeFrom(const LoginAckPlayerInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginAckPlayerChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginAckPlayerChangeSlot) */ {
 public:
  LoginAckPlayerChangeSlot();
  virtual ~LoginAckPlayerChangeSlot();

  LoginAckPlayerChangeSlot(const LoginAckPlayerChangeSlot& from);

  inline LoginAckPlayerChangeSlot& operator=(const LoginAckPlayerChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginAckPlayerChangeSlot(LoginAckPlayerChangeSlot&& from) noexcept
    : LoginAckPlayerChangeSlot() {
    *this = ::std::move(from);
  }

  inline LoginAckPlayerChangeSlot& operator=(LoginAckPlayerChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAckPlayerChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAckPlayerChangeSlot* internal_default_instance() {
    return reinterpret_cast<const LoginAckPlayerChangeSlot*>(
               &_LoginAckPlayerChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(LoginAckPlayerChangeSlot* other);
  friend void swap(LoginAckPlayerChangeSlot& a, LoginAckPlayerChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAckPlayerChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginAckPlayerChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginAckPlayerChangeSlot& from);
  void MergeFrom(const LoginAckPlayerChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginAckPlayerChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginAckPlayerChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerChangeSlotImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamMakeTeam) */ {
 public:
  LoginRequestTeamMakeTeam();
  virtual ~LoginRequestTeamMakeTeam();

  LoginRequestTeamMakeTeam(const LoginRequestTeamMakeTeam& from);

  inline LoginRequestTeamMakeTeam& operator=(const LoginRequestTeamMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamMakeTeam(LoginRequestTeamMakeTeam&& from) noexcept
    : LoginRequestTeamMakeTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamMakeTeam& operator=(LoginRequestTeamMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamMakeTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamMakeTeam*>(
               &_LoginRequestTeamMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(LoginRequestTeamMakeTeam* other);
  friend void swap(LoginRequestTeamMakeTeam& a, LoginRequestTeamMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamMakeTeam& from);
  void MergeFrom(const LoginRequestTeamMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 2;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 2;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint64 qw_player_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamMakeTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamInviteTeam) */ {
 public:
  LoginRequestTeamInviteTeam();
  virtual ~LoginRequestTeamInviteTeam();

  LoginRequestTeamInviteTeam(const LoginRequestTeamInviteTeam& from);

  inline LoginRequestTeamInviteTeam& operator=(const LoginRequestTeamInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamInviteTeam(LoginRequestTeamInviteTeam&& from) noexcept
    : LoginRequestTeamInviteTeam() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamInviteTeam& operator=(LoginRequestTeamInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamInviteTeam* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamInviteTeam*>(
               &_LoginRequestTeamInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LoginRequestTeamInviteTeam* other);
  friend void swap(LoginRequestTeamInviteTeam& a, LoginRequestTeamInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamInviteTeam& from);
  void MergeFrom(const LoginRequestTeamInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamInviteTeamImpl();
};
// -------------------------------------------------------------------

class LoginRequestTeamChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.LoginRequestTeamChangeSlot) */ {
 public:
  LoginRequestTeamChangeSlot();
  virtual ~LoginRequestTeamChangeSlot();

  LoginRequestTeamChangeSlot(const LoginRequestTeamChangeSlot& from);

  inline LoginRequestTeamChangeSlot& operator=(const LoginRequestTeamChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequestTeamChangeSlot(LoginRequestTeamChangeSlot&& from) noexcept
    : LoginRequestTeamChangeSlot() {
    *this = ::std::move(from);
  }

  inline LoginRequestTeamChangeSlot& operator=(LoginRequestTeamChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequestTeamChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestTeamChangeSlot* internal_default_instance() {
    return reinterpret_cast<const LoginRequestTeamChangeSlot*>(
               &_LoginRequestTeamChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LoginRequestTeamChangeSlot* other);
  friend void swap(LoginRequestTeamChangeSlot& a, LoginRequestTeamChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestTeamChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequestTeamChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequestTeamChangeSlot& from);
  void MergeFrom(const LoginRequestTeamChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequestTeamChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.LoginRequestTeamChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamChangeSlotImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginMakeTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginMakeTeam) */ {
 public:
  TeamAckLoginMakeTeam();
  virtual ~TeamAckLoginMakeTeam();

  TeamAckLoginMakeTeam(const TeamAckLoginMakeTeam& from);

  inline TeamAckLoginMakeTeam& operator=(const TeamAckLoginMakeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginMakeTeam(TeamAckLoginMakeTeam&& from) noexcept
    : TeamAckLoginMakeTeam() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginMakeTeam& operator=(TeamAckLoginMakeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginMakeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginMakeTeam* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginMakeTeam*>(
               &_TeamAckLoginMakeTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TeamAckLoginMakeTeam* other);
  friend void swap(TeamAckLoginMakeTeam& a, TeamAckLoginMakeTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginMakeTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginMakeTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginMakeTeam& from);
  void MergeFrom(const TeamAckLoginMakeTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginMakeTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 qw_player_id = 2;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 2;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint64 qw_team_id = 3;
  void clear_qw_team_id();
  static const int kQwTeamIdFieldNumber = 3;
  ::google::protobuf::uint64 qw_team_id() const;
  void set_qw_team_id(::google::protobuf::uint64 value);

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginMakeTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint64 qw_team_id_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginMakeTeamImpl();
};
// -------------------------------------------------------------------

class TeamNotifyLoginTeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamNotifyLoginTeamInfo) */ {
 public:
  TeamNotifyLoginTeamInfo();
  virtual ~TeamNotifyLoginTeamInfo();

  TeamNotifyLoginTeamInfo(const TeamNotifyLoginTeamInfo& from);

  inline TeamNotifyLoginTeamInfo& operator=(const TeamNotifyLoginTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamNotifyLoginTeamInfo(TeamNotifyLoginTeamInfo&& from) noexcept
    : TeamNotifyLoginTeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamNotifyLoginTeamInfo& operator=(TeamNotifyLoginTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamNotifyLoginTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamNotifyLoginTeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamNotifyLoginTeamInfo*>(
               &_TeamNotifyLoginTeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TeamNotifyLoginTeamInfo* other);
  friend void swap(TeamNotifyLoginTeamInfo& a, TeamNotifyLoginTeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamNotifyLoginTeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamNotifyLoginTeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamNotifyLoginTeamInfo& from);
  void MergeFrom(const TeamNotifyLoginTeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamNotifyLoginTeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  int team_role_data_size() const;
  void clear_team_role_data();
  static const int kTeamRoleDataFieldNumber = 1;
  const ::GameProto::TeamRoleData& team_role_data(int index) const;
  ::GameProto::TeamRoleData* mutable_team_role_data(int index);
  ::GameProto::TeamRoleData* add_team_role_data();
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
      mutable_team_role_data();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
      team_role_data() const;

  // @@protoc_insertion_point(class_scope:GameProto.TeamNotifyLoginTeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData > team_role_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamNotifyLoginTeamInfoImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginInviteTeam) */ {
 public:
  TeamAckLoginInviteTeam();
  virtual ~TeamAckLoginInviteTeam();

  TeamAckLoginInviteTeam(const TeamAckLoginInviteTeam& from);

  inline TeamAckLoginInviteTeam& operator=(const TeamAckLoginInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginInviteTeam(TeamAckLoginInviteTeam&& from) noexcept
    : TeamAckLoginInviteTeam() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginInviteTeam& operator=(TeamAckLoginInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginInviteTeam* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginInviteTeam*>(
               &_TeamAckLoginInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(TeamAckLoginInviteTeam* other);
  friend void swap(TeamAckLoginInviteTeam& a, TeamAckLoginInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginInviteTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginInviteTeam& from);
  void MergeFrom(const TeamAckLoginInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginInviteTeamImpl();
};
// -------------------------------------------------------------------

class TeamAckLoginChangeSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamAckLoginChangeSlot) */ {
 public:
  TeamAckLoginChangeSlot();
  virtual ~TeamAckLoginChangeSlot();

  TeamAckLoginChangeSlot(const TeamAckLoginChangeSlot& from);

  inline TeamAckLoginChangeSlot& operator=(const TeamAckLoginChangeSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAckLoginChangeSlot(TeamAckLoginChangeSlot&& from) noexcept
    : TeamAckLoginChangeSlot() {
    *this = ::std::move(from);
  }

  inline TeamAckLoginChangeSlot& operator=(TeamAckLoginChangeSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAckLoginChangeSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAckLoginChangeSlot* internal_default_instance() {
    return reinterpret_cast<const TeamAckLoginChangeSlot*>(
               &_TeamAckLoginChangeSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TeamAckLoginChangeSlot* other);
  friend void swap(TeamAckLoginChangeSlot& a, TeamAckLoginChangeSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAckLoginChangeSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamAckLoginChangeSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamAckLoginChangeSlot& from);
  void MergeFrom(const TeamAckLoginChangeSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamAckLoginChangeSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // uint32 dw_slot = 2;
  void clear_dw_slot();
  static const int kDwSlotFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot() const;
  void set_dw_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamAckLoginChangeSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  ::google::protobuf::uint32 dw_slot_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginChangeSlotImpl();
};
// -------------------------------------------------------------------

class GameNotifyGameManagerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameNotifyGameManagerInfo) */ {
 public:
  GameNotifyGameManagerInfo();
  virtual ~GameNotifyGameManagerInfo();

  GameNotifyGameManagerInfo(const GameNotifyGameManagerInfo& from);

  inline GameNotifyGameManagerInfo& operator=(const GameNotifyGameManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameNotifyGameManagerInfo(GameNotifyGameManagerInfo&& from) noexcept
    : GameNotifyGameManagerInfo() {
    *this = ::std::move(from);
  }

  inline GameNotifyGameManagerInfo& operator=(GameNotifyGameManagerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotifyGameManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameNotifyGameManagerInfo* internal_default_instance() {
    return reinterpret_cast<const GameNotifyGameManagerInfo*>(
               &_GameNotifyGameManagerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GameNotifyGameManagerInfo* other);
  friend void swap(GameNotifyGameManagerInfo& a, GameNotifyGameManagerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameNotifyGameManagerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameNotifyGameManagerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameNotifyGameManagerInfo& from);
  void MergeFrom(const GameNotifyGameManagerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameNotifyGameManagerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_player_port = 1;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 1;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 2;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint64 qw_player_point = 4;
  void clear_qw_player_point();
  static const int kQwPlayerPointFieldNumber = 4;
  ::google::protobuf::uint64 qw_player_point() const;
  void set_qw_player_point(::google::protobuf::uint64 value);

  // uint32 dw_slave_server_port = 3;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameNotifyGameManagerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint64 qw_player_point_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfoImpl();
};
// -------------------------------------------------------------------

class GameManagerAckGameInfoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameManagerAckGameInfoResult) */ {
 public:
  GameManagerAckGameInfoResult();
  virtual ~GameManagerAckGameInfoResult();

  GameManagerAckGameInfoResult(const GameManagerAckGameInfoResult& from);

  inline GameManagerAckGameInfoResult& operator=(const GameManagerAckGameInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameManagerAckGameInfoResult(GameManagerAckGameInfoResult&& from) noexcept
    : GameManagerAckGameInfoResult() {
    *this = ::std::move(from);
  }

  inline GameManagerAckGameInfoResult& operator=(GameManagerAckGameInfoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameManagerAckGameInfoResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameManagerAckGameInfoResult* internal_default_instance() {
    return reinterpret_cast<const GameManagerAckGameInfoResult*>(
               &_GameManagerAckGameInfoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GameManagerAckGameInfoResult* other);
  friend void swap(GameManagerAckGameInfoResult& a, GameManagerAckGameInfoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameManagerAckGameInfoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GameManagerAckGameInfoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameManagerAckGameInfoResult& from);
  void MergeFrom(const GameManagerAckGameInfoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameManagerAckGameInfoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameManagerAckGameInfoResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResultImpl();
};
// -------------------------------------------------------------------

class PlayerRequestGameManagerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestGameManagerInfo) */ {
 public:
  PlayerRequestGameManagerInfo();
  virtual ~PlayerRequestGameManagerInfo();

  PlayerRequestGameManagerInfo(const PlayerRequestGameManagerInfo& from);

  inline PlayerRequestGameManagerInfo& operator=(const PlayerRequestGameManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestGameManagerInfo(PlayerRequestGameManagerInfo&& from) noexcept
    : PlayerRequestGameManagerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerRequestGameManagerInfo& operator=(PlayerRequestGameManagerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestGameManagerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestGameManagerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestGameManagerInfo*>(
               &_PlayerRequestGameManagerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PlayerRequestGameManagerInfo* other);
  friend void swap(PlayerRequestGameManagerInfo& a, PlayerRequestGameManagerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestGameManagerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestGameManagerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestGameManagerInfo& from);
  void MergeFrom(const PlayerRequestGameManagerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestGameManagerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_result = 1;
  void clear_dw_result();
  static const int kDwResultFieldNumber = 1;
  ::google::protobuf::uint32 dw_result() const;
  void set_dw_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestGameManagerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfoImpl();
};
// -------------------------------------------------------------------

class GameManagerAckPlayerInfoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameManagerAckPlayerInfoResult) */ {
 public:
  GameManagerAckPlayerInfoResult();
  virtual ~GameManagerAckPlayerInfoResult();

  GameManagerAckPlayerInfoResult(const GameManagerAckPlayerInfoResult& from);

  inline GameManagerAckPlayerInfoResult& operator=(const GameManagerAckPlayerInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameManagerAckPlayerInfoResult(GameManagerAckPlayerInfoResult&& from) noexcept
    : GameManagerAckPlayerInfoResult() {
    *this = ::std::move(from);
  }

  inline GameManagerAckPlayerInfoResult& operator=(GameManagerAckPlayerInfoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameManagerAckPlayerInfoResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameManagerAckPlayerInfoResult* internal_default_instance() {
    return reinterpret_cast<const GameManagerAckPlayerInfoResult*>(
               &_GameManagerAckPlayerInfoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GameManagerAckPlayerInfoResult* other);
  friend void swap(GameManagerAckPlayerInfoResult& a, GameManagerAckPlayerInfoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameManagerAckPlayerInfoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GameManagerAckPlayerInfoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameManagerAckPlayerInfoResult& from);
  void MergeFrom(const GameManagerAckPlayerInfoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameManagerAckPlayerInfoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_player_port = 1;
  void clear_dw_player_port();
  static const int kDwPlayerPortFieldNumber = 1;
  ::google::protobuf::uint32 dw_player_port() const;
  void set_dw_player_port(::google::protobuf::uint32 value);

  // uint32 dw_server_port = 2;
  void clear_dw_server_port();
  static const int kDwServerPortFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_port() const;
  void set_dw_server_port(::google::protobuf::uint32 value);

  // uint32 dw_slave_server_port = 3;
  void clear_dw_slave_server_port();
  static const int kDwSlaveServerPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_slave_server_port() const;
  void set_dw_slave_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameManagerAckPlayerInfoResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_player_port_;
  ::google::protobuf::uint32 dw_server_port_;
  ::google::protobuf::uint32 dw_slave_server_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResultImpl();
};
// -------------------------------------------------------------------

class PlayerRequestGameTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerRequestGameTest) */ {
 public:
  PlayerRequestGameTest();
  virtual ~PlayerRequestGameTest();

  PlayerRequestGameTest(const PlayerRequestGameTest& from);

  inline PlayerRequestGameTest& operator=(const PlayerRequestGameTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRequestGameTest(PlayerRequestGameTest&& from) noexcept
    : PlayerRequestGameTest() {
    *this = ::std::move(from);
  }

  inline PlayerRequestGameTest& operator=(PlayerRequestGameTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRequestGameTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerRequestGameTest* internal_default_instance() {
    return reinterpret_cast<const PlayerRequestGameTest*>(
               &_PlayerRequestGameTest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PlayerRequestGameTest* other);
  friend void swap(PlayerRequestGameTest& a, PlayerRequestGameTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRequestGameTest* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRequestGameTest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRequestGameTest& from);
  void MergeFrom(const PlayerRequestGameTest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRequestGameTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_test = 1;
  void clear_sz_test();
  static const int kSzTestFieldNumber = 1;
  const ::std::string& sz_test() const;
  void set_sz_test(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_test(::std::string&& value);
  #endif
  void set_sz_test(const char* value);
  void set_sz_test(const char* value, size_t size);
  ::std::string* mutable_sz_test();
  ::std::string* release_sz_test();
  void set_allocated_sz_test(::std::string* sz_test);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerRequestGameTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_test_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTestImpl();
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_listen_ip = 2;
  void clear_sz_listen_ip();
  static const int kSzListenIpFieldNumber = 2;
  const ::std::string& sz_listen_ip() const;
  void set_sz_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_listen_ip(::std::string&& value);
  #endif
  void set_sz_listen_ip(const char* value);
  void set_sz_listen_ip(const char* value, size_t size);
  ::std::string* mutable_sz_listen_ip();
  ::std::string* release_sz_listen_ip();
  void set_allocated_sz_listen_ip(::std::string* sz_listen_ip);

  // uint32 dw_server_id = 1;
  void clear_dw_server_id();
  static const int kDwServerIdFieldNumber = 1;
  ::google::protobuf::uint32 dw_server_id() const;
  void set_dw_server_id(::google::protobuf::uint32 value);

  // uint32 dw_team_port = 3;
  void clear_dw_team_port();
  static const int kDwTeamPortFieldNumber = 3;
  ::google::protobuf::uint32 dw_team_port() const;
  void set_dw_team_port(::google::protobuf::uint32 value);

  // uint32 dw_game_server_manager_port = 4;
  void clear_dw_game_server_manager_port();
  static const int kDwGameServerManagerPortFieldNumber = 4;
  ::google::protobuf::uint32 dw_game_server_manager_port() const;
  void set_dw_game_server_manager_port(::google::protobuf::uint32 value);

  // uint32 dw_login_port = 5;
  void clear_dw_login_port();
  static const int kDwLoginPortFieldNumber = 5;
  ::google::protobuf::uint32 dw_login_port() const;
  void set_dw_login_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_listen_ip_;
  ::google::protobuf::uint32 dw_server_id_;
  ::google::protobuf::uint32 dw_team_port_;
  ::google::protobuf::uint32 dw_game_server_manager_port_;
  ::google::protobuf::uint32 dw_login_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fgame_2eproto::TableStruct;
  friend void ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerRequestLogin

// uint64 qw_player_id = 1;
inline void PlayerRequestLogin::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayerRequestLogin::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.qw_player_id)
  return qw_player_id_;
}
inline void PlayerRequestLogin::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.qw_player_id)
}

// string sz_nick_name = 2;
inline void PlayerRequestLogin::clear_sz_nick_name() {
  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_nick_name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_nick_name)
  return sz_nick_name_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_nick_name(const ::std::string& value) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_nick_name)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_nick_name(::std::string&& value) {
  
  sz_nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_nick_name)
}
#endif
inline void PlayerRequestLogin::set_sz_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_nick_name)
}
inline void PlayerRequestLogin::set_sz_nick_name(const char* value, size_t size) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_nick_name)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_nick_name)
  return sz_nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_nick_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_nick_name)
  
  return sz_nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_nick_name(::std::string* sz_nick_name) {
  if (sz_nick_name != NULL) {
    
  } else {
    
  }
  sz_nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_nick_name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_nick_name)
}

// string sz_avatar = 3;
inline void PlayerRequestLogin::clear_sz_avatar() {
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_avatar() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_avatar)
  return sz_avatar_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_avatar(const ::std::string& value) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_avatar)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_avatar(::std::string&& value) {
  
  sz_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_avatar)
}
#endif
inline void PlayerRequestLogin::set_sz_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_avatar)
}
inline void PlayerRequestLogin::set_sz_avatar(const char* value, size_t size) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_avatar)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_avatar() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_avatar)
  return sz_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_avatar() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_avatar)
  
  return sz_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_avatar(::std::string* sz_avatar) {
  if (sz_avatar != NULL) {
    
  } else {
    
  }
  sz_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_avatar);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_avatar)
}

// uint32 dw_sex = 4;
inline void PlayerRequestLogin::clear_dw_sex() {
  dw_sex_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLogin::dw_sex() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.dw_sex)
  return dw_sex_;
}
inline void PlayerRequestLogin::set_dw_sex(::google::protobuf::uint32 value) {
  
  dw_sex_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.dw_sex)
}

// uint32 dw_balance = 5;
inline void PlayerRequestLogin::clear_dw_balance() {
  dw_balance_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLogin::dw_balance() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.dw_balance)
  return dw_balance_;
}
inline void PlayerRequestLogin::set_dw_balance(::google::protobuf::uint32 value) {
  
  dw_balance_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.dw_balance)
}

// string sz_token = 6;
inline void PlayerRequestLogin::clear_sz_token() {
  sz_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestLogin::sz_token() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLogin.sz_token)
  return sz_token_.GetNoArena();
}
inline void PlayerRequestLogin::set_sz_token(const ::std::string& value) {
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLogin.sz_token)
}
#if LANG_CXX11
inline void PlayerRequestLogin::set_sz_token(::std::string&& value) {
  
  sz_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestLogin.sz_token)
}
#endif
inline void PlayerRequestLogin::set_sz_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestLogin.sz_token)
}
inline void PlayerRequestLogin::set_sz_token(const char* value, size_t size) {
  
  sz_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestLogin.sz_token)
}
inline ::std::string* PlayerRequestLogin::mutable_sz_token() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestLogin.sz_token)
  return sz_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestLogin::release_sz_token() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestLogin.sz_token)
  
  return sz_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestLogin::set_allocated_sz_token(::std::string* sz_token) {
  if (sz_token != NULL) {
    
  } else {
    
  }
  sz_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_token);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestLogin.sz_token)
}

// -------------------------------------------------------------------

// PlayerRequestLoginMakeTeam

// -------------------------------------------------------------------

// PlayerRequestLoginInviteTeam

// repeated uint64 qw_player_id = 1;
inline int PlayerRequestLoginInviteTeam::qw_player_id_size() const {
  return qw_player_id_.size();
}
inline void PlayerRequestLoginInviteTeam::clear_qw_player_id() {
  qw_player_id_.Clear();
}
inline ::google::protobuf::uint64 PlayerRequestLoginInviteTeam::qw_player_id(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
  return qw_player_id_.Get(index);
}
inline void PlayerRequestLoginInviteTeam::set_qw_player_id(int index, ::google::protobuf::uint64 value) {
  qw_player_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
}
inline void PlayerRequestLoginInviteTeam::add_qw_player_id(::google::protobuf::uint64 value) {
  qw_player_id_.Add(value);
  // @@protoc_insertion_point(field_add:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PlayerRequestLoginInviteTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_list:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
  return qw_player_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PlayerRequestLoginInviteTeam::mutable_qw_player_id() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.PlayerRequestLoginInviteTeam.qw_player_id)
  return &qw_player_id_;
}

// -------------------------------------------------------------------

// PlayerRequestLoginChangeSlot

// uint32 dw_slot_id = 1;
inline void PlayerRequestLoginChangeSlot::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestLoginChangeSlot::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestLoginChangeSlot.dw_slot_id)
  return dw_slot_id_;
}
inline void PlayerRequestLoginChangeSlot::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestLoginChangeSlot.dw_slot_id)
}

// -------------------------------------------------------------------

// LoginAckPlayerLoginResult

// uint32 dw_result = 1;
inline void LoginAckPlayerLoginResult::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerLoginResult::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerLoginResult.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerLoginResult::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerLoginResult.dw_result)
}

// -------------------------------------------------------------------

// LoginAckPlayerMakeTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerMakeTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerMakeTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerMakeTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerMakeTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerMakeTeam.dw_result)
}

// uint64 qw_team_id = 2;
inline void LoginAckPlayerMakeTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAckPlayerMakeTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerMakeTeam.qw_team_id)
  return qw_team_id_;
}
inline void LoginAckPlayerMakeTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerMakeTeam.qw_team_id)
}

// -------------------------------------------------------------------

// LoginNotifyPlayerTeamInfo

// repeated .GameProto.TeamRoleData team_role_data = 1;
inline int LoginNotifyPlayerTeamInfo::team_role_data_size() const {
  return team_role_data_.size();
}
inline const ::GameProto::TeamRoleData& LoginNotifyPlayerTeamInfo::team_role_data(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Get(index);
}
inline ::GameProto::TeamRoleData* LoginNotifyPlayerTeamInfo::mutable_team_role_data(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Mutable(index);
}
inline ::GameProto::TeamRoleData* LoginNotifyPlayerTeamInfo::add_team_role_data() {
  // @@protoc_insertion_point(field_add:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
LoginNotifyPlayerTeamInfo::mutable_team_role_data() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return &team_role_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
LoginNotifyPlayerTeamInfo::team_role_data() const {
  // @@protoc_insertion_point(field_list:GameProto.LoginNotifyPlayerTeamInfo.team_role_data)
  return team_role_data_;
}

// -------------------------------------------------------------------

// LoginAckPlayerInviteTeam

// uint32 dw_result = 1;
inline void LoginAckPlayerInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerInviteTeam.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerInviteTeam.dw_result)
}

// -------------------------------------------------------------------

// LoginAckPlayerChangeSlot

// uint32 dw_result = 1;
inline void LoginAckPlayerChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginAckPlayerChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginAckPlayerChangeSlot.dw_result)
  return dw_result_;
}
inline void LoginAckPlayerChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginAckPlayerChangeSlot.dw_result)
}

// -------------------------------------------------------------------

// LoginRequestTeamMakeTeam

// uint64 qw_player_id = 1;
inline void LoginRequestTeamMakeTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginRequestTeamMakeTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamMakeTeam.qw_player_id)
  return qw_player_id_;
}
inline void LoginRequestTeamMakeTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamMakeTeam.qw_player_id)
}

// .GameProto.RoleData role_data = 2;
inline bool LoginRequestTeamMakeTeam::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline const ::GameProto::RoleData& LoginRequestTeamMakeTeam::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamMakeTeam.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* LoginRequestTeamMakeTeam::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.LoginRequestTeamMakeTeam.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* LoginRequestTeamMakeTeam::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.LoginRequestTeamMakeTeam.role_data)
  return role_data_;
}
inline void LoginRequestTeamMakeTeam::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(role_data_);
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.LoginRequestTeamMakeTeam.role_data)
}

// -------------------------------------------------------------------

// LoginRequestTeamInviteTeam

// uint32 dw_result = 1;
inline void LoginRequestTeamInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamInviteTeam.dw_result)
  return dw_result_;
}
inline void LoginRequestTeamInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamInviteTeam.dw_result)
}

// uint32 dw_slot = 2;
inline void LoginRequestTeamInviteTeam::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamInviteTeam::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamInviteTeam.dw_slot)
  return dw_slot_;
}
inline void LoginRequestTeamInviteTeam::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamInviteTeam.dw_slot)
}

// -------------------------------------------------------------------

// LoginRequestTeamChangeSlot

// uint32 dw_result = 1;
inline void LoginRequestTeamChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamChangeSlot.dw_result)
  return dw_result_;
}
inline void LoginRequestTeamChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamChangeSlot.dw_result)
}

// uint32 dw_slot = 2;
inline void LoginRequestTeamChangeSlot::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequestTeamChangeSlot::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.LoginRequestTeamChangeSlot.dw_slot)
  return dw_slot_;
}
inline void LoginRequestTeamChangeSlot::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.LoginRequestTeamChangeSlot.dw_slot)
}

// -------------------------------------------------------------------

// TeamAckLoginMakeTeam

// uint32 dw_result = 1;
inline void TeamAckLoginMakeTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginMakeTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.dw_result)
  return dw_result_;
}
inline void TeamAckLoginMakeTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.dw_result)
}

// uint64 qw_player_id = 2;
inline void TeamAckLoginMakeTeam::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginMakeTeam::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.qw_player_id)
  return qw_player_id_;
}
inline void TeamAckLoginMakeTeam::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.qw_player_id)
}

// uint64 qw_team_id = 3;
inline void TeamAckLoginMakeTeam::clear_qw_team_id() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TeamAckLoginMakeTeam::qw_team_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginMakeTeam.qw_team_id)
  return qw_team_id_;
}
inline void TeamAckLoginMakeTeam::set_qw_team_id(::google::protobuf::uint64 value) {
  
  qw_team_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginMakeTeam.qw_team_id)
}

// -------------------------------------------------------------------

// TeamNotifyLoginTeamInfo

// repeated .GameProto.TeamRoleData team_role_data = 1;
inline int TeamNotifyLoginTeamInfo::team_role_data_size() const {
  return team_role_data_.size();
}
inline const ::GameProto::TeamRoleData& TeamNotifyLoginTeamInfo::team_role_data(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Get(index);
}
inline ::GameProto::TeamRoleData* TeamNotifyLoginTeamInfo::mutable_team_role_data(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Mutable(index);
}
inline ::GameProto::TeamRoleData* TeamNotifyLoginTeamInfo::add_team_role_data() {
  // @@protoc_insertion_point(field_add:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >*
TeamNotifyLoginTeamInfo::mutable_team_role_data() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return &team_role_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::TeamRoleData >&
TeamNotifyLoginTeamInfo::team_role_data() const {
  // @@protoc_insertion_point(field_list:GameProto.TeamNotifyLoginTeamInfo.team_role_data)
  return team_role_data_;
}

// -------------------------------------------------------------------

// TeamAckLoginInviteTeam

// uint32 dw_result = 1;
inline void TeamAckLoginInviteTeam::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginInviteTeam::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginInviteTeam.dw_result)
  return dw_result_;
}
inline void TeamAckLoginInviteTeam::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginInviteTeam.dw_result)
}

// uint32 dw_slot = 2;
inline void TeamAckLoginInviteTeam::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginInviteTeam::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginInviteTeam.dw_slot)
  return dw_slot_;
}
inline void TeamAckLoginInviteTeam::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginInviteTeam.dw_slot)
}

// -------------------------------------------------------------------

// TeamAckLoginChangeSlot

// uint32 dw_result = 1;
inline void TeamAckLoginChangeSlot::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginChangeSlot::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginChangeSlot.dw_result)
  return dw_result_;
}
inline void TeamAckLoginChangeSlot::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginChangeSlot.dw_result)
}

// uint32 dw_slot = 2;
inline void TeamAckLoginChangeSlot::clear_dw_slot() {
  dw_slot_ = 0u;
}
inline ::google::protobuf::uint32 TeamAckLoginChangeSlot::dw_slot() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamAckLoginChangeSlot.dw_slot)
  return dw_slot_;
}
inline void TeamAckLoginChangeSlot::set_dw_slot(::google::protobuf::uint32 value) {
  
  dw_slot_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamAckLoginChangeSlot.dw_slot)
}

// -------------------------------------------------------------------

// GameNotifyGameManagerInfo

// uint32 dw_player_port = 1;
inline void GameNotifyGameManagerInfo::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_player_port)
  return dw_player_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_player_port)
}

// uint32 dw_server_port = 2;
inline void GameNotifyGameManagerInfo::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_server_port)
  return dw_server_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_server_port)
}

// uint32 dw_slave_server_port = 3;
inline void GameNotifyGameManagerInfo::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameNotifyGameManagerInfo::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void GameNotifyGameManagerInfo::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.dw_slave_server_port)
}

// uint64 qw_player_point = 4;
inline void GameNotifyGameManagerInfo::clear_qw_player_point() {
  qw_player_point_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameNotifyGameManagerInfo::qw_player_point() const {
  // @@protoc_insertion_point(field_get:GameProto.GameNotifyGameManagerInfo.qw_player_point)
  return qw_player_point_;
}
inline void GameNotifyGameManagerInfo::set_qw_player_point(::google::protobuf::uint64 value) {
  
  qw_player_point_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameNotifyGameManagerInfo.qw_player_point)
}

// -------------------------------------------------------------------

// GameManagerAckGameInfoResult

// uint32 dw_result = 1;
inline void GameManagerAckGameInfoResult::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckGameInfoResult::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckGameInfoResult.dw_result)
  return dw_result_;
}
inline void GameManagerAckGameInfoResult::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckGameInfoResult.dw_result)
}

// -------------------------------------------------------------------

// PlayerRequestGameManagerInfo

// uint32 dw_result = 1;
inline void PlayerRequestGameManagerInfo::clear_dw_result() {
  dw_result_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRequestGameManagerInfo::dw_result() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestGameManagerInfo.dw_result)
  return dw_result_;
}
inline void PlayerRequestGameManagerInfo::set_dw_result(::google::protobuf::uint32 value) {
  
  dw_result_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestGameManagerInfo.dw_result)
}

// -------------------------------------------------------------------

// GameManagerAckPlayerInfoResult

// uint32 dw_player_port = 1;
inline void GameManagerAckPlayerInfoResult::clear_dw_player_port() {
  dw_player_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_player_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_player_port)
  return dw_player_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_player_port(::google::protobuf::uint32 value) {
  
  dw_player_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_player_port)
}

// uint32 dw_server_port = 2;
inline void GameManagerAckPlayerInfoResult::clear_dw_server_port() {
  dw_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_server_port)
  return dw_server_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_server_port(::google::protobuf::uint32 value) {
  
  dw_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_server_port)
}

// uint32 dw_slave_server_port = 3;
inline void GameManagerAckPlayerInfoResult::clear_dw_slave_server_port() {
  dw_slave_server_port_ = 0u;
}
inline ::google::protobuf::uint32 GameManagerAckPlayerInfoResult::dw_slave_server_port() const {
  // @@protoc_insertion_point(field_get:GameProto.GameManagerAckPlayerInfoResult.dw_slave_server_port)
  return dw_slave_server_port_;
}
inline void GameManagerAckPlayerInfoResult::set_dw_slave_server_port(::google::protobuf::uint32 value) {
  
  dw_slave_server_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameManagerAckPlayerInfoResult.dw_slave_server_port)
}

// -------------------------------------------------------------------

// PlayerRequestGameTest

// string sz_test = 1;
inline void PlayerRequestGameTest::clear_sz_test() {
  sz_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerRequestGameTest::sz_test() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerRequestGameTest.sz_test)
  return sz_test_.GetNoArena();
}
inline void PlayerRequestGameTest::set_sz_test(const ::std::string& value) {
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerRequestGameTest.sz_test)
}
#if LANG_CXX11
inline void PlayerRequestGameTest::set_sz_test(::std::string&& value) {
  
  sz_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerRequestGameTest.sz_test)
}
#endif
inline void PlayerRequestGameTest::set_sz_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerRequestGameTest.sz_test)
}
inline void PlayerRequestGameTest::set_sz_test(const char* value, size_t size) {
  
  sz_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerRequestGameTest.sz_test)
}
inline ::std::string* PlayerRequestGameTest::mutable_sz_test() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerRequestGameTest.sz_test)
  return sz_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerRequestGameTest::release_sz_test() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerRequestGameTest.sz_test)
  
  return sz_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerRequestGameTest::set_allocated_sz_test(::std::string* sz_test) {
  if (sz_test != NULL) {
    
  } else {
    
  }
  sz_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_test);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerRequestGameTest.sz_test)
}

// -------------------------------------------------------------------

// ServerInfo

// uint32 dw_server_id = 1;
inline void ServerInfo::clear_dw_server_id() {
  dw_server_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_server_id)
  return dw_server_id_;
}
inline void ServerInfo::set_dw_server_id(::google::protobuf::uint32 value) {
  
  dw_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_server_id)
}

// string sz_listen_ip = 2;
inline void ServerInfo::clear_sz_listen_ip() {
  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::sz_listen_ip() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.sz_listen_ip)
  return sz_listen_ip_.GetNoArena();
}
inline void ServerInfo::set_sz_listen_ip(const ::std::string& value) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.sz_listen_ip)
}
#if LANG_CXX11
inline void ServerInfo::set_sz_listen_ip(::std::string&& value) {
  
  sz_listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ServerInfo.sz_listen_ip)
}
#endif
inline void ServerInfo::set_sz_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerInfo.sz_listen_ip)
}
inline void ServerInfo::set_sz_listen_ip(const char* value, size_t size) {
  
  sz_listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerInfo.sz_listen_ip)
}
inline ::std::string* ServerInfo::mutable_sz_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerInfo.sz_listen_ip)
  return sz_listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_sz_listen_ip() {
  // @@protoc_insertion_point(field_release:GameProto.ServerInfo.sz_listen_ip)
  
  return sz_listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_sz_listen_ip(::std::string* sz_listen_ip) {
  if (sz_listen_ip != NULL) {
    
  } else {
    
  }
  sz_listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_listen_ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerInfo.sz_listen_ip)
}

// uint32 dw_team_port = 3;
inline void ServerInfo::clear_dw_team_port() {
  dw_team_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_team_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_team_port)
  return dw_team_port_;
}
inline void ServerInfo::set_dw_team_port(::google::protobuf::uint32 value) {
  
  dw_team_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_team_port)
}

// uint32 dw_game_server_manager_port = 4;
inline void ServerInfo::clear_dw_game_server_manager_port() {
  dw_game_server_manager_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_game_server_manager_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_game_server_manager_port)
  return dw_game_server_manager_port_;
}
inline void ServerInfo::set_dw_game_server_manager_port(::google::protobuf::uint32 value) {
  
  dw_game_server_manager_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_game_server_manager_port)
}

// uint32 dw_login_port = 5;
inline void ServerInfo::clear_dw_login_port() {
  dw_login_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::dw_login_port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerInfo.dw_login_port)
  return dw_login_port_;
}
inline void ServerInfo::set_dw_login_port(::google::protobuf::uint32 value) {
  
  dw_login_port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerInfo.dw_login_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameProto::EServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EServerType>() {
  return ::GameProto::EServerType_descriptor();
}
template <> struct is_proto_enum< ::GameProto::ETeamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ETeamType>() {
  return ::GameProto::ETeamType_descriptor();
}
template <> struct is_proto_enum< ::GameProto::EErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EErrorCode>() {
  return ::GameProto::EErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_web_5fgame_2eproto__INCLUDED
