// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_data.proto

#include "web_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace GameProto {
class RoleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleData>
      _instance;
} _RoleData_default_instance_;
class TeamRoleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamRoleData>
      _instance;
} _TeamRoleData_default_instance_;
class GameCommonRoleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCommonRoleData>
      _instance;
} _GameCommonRoleData_default_instance_;
class OnlineRoleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnlineRoleData>
      _instance;
} _OnlineRoleData_default_instance_;
class GameConfigBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameConfigBase>
      _instance;
} _GameConfigBase_default_instance_;
class GameConfigCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameConfigCommon>
      _instance;
} _GameConfigCommon_default_instance_;
class GameSceneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSceneInfo>
      _instance;
} _GameSceneInfo_default_instance_;
class GameCommonSceneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCommonSceneInfo>
      _instance;
} _GameCommonSceneInfo_default_instance_;
class TetrisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tetris>
      _instance;
} _Tetris_default_instance_;
}  // namespace GameProto
namespace protobuf_web_5fdata_2eproto {
void InitDefaultsRoleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_RoleData_default_instance_;
    new (ptr) ::GameProto::RoleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::RoleData::InitAsDefaultInstance();
}

void InitDefaultsRoleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleDataImpl);
}

void InitDefaultsTeamRoleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  {
    void* ptr = &::GameProto::_TeamRoleData_default_instance_;
    new (ptr) ::GameProto::TeamRoleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamRoleData::InitAsDefaultInstance();
}

void InitDefaultsTeamRoleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamRoleDataImpl);
}

void InitDefaultsGameCommonRoleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  {
    void* ptr = &::GameProto::_GameCommonRoleData_default_instance_;
    new (ptr) ::GameProto::GameCommonRoleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameCommonRoleData::InitAsDefaultInstance();
}

void InitDefaultsGameCommonRoleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCommonRoleDataImpl);
}

void InitDefaultsOnlineRoleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  {
    void* ptr = &::GameProto::_OnlineRoleData_default_instance_;
    new (ptr) ::GameProto::OnlineRoleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::OnlineRoleData::InitAsDefaultInstance();
}

void InitDefaultsOnlineRoleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOnlineRoleDataImpl);
}

void InitDefaultsGameConfigBaseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameConfigBase_default_instance_;
    new (ptr) ::GameProto::GameConfigBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameConfigBase::InitAsDefaultInstance();
}

void InitDefaultsGameConfigBase() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameConfigBaseImpl);
}

void InitDefaultsGameConfigCommonImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsGameConfigBase();
  {
    void* ptr = &::GameProto::_GameConfigCommon_default_instance_;
    new (ptr) ::GameProto::GameConfigCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameConfigCommon::InitAsDefaultInstance();
}

void InitDefaultsGameConfigCommon() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameConfigCommonImpl);
}

void InitDefaultsGameSceneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameSceneInfo_default_instance_;
    new (ptr) ::GameProto::GameSceneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameSceneInfo::InitAsDefaultInstance();
}

void InitDefaultsGameSceneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameSceneInfoImpl);
}

void InitDefaultsGameCommonSceneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsGameSceneInfo();
  {
    void* ptr = &::GameProto::_GameCommonSceneInfo_default_instance_;
    new (ptr) ::GameProto::GameCommonSceneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameCommonSceneInfo::InitAsDefaultInstance();
}

void InitDefaultsGameCommonSceneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCommonSceneInfoImpl);
}

void InitDefaultsTetrisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_Tetris_default_instance_;
    new (ptr) ::GameProto::Tetris();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::Tetris::InitAsDefaultInstance();
}

void InitDefaultsTetris() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTetrisImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::RoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::RoleData, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::RoleData, sz_nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::RoleData, sz_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::RoleData, dw_sex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRoleData, role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRoleData, dw_slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRoleData, dw_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameCommonRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameCommonRoleData, role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameCommonRoleData, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::OnlineRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::OnlineRoleData, role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::OnlineRoleData, dw_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigBase, dw_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigBase, dw_prepare_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigBase, dw_game_ready_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigBase, f_suspend_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameConfigCommon, base_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameSceneInfo, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameCommonSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameCommonSceneInfo, scene_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, dw_tetris_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, dw_tetris_direct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, dw_tetris_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, dw_pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Tetris, dw_pos_y_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameProto::RoleData)},
  { 9, -1, sizeof(::GameProto::TeamRoleData)},
  { 17, -1, sizeof(::GameProto::GameCommonRoleData)},
  { 24, -1, sizeof(::GameProto::OnlineRoleData)},
  { 31, -1, sizeof(::GameProto::GameConfigBase)},
  { 40, -1, sizeof(::GameProto::GameConfigCommon)},
  { 46, -1, sizeof(::GameProto::GameSceneInfo)},
  { 52, -1, sizeof(::GameProto::GameCommonSceneInfo)},
  { 58, -1, sizeof(::GameProto::Tetris)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_RoleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamRoleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameCommonRoleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_OnlineRoleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameConfigBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameConfigCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameSceneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameCommonSceneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_Tetris_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "web_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016web_data.proto\022\tGameProto\"Y\n\010RoleData\022"
      "\024\n\014qw_player_id\030\001 \001(\004\022\024\n\014sz_nick_name\030\002 "
      "\001(\t\022\021\n\tsz_avatar\030\003 \001(\t\022\016\n\006dw_sex\030\004 \001(\r\"`"
      "\n\014TeamRoleData\022&\n\trole_data\030\001 \001(\0132\023.Game"
      "Proto.RoleData\022\022\n\ndw_slot_id\030\002 \001(\r\022\024\n\014dw"
      "_server_id\030\003 \001(\r\"P\n\022GameCommonRoleData\022&"
      "\n\trole_data\030\001 \001(\0132\023.GameProto.RoleData\022\022"
      "\n\ndw_slot_id\030\002 \001(\r\"N\n\016OnlineRoleData\022&\n\t"
      "role_data\030\001 \001(\0132\023.GameProto.RoleData\022\024\n\014"
      "dw_server_id\030\002 \001(\r\"s\n\016GameConfigBase\022\024\n\014"
      "dw_game_type\030\001 \001(\r\022\027\n\017dw_prepare_time\030\002 "
      "\001(\r\022\032\n\022dw_game_ready_time\030\003 \001(\r\022\026\n\016f_sus"
      "pend_time\030\004 \001(\002\"B\n\020GameConfigCommon\022.\n\013b"
      "ase_config\030\001 \001(\0132\031.GameProto.GameConfigB"
      "ase\":\n\rGameSceneInfo\022)\n\005state\030\001 \001(\0162\032.Ga"
      "meProto.EGameSceneState\"C\n\023GameCommonSce"
      "neInfo\022,\n\nscene_info\030\001 \001(\0132\030.GameProto.G"
      "ameSceneInfo\"x\n\006Tetris\022\027\n\017dw_tetris_shap"
      "e\030\001 \001(\r\022\030\n\020dw_tetris_direct\030\002 \001(\r\022\027\n\017dw_"
      "tetris_color\030\003 \001(\r\022\020\n\010dw_pos_x\030\004 \001(\005\022\020\n\010"
      "dw_pos_y\030\005 \001(\005*\'\n\tEGameType\022\013\n\007GT_None\020\000"
      "\022\r\n\tGT_Common\020\001*e\n\017EGameSceneState\022\014\n\010ES"
      "S_None\020\000\022\017\n\013ESS_Prepare\020\001\022\021\n\rESS_GameRea"
      "dy\020\n\022\016\n\nESS_Gaming\020\024\022\020\n\014ESS_Transact\020\036b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 966);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "web_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_web_5fdata_2eproto
namespace GameProto {
const ::google::protobuf::EnumDescriptor* EGameType_descriptor() {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool EGameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameSceneState_descriptor() {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fdata_2eproto::file_level_enum_descriptors[1];
}
bool EGameSceneState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RoleData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleData::kQwPlayerIdFieldNumber;
const int RoleData::kSzNickNameFieldNumber;
const int RoleData::kSzAvatarFieldNumber;
const int RoleData::kDwSexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleData::RoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.RoleData)
}
RoleData::RoleData(const RoleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_nick_name().size() > 0) {
    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_avatar().size() > 0) {
    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_sex_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_sex_));
  // @@protoc_insertion_point(copy_constructor:GameProto.RoleData)
}

void RoleData::SharedCtor() {
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_sex_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_sex_));
  _cached_size_ = 0;
}

RoleData::~RoleData() {
  // @@protoc_insertion_point(destructor:GameProto.RoleData)
  SharedDtor();
}

void RoleData::SharedDtor() {
  sz_nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleData::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleData& RoleData::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  return *internal_default_instance();
}

RoleData* RoleData::New(::google::protobuf::Arena* arena) const {
  RoleData* n = new RoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.RoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_sex_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_sex_));
  _internal_metadata_.Clear();
}

bool RoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.RoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_nick_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.RoleData.sz_nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.RoleData.sz_avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_sex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.RoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.RoleData)
  return false;
#undef DO_
}

void RoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.RoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoleData.sz_nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_nick_name(), output);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoleData.sz_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sz_avatar(), output);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_sex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.RoleData)
}

::google::protobuf::uint8* RoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.RoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoleData.sz_nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_nick_name(), target);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoleData.sz_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sz_avatar(), target);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_sex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.RoleData)
  return target;
}

size_t RoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.RoleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_nick_name());
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_avatar());
  }

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_sex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.RoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.RoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.RoleData)
    MergeFrom(*source);
  }
}

void RoleData::MergeFrom(const RoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.RoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_nick_name().size() > 0) {

    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  if (from.sz_avatar().size() > 0) {

    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_sex() != 0) {
    set_dw_sex(from.dw_sex());
  }
}

void RoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleData::CopyFrom(const RoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleData::IsInitialized() const {
  return true;
}

void RoleData::Swap(RoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleData::InternalSwap(RoleData* other) {
  using std::swap;
  sz_nick_name_.Swap(&other->sz_nick_name_);
  sz_avatar_.Swap(&other->sz_avatar_);
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_sex_, other->dw_sex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleData::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamRoleData::InitAsDefaultInstance() {
  ::GameProto::_TeamRoleData_default_instance_._instance.get_mutable()->role_data_ = const_cast< ::GameProto::RoleData*>(
      ::GameProto::RoleData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRoleData::kRoleDataFieldNumber;
const int TeamRoleData::kDwSlotIdFieldNumber;
const int TeamRoleData::kDwServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRoleData::TeamRoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsTeamRoleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamRoleData)
}
TeamRoleData::TeamRoleData(const TeamRoleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role_data()) {
    role_data_ = new ::GameProto::RoleData(*from.role_data_);
  } else {
    role_data_ = NULL;
  }
  ::memcpy(&dw_slot_id_, &from.dw_slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_server_id_) -
    reinterpret_cast<char*>(&dw_slot_id_)) + sizeof(dw_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamRoleData)
}

void TeamRoleData::SharedCtor() {
  ::memset(&role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_server_id_) -
      reinterpret_cast<char*>(&role_data_)) + sizeof(dw_server_id_));
  _cached_size_ = 0;
}

TeamRoleData::~TeamRoleData() {
  // @@protoc_insertion_point(destructor:GameProto.TeamRoleData)
  SharedDtor();
}

void TeamRoleData::SharedDtor() {
  if (this != internal_default_instance()) delete role_data_;
}

void TeamRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRoleData::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRoleData& TeamRoleData::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsTeamRoleData();
  return *internal_default_instance();
}

TeamRoleData* TeamRoleData::New(::google::protobuf::Arena* arena) const {
  TeamRoleData* n = new TeamRoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
  ::memset(&dw_slot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_server_id_) -
      reinterpret_cast<char*>(&dw_slot_id_)) + sizeof(dw_server_id_));
  _internal_metadata_.Clear();
}

bool TeamRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.RoleData role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamRoleData)
  return false;
#undef DO_
}

void TeamRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->role_data_, output);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot_id(), output);
  }

  // uint32 dw_server_id = 3;
  if (this->dw_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamRoleData)
}

::google::protobuf::uint8* TeamRoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->role_data_, deterministic, target);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot_id(), target);
  }

  // uint32 dw_server_id = 3;
  if (this->dw_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamRoleData)
  return target;
}

size_t TeamRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamRoleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_data_);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  // uint32 dw_server_id = 3;
  if (this->dw_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRoleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamRoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamRoleData)
    MergeFrom(*source);
  }
}

void TeamRoleData::MergeFrom(const TeamRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role_data()) {
    mutable_role_data()->::GameProto::RoleData::MergeFrom(from.role_data());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
  if (from.dw_server_id() != 0) {
    set_dw_server_id(from.dw_server_id());
  }
}

void TeamRoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRoleData::CopyFrom(const TeamRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRoleData::IsInitialized() const {
  return true;
}

void TeamRoleData::Swap(TeamRoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRoleData::InternalSwap(TeamRoleData* other) {
  using std::swap;
  swap(role_data_, other->role_data_);
  swap(dw_slot_id_, other->dw_slot_id_);
  swap(dw_server_id_, other->dw_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRoleData::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCommonRoleData::InitAsDefaultInstance() {
  ::GameProto::_GameCommonRoleData_default_instance_._instance.get_mutable()->role_data_ = const_cast< ::GameProto::RoleData*>(
      ::GameProto::RoleData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCommonRoleData::kRoleDataFieldNumber;
const int GameCommonRoleData::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCommonRoleData::GameCommonRoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonRoleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameCommonRoleData)
}
GameCommonRoleData::GameCommonRoleData(const GameCommonRoleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role_data()) {
    role_data_ = new ::GameProto::RoleData(*from.role_data_);
  } else {
    role_data_ = NULL;
  }
  dw_slot_id_ = from.dw_slot_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameCommonRoleData)
}

void GameCommonRoleData::SharedCtor() {
  ::memset(&role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&role_data_)) + sizeof(dw_slot_id_));
  _cached_size_ = 0;
}

GameCommonRoleData::~GameCommonRoleData() {
  // @@protoc_insertion_point(destructor:GameProto.GameCommonRoleData)
  SharedDtor();
}

void GameCommonRoleData::SharedDtor() {
  if (this != internal_default_instance()) delete role_data_;
}

void GameCommonRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCommonRoleData::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCommonRoleData& GameCommonRoleData::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonRoleData();
  return *internal_default_instance();
}

GameCommonRoleData* GameCommonRoleData::New(::google::protobuf::Arena* arena) const {
  GameCommonRoleData* n = new GameCommonRoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCommonRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameCommonRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
  dw_slot_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GameCommonRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameCommonRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.RoleData role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameCommonRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameCommonRoleData)
  return false;
#undef DO_
}

void GameCommonRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameCommonRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->role_data_, output);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameCommonRoleData)
}

::google::protobuf::uint8* GameCommonRoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameCommonRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->role_data_, deterministic, target);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameCommonRoleData)
  return target;
}

size_t GameCommonRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameCommonRoleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_data_);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCommonRoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameCommonRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCommonRoleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCommonRoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameCommonRoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameCommonRoleData)
    MergeFrom(*source);
  }
}

void GameCommonRoleData::MergeFrom(const GameCommonRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameCommonRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role_data()) {
    mutable_role_data()->::GameProto::RoleData::MergeFrom(from.role_data());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
}

void GameCommonRoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameCommonRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommonRoleData::CopyFrom(const GameCommonRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameCommonRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommonRoleData::IsInitialized() const {
  return true;
}

void GameCommonRoleData::Swap(GameCommonRoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCommonRoleData::InternalSwap(GameCommonRoleData* other) {
  using std::swap;
  swap(role_data_, other->role_data_);
  swap(dw_slot_id_, other->dw_slot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCommonRoleData::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OnlineRoleData::InitAsDefaultInstance() {
  ::GameProto::_OnlineRoleData_default_instance_._instance.get_mutable()->role_data_ = const_cast< ::GameProto::RoleData*>(
      ::GameProto::RoleData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlineRoleData::kRoleDataFieldNumber;
const int OnlineRoleData::kDwServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlineRoleData::OnlineRoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsOnlineRoleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.OnlineRoleData)
}
OnlineRoleData::OnlineRoleData(const OnlineRoleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role_data()) {
    role_data_ = new ::GameProto::RoleData(*from.role_data_);
  } else {
    role_data_ = NULL;
  }
  dw_server_id_ = from.dw_server_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.OnlineRoleData)
}

void OnlineRoleData::SharedCtor() {
  ::memset(&role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_server_id_) -
      reinterpret_cast<char*>(&role_data_)) + sizeof(dw_server_id_));
  _cached_size_ = 0;
}

OnlineRoleData::~OnlineRoleData() {
  // @@protoc_insertion_point(destructor:GameProto.OnlineRoleData)
  SharedDtor();
}

void OnlineRoleData::SharedDtor() {
  if (this != internal_default_instance()) delete role_data_;
}

void OnlineRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRoleData::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlineRoleData& OnlineRoleData::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsOnlineRoleData();
  return *internal_default_instance();
}

OnlineRoleData* OnlineRoleData::New(::google::protobuf::Arena* arena) const {
  OnlineRoleData* n = new OnlineRoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlineRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.OnlineRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
  dw_server_id_ = 0u;
  _internal_metadata_.Clear();
}

bool OnlineRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.OnlineRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.RoleData role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.OnlineRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.OnlineRoleData)
  return false;
#undef DO_
}

void OnlineRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.OnlineRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->role_data_, output);
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.OnlineRoleData)
}

::google::protobuf::uint8* OnlineRoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.OnlineRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->role_data_, deterministic, target);
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.OnlineRoleData)
  return target;
}

size_t OnlineRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.OnlineRoleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_data_);
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.OnlineRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineRoleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlineRoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.OnlineRoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.OnlineRoleData)
    MergeFrom(*source);
  }
}

void OnlineRoleData::MergeFrom(const OnlineRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.OnlineRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role_data()) {
    mutable_role_data()->::GameProto::RoleData::MergeFrom(from.role_data());
  }
  if (from.dw_server_id() != 0) {
    set_dw_server_id(from.dw_server_id());
  }
}

void OnlineRoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.OnlineRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRoleData::CopyFrom(const OnlineRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.OnlineRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRoleData::IsInitialized() const {
  return true;
}

void OnlineRoleData::Swap(OnlineRoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlineRoleData::InternalSwap(OnlineRoleData* other) {
  using std::swap;
  swap(role_data_, other->role_data_);
  swap(dw_server_id_, other->dw_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnlineRoleData::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameConfigBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfigBase::kDwGameTypeFieldNumber;
const int GameConfigBase::kDwPrepareTimeFieldNumber;
const int GameConfigBase::kDwGameReadyTimeFieldNumber;
const int GameConfigBase::kFSuspendTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfigBase::GameConfigBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigBase();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameConfigBase)
}
GameConfigBase::GameConfigBase(const GameConfigBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_game_type_, &from.dw_game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_suspend_time_) -
    reinterpret_cast<char*>(&dw_game_type_)) + sizeof(f_suspend_time_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameConfigBase)
}

void GameConfigBase::SharedCtor() {
  ::memset(&dw_game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_suspend_time_) -
      reinterpret_cast<char*>(&dw_game_type_)) + sizeof(f_suspend_time_));
  _cached_size_ = 0;
}

GameConfigBase::~GameConfigBase() {
  // @@protoc_insertion_point(destructor:GameProto.GameConfigBase)
  SharedDtor();
}

void GameConfigBase::SharedDtor() {
}

void GameConfigBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfigBase::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConfigBase& GameConfigBase::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigBase();
  return *internal_default_instance();
}

GameConfigBase* GameConfigBase::New(::google::protobuf::Arena* arena) const {
  GameConfigBase* n = new GameConfigBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfigBase::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameConfigBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_suspend_time_) -
      reinterpret_cast<char*>(&dw_game_type_)) + sizeof(f_suspend_time_));
  _internal_metadata_.Clear();
}

bool GameConfigBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameConfigBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_prepare_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_prepare_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_game_ready_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_ready_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_suspend_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_suspend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameConfigBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameConfigBase)
  return false;
#undef DO_
}

void GameConfigBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameConfigBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_game_type(), output);
  }

  // uint32 dw_prepare_time = 2;
  if (this->dw_prepare_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_prepare_time(), output);
  }

  // uint32 dw_game_ready_time = 3;
  if (this->dw_game_ready_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_game_ready_time(), output);
  }

  // float f_suspend_time = 4;
  if (this->f_suspend_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->f_suspend_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameConfigBase)
}

::google::protobuf::uint8* GameConfigBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameConfigBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_game_type(), target);
  }

  // uint32 dw_prepare_time = 2;
  if (this->dw_prepare_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_prepare_time(), target);
  }

  // uint32 dw_game_ready_time = 3;
  if (this->dw_game_ready_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_game_ready_time(), target);
  }

  // float f_suspend_time = 4;
  if (this->f_suspend_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->f_suspend_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameConfigBase)
  return target;
}

size_t GameConfigBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameConfigBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_type());
  }

  // uint32 dw_prepare_time = 2;
  if (this->dw_prepare_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_prepare_time());
  }

  // uint32 dw_game_ready_time = 3;
  if (this->dw_game_ready_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_ready_time());
  }

  // float f_suspend_time = 4;
  if (this->f_suspend_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfigBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameConfigBase)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConfigBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfigBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameConfigBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameConfigBase)
    MergeFrom(*source);
  }
}

void GameConfigBase::MergeFrom(const GameConfigBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameConfigBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_game_type() != 0) {
    set_dw_game_type(from.dw_game_type());
  }
  if (from.dw_prepare_time() != 0) {
    set_dw_prepare_time(from.dw_prepare_time());
  }
  if (from.dw_game_ready_time() != 0) {
    set_dw_game_ready_time(from.dw_game_ready_time());
  }
  if (from.f_suspend_time() != 0) {
    set_f_suspend_time(from.f_suspend_time());
  }
}

void GameConfigBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameConfigBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfigBase::CopyFrom(const GameConfigBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameConfigBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfigBase::IsInitialized() const {
  return true;
}

void GameConfigBase::Swap(GameConfigBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfigBase::InternalSwap(GameConfigBase* other) {
  using std::swap;
  swap(dw_game_type_, other->dw_game_type_);
  swap(dw_prepare_time_, other->dw_prepare_time_);
  swap(dw_game_ready_time_, other->dw_game_ready_time_);
  swap(f_suspend_time_, other->f_suspend_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfigBase::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameConfigCommon::InitAsDefaultInstance() {
  ::GameProto::_GameConfigCommon_default_instance_._instance.get_mutable()->base_config_ = const_cast< ::GameProto::GameConfigBase*>(
      ::GameProto::GameConfigBase::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfigCommon::kBaseConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfigCommon::GameConfigCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigCommon();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameConfigCommon)
}
GameConfigCommon::GameConfigCommon(const GameConfigCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_config()) {
    base_config_ = new ::GameProto::GameConfigBase(*from.base_config_);
  } else {
    base_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GameProto.GameConfigCommon)
}

void GameConfigCommon::SharedCtor() {
  base_config_ = NULL;
  _cached_size_ = 0;
}

GameConfigCommon::~GameConfigCommon() {
  // @@protoc_insertion_point(destructor:GameProto.GameConfigCommon)
  SharedDtor();
}

void GameConfigCommon::SharedDtor() {
  if (this != internal_default_instance()) delete base_config_;
}

void GameConfigCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfigCommon::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConfigCommon& GameConfigCommon::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigCommon();
  return *internal_default_instance();
}

GameConfigCommon* GameConfigCommon::New(::google::protobuf::Arena* arena) const {
  GameConfigCommon* n = new GameConfigCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfigCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameConfigCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_config_ != NULL) {
    delete base_config_;
  }
  base_config_ = NULL;
  _internal_metadata_.Clear();
}

bool GameConfigCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameConfigCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.GameConfigBase base_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameConfigCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameConfigCommon)
  return false;
#undef DO_
}

void GameConfigCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameConfigCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.GameConfigBase base_config = 1;
  if (this->has_base_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameConfigCommon)
}

::google::protobuf::uint8* GameConfigCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameConfigCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.GameConfigBase base_config = 1;
  if (this->has_base_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->base_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameConfigCommon)
  return target;
}

size_t GameConfigCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameConfigCommon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.GameConfigBase base_config = 1;
  if (this->has_base_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfigCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameConfigCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConfigCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfigCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameConfigCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameConfigCommon)
    MergeFrom(*source);
  }
}

void GameConfigCommon::MergeFrom(const GameConfigCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameConfigCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_config()) {
    mutable_base_config()->::GameProto::GameConfigBase::MergeFrom(from.base_config());
  }
}

void GameConfigCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameConfigCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfigCommon::CopyFrom(const GameConfigCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameConfigCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfigCommon::IsInitialized() const {
  return true;
}

void GameConfigCommon::Swap(GameConfigCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfigCommon::InternalSwap(GameConfigCommon* other) {
  using std::swap;
  swap(base_config_, other->base_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfigCommon::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameSceneInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSceneInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSceneInfo::GameSceneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsGameSceneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameSceneInfo)
}
GameSceneInfo::GameSceneInfo(const GameSceneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameSceneInfo)
}

void GameSceneInfo::SharedCtor() {
  state_ = 0;
  _cached_size_ = 0;
}

GameSceneInfo::~GameSceneInfo() {
  // @@protoc_insertion_point(destructor:GameProto.GameSceneInfo)
  SharedDtor();
}

void GameSceneInfo::SharedDtor() {
}

void GameSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSceneInfo::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSceneInfo& GameSceneInfo::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsGameSceneInfo();
  return *internal_default_instance();
}

GameSceneInfo* GameSceneInfo::New(::google::protobuf::Arena* arena) const {
  GameSceneInfo* n = new GameSceneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

bool GameSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameSceneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.EGameSceneState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::GameProto::EGameSceneState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameSceneInfo)
  return false;
#undef DO_
}

void GameSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameSceneInfo)
}

::google::protobuf::uint8* GameSceneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameSceneInfo)
  return target;
}

size_t GameSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameSceneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSceneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSceneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameSceneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameSceneInfo)
    MergeFrom(*source);
  }
}

void GameSceneInfo::MergeFrom(const GameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSceneInfo::CopyFrom(const GameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSceneInfo::IsInitialized() const {
  return true;
}

void GameSceneInfo::Swap(GameSceneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSceneInfo::InternalSwap(GameSceneInfo* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSceneInfo::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCommonSceneInfo::InitAsDefaultInstance() {
  ::GameProto::_GameCommonSceneInfo_default_instance_._instance.get_mutable()->scene_info_ = const_cast< ::GameProto::GameSceneInfo*>(
      ::GameProto::GameSceneInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCommonSceneInfo::kSceneInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCommonSceneInfo::GameCommonSceneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonSceneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameCommonSceneInfo)
}
GameCommonSceneInfo::GameCommonSceneInfo(const GameCommonSceneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scene_info()) {
    scene_info_ = new ::GameProto::GameSceneInfo(*from.scene_info_);
  } else {
    scene_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GameProto.GameCommonSceneInfo)
}

void GameCommonSceneInfo::SharedCtor() {
  scene_info_ = NULL;
  _cached_size_ = 0;
}

GameCommonSceneInfo::~GameCommonSceneInfo() {
  // @@protoc_insertion_point(destructor:GameProto.GameCommonSceneInfo)
  SharedDtor();
}

void GameCommonSceneInfo::SharedDtor() {
  if (this != internal_default_instance()) delete scene_info_;
}

void GameCommonSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCommonSceneInfo::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCommonSceneInfo& GameCommonSceneInfo::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonSceneInfo();
  return *internal_default_instance();
}

GameCommonSceneInfo* GameCommonSceneInfo::New(::google::protobuf::Arena* arena) const {
  GameCommonSceneInfo* n = new GameCommonSceneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCommonSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameCommonSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && scene_info_ != NULL) {
    delete scene_info_;
  }
  scene_info_ = NULL;
  _internal_metadata_.Clear();
}

bool GameCommonSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameCommonSceneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.GameSceneInfo scene_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scene_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameCommonSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameCommonSceneInfo)
  return false;
#undef DO_
}

void GameCommonSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameCommonSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.GameSceneInfo scene_info = 1;
  if (this->has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scene_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameCommonSceneInfo)
}

::google::protobuf::uint8* GameCommonSceneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameCommonSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.GameSceneInfo scene_info = 1;
  if (this->has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->scene_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameCommonSceneInfo)
  return target;
}

size_t GameCommonSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameCommonSceneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.GameSceneInfo scene_info = 1;
  if (this->has_scene_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scene_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCommonSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameCommonSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCommonSceneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCommonSceneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameCommonSceneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameCommonSceneInfo)
    MergeFrom(*source);
  }
}

void GameCommonSceneInfo::MergeFrom(const GameCommonSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameCommonSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scene_info()) {
    mutable_scene_info()->::GameProto::GameSceneInfo::MergeFrom(from.scene_info());
  }
}

void GameCommonSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameCommonSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommonSceneInfo::CopyFrom(const GameCommonSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameCommonSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommonSceneInfo::IsInitialized() const {
  return true;
}

void GameCommonSceneInfo::Swap(GameCommonSceneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCommonSceneInfo::InternalSwap(GameCommonSceneInfo* other) {
  using std::swap;
  swap(scene_info_, other->scene_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCommonSceneInfo::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tetris::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tetris::kDwTetrisShapeFieldNumber;
const int Tetris::kDwTetrisDirectFieldNumber;
const int Tetris::kDwTetrisColorFieldNumber;
const int Tetris::kDwPosXFieldNumber;
const int Tetris::kDwPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tetris::Tetris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fdata_2eproto::InitDefaultsTetris();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.Tetris)
}
Tetris::Tetris(const Tetris& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_tetris_shape_, &from.dw_tetris_shape_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_pos_y_) -
    reinterpret_cast<char*>(&dw_tetris_shape_)) + sizeof(dw_pos_y_));
  // @@protoc_insertion_point(copy_constructor:GameProto.Tetris)
}

void Tetris::SharedCtor() {
  ::memset(&dw_tetris_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_pos_y_) -
      reinterpret_cast<char*>(&dw_tetris_shape_)) + sizeof(dw_pos_y_));
  _cached_size_ = 0;
}

Tetris::~Tetris() {
  // @@protoc_insertion_point(destructor:GameProto.Tetris)
  SharedDtor();
}

void Tetris::SharedDtor() {
}

void Tetris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tetris::descriptor() {
  ::protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tetris& Tetris::default_instance() {
  ::protobuf_web_5fdata_2eproto::InitDefaultsTetris();
  return *internal_default_instance();
}

Tetris* Tetris::New(::google::protobuf::Arena* arena) const {
  Tetris* n = new Tetris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tetris::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.Tetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_tetris_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_pos_y_) -
      reinterpret_cast<char*>(&dw_tetris_shape_)) + sizeof(dw_pos_y_));
  _internal_metadata_.Clear();
}

bool Tetris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.Tetris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_tetris_shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_tetris_shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_tetris_direct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_tetris_direct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_tetris_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_tetris_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dw_pos_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dw_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dw_pos_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dw_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.Tetris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.Tetris)
  return false;
#undef DO_
}

void Tetris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.Tetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_tetris_shape = 1;
  if (this->dw_tetris_shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_tetris_shape(), output);
  }

  // uint32 dw_tetris_direct = 2;
  if (this->dw_tetris_direct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_tetris_direct(), output);
  }

  // uint32 dw_tetris_color = 3;
  if (this->dw_tetris_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_tetris_color(), output);
  }

  // int32 dw_pos_x = 4;
  if (this->dw_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dw_pos_x(), output);
  }

  // int32 dw_pos_y = 5;
  if (this->dw_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dw_pos_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.Tetris)
}

::google::protobuf::uint8* Tetris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.Tetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_tetris_shape = 1;
  if (this->dw_tetris_shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_tetris_shape(), target);
  }

  // uint32 dw_tetris_direct = 2;
  if (this->dw_tetris_direct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_tetris_direct(), target);
  }

  // uint32 dw_tetris_color = 3;
  if (this->dw_tetris_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_tetris_color(), target);
  }

  // int32 dw_pos_x = 4;
  if (this->dw_pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dw_pos_x(), target);
  }

  // int32 dw_pos_y = 5;
  if (this->dw_pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dw_pos_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.Tetris)
  return target;
}

size_t Tetris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.Tetris)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_tetris_shape = 1;
  if (this->dw_tetris_shape() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_tetris_shape());
  }

  // uint32 dw_tetris_direct = 2;
  if (this->dw_tetris_direct() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_tetris_direct());
  }

  // uint32 dw_tetris_color = 3;
  if (this->dw_tetris_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_tetris_color());
  }

  // int32 dw_pos_x = 4;
  if (this->dw_pos_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dw_pos_x());
  }

  // int32 dw_pos_y = 5;
  if (this->dw_pos_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dw_pos_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tetris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.Tetris)
  GOOGLE_DCHECK_NE(&from, this);
  const Tetris* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tetris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.Tetris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.Tetris)
    MergeFrom(*source);
  }
}

void Tetris::MergeFrom(const Tetris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.Tetris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_tetris_shape() != 0) {
    set_dw_tetris_shape(from.dw_tetris_shape());
  }
  if (from.dw_tetris_direct() != 0) {
    set_dw_tetris_direct(from.dw_tetris_direct());
  }
  if (from.dw_tetris_color() != 0) {
    set_dw_tetris_color(from.dw_tetris_color());
  }
  if (from.dw_pos_x() != 0) {
    set_dw_pos_x(from.dw_pos_x());
  }
  if (from.dw_pos_y() != 0) {
    set_dw_pos_y(from.dw_pos_y());
  }
}

void Tetris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.Tetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tetris::CopyFrom(const Tetris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.Tetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tetris::IsInitialized() const {
  return true;
}

void Tetris::Swap(Tetris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tetris::InternalSwap(Tetris* other) {
  using std::swap;
  swap(dw_tetris_shape_, other->dw_tetris_shape_);
  swap(dw_tetris_direct_, other->dw_tetris_direct_);
  swap(dw_tetris_color_, other->dw_tetris_color_);
  swap(dw_pos_x_, other->dw_pos_x_);
  swap(dw_pos_y_, other->dw_pos_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tetris::GetMetadata() const {
  protobuf_web_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProto

// @@protoc_insertion_point(global_scope)
