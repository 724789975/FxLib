// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_data.proto

#ifndef PROTOBUF_web_5fdata_2eproto__INCLUDED
#define PROTOBUF_web_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_web_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRoleDataImpl();
void InitDefaultsRoleData();
void InitDefaultsTeamRoleDataImpl();
void InitDefaultsTeamRoleData();
void InitDefaultsGameCommonRoleDataImpl();
void InitDefaultsGameCommonRoleData();
void InitDefaultsOnlineRoleDataImpl();
void InitDefaultsOnlineRoleData();
void InitDefaultsGameConfigBaseImpl();
void InitDefaultsGameConfigBase();
void InitDefaultsGameConfigCommonImpl();
void InitDefaultsGameConfigCommon();
void InitDefaultsGameSceneInfoImpl();
void InitDefaultsGameSceneInfo();
void InitDefaultsGameCommonSceneInfoImpl();
void InitDefaultsGameCommonSceneInfo();
void InitDefaultsTetrisImpl();
void InitDefaultsTetris();
inline void InitDefaults() {
  InitDefaultsRoleData();
  InitDefaultsTeamRoleData();
  InitDefaultsGameCommonRoleData();
  InitDefaultsOnlineRoleData();
  InitDefaultsGameConfigBase();
  InitDefaultsGameConfigCommon();
  InitDefaultsGameSceneInfo();
  InitDefaultsGameCommonSceneInfo();
  InitDefaultsTetris();
}
}  // namespace protobuf_web_5fdata_2eproto
namespace GameProto {
class GameCommonRoleData;
class GameCommonRoleDataDefaultTypeInternal;
extern GameCommonRoleDataDefaultTypeInternal _GameCommonRoleData_default_instance_;
class GameCommonSceneInfo;
class GameCommonSceneInfoDefaultTypeInternal;
extern GameCommonSceneInfoDefaultTypeInternal _GameCommonSceneInfo_default_instance_;
class GameConfigBase;
class GameConfigBaseDefaultTypeInternal;
extern GameConfigBaseDefaultTypeInternal _GameConfigBase_default_instance_;
class GameConfigCommon;
class GameConfigCommonDefaultTypeInternal;
extern GameConfigCommonDefaultTypeInternal _GameConfigCommon_default_instance_;
class GameSceneInfo;
class GameSceneInfoDefaultTypeInternal;
extern GameSceneInfoDefaultTypeInternal _GameSceneInfo_default_instance_;
class OnlineRoleData;
class OnlineRoleDataDefaultTypeInternal;
extern OnlineRoleDataDefaultTypeInternal _OnlineRoleData_default_instance_;
class RoleData;
class RoleDataDefaultTypeInternal;
extern RoleDataDefaultTypeInternal _RoleData_default_instance_;
class TeamRoleData;
class TeamRoleDataDefaultTypeInternal;
extern TeamRoleDataDefaultTypeInternal _TeamRoleData_default_instance_;
class Tetris;
class TetrisDefaultTypeInternal;
extern TetrisDefaultTypeInternal _Tetris_default_instance_;
}  // namespace GameProto
namespace GameProto {

enum EGameType {
  GT_None = 0,
  GT_Common = 1,
  EGameType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EGameType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EGameType_IsValid(int value);
const EGameType EGameType_MIN = GT_None;
const EGameType EGameType_MAX = GT_Common;
const int EGameType_ARRAYSIZE = EGameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGameType_descriptor();
inline const ::std::string& EGameType_Name(EGameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameType_descriptor(), value);
}
inline bool EGameType_Parse(
    const ::std::string& name, EGameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameType>(
    EGameType_descriptor(), name, value);
}
enum EGameSceneState {
  ESS_None = 0,
  ESS_Prepare = 1,
  ESS_GameReady = 10,
  ESS_Gaming = 20,
  ESS_Transact = 30,
  EGameSceneState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EGameSceneState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EGameSceneState_IsValid(int value);
const EGameSceneState EGameSceneState_MIN = ESS_None;
const EGameSceneState EGameSceneState_MAX = ESS_Transact;
const int EGameSceneState_ARRAYSIZE = EGameSceneState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGameSceneState_descriptor();
inline const ::std::string& EGameSceneState_Name(EGameSceneState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameSceneState_descriptor(), value);
}
inline bool EGameSceneState_Parse(
    const ::std::string& name, EGameSceneState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameSceneState>(
    EGameSceneState_descriptor(), name, value);
}
// ===================================================================

class RoleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.RoleData) */ {
 public:
  RoleData();
  virtual ~RoleData();

  RoleData(const RoleData& from);

  inline RoleData& operator=(const RoleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleData(RoleData&& from) noexcept
    : RoleData() {
    *this = ::std::move(from);
  }

  inline RoleData& operator=(RoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleData* internal_default_instance() {
    return reinterpret_cast<const RoleData*>(
               &_RoleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RoleData* other);
  friend void swap(RoleData& a, RoleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleData* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleData& from);
  void MergeFrom(const RoleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sz_nick_name = 2;
  void clear_sz_nick_name();
  static const int kSzNickNameFieldNumber = 2;
  const ::std::string& sz_nick_name() const;
  void set_sz_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_nick_name(::std::string&& value);
  #endif
  void set_sz_nick_name(const char* value);
  void set_sz_nick_name(const char* value, size_t size);
  ::std::string* mutable_sz_nick_name();
  ::std::string* release_sz_nick_name();
  void set_allocated_sz_nick_name(::std::string* sz_nick_name);

  // string sz_avatar = 3;
  void clear_sz_avatar();
  static const int kSzAvatarFieldNumber = 3;
  const ::std::string& sz_avatar() const;
  void set_sz_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_sz_avatar(::std::string&& value);
  #endif
  void set_sz_avatar(const char* value);
  void set_sz_avatar(const char* value, size_t size);
  ::std::string* mutable_sz_avatar();
  ::std::string* release_sz_avatar();
  void set_allocated_sz_avatar(::std::string* sz_avatar);

  // uint64 qw_player_id = 1;
  void clear_qw_player_id();
  static const int kQwPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 qw_player_id() const;
  void set_qw_player_id(::google::protobuf::uint64 value);

  // uint32 dw_sex = 4;
  void clear_dw_sex();
  static const int kDwSexFieldNumber = 4;
  ::google::protobuf::uint32 dw_sex() const;
  void set_dw_sex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.RoleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sz_nick_name_;
  ::google::protobuf::internal::ArenaStringPtr sz_avatar_;
  ::google::protobuf::uint64 qw_player_id_;
  ::google::protobuf::uint32 dw_sex_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsRoleDataImpl();
};
// -------------------------------------------------------------------

class TeamRoleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.TeamRoleData) */ {
 public:
  TeamRoleData();
  virtual ~TeamRoleData();

  TeamRoleData(const TeamRoleData& from);

  inline TeamRoleData& operator=(const TeamRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRoleData(TeamRoleData&& from) noexcept
    : TeamRoleData() {
    *this = ::std::move(from);
  }

  inline TeamRoleData& operator=(TeamRoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRoleData* internal_default_instance() {
    return reinterpret_cast<const TeamRoleData*>(
               &_TeamRoleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TeamRoleData* other);
  friend void swap(TeamRoleData& a, TeamRoleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRoleData* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRoleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRoleData& from);
  void MergeFrom(const TeamRoleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRoleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 1;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 1;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint32 dw_slot_id = 2;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // uint32 dw_server_id = 3;
  void clear_dw_server_id();
  static const int kDwServerIdFieldNumber = 3;
  ::google::protobuf::uint32 dw_server_id() const;
  void set_dw_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.TeamRoleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint32 dw_slot_id_;
  ::google::protobuf::uint32 dw_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsTeamRoleDataImpl();
};
// -------------------------------------------------------------------

class GameCommonRoleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameCommonRoleData) */ {
 public:
  GameCommonRoleData();
  virtual ~GameCommonRoleData();

  GameCommonRoleData(const GameCommonRoleData& from);

  inline GameCommonRoleData& operator=(const GameCommonRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCommonRoleData(GameCommonRoleData&& from) noexcept
    : GameCommonRoleData() {
    *this = ::std::move(from);
  }

  inline GameCommonRoleData& operator=(GameCommonRoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCommonRoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCommonRoleData* internal_default_instance() {
    return reinterpret_cast<const GameCommonRoleData*>(
               &_GameCommonRoleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GameCommonRoleData* other);
  friend void swap(GameCommonRoleData& a, GameCommonRoleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCommonRoleData* New() const PROTOBUF_FINAL { return New(NULL); }

  GameCommonRoleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCommonRoleData& from);
  void MergeFrom(const GameCommonRoleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCommonRoleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 1;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 1;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint32 dw_slot_id = 2;
  void clear_dw_slot_id();
  static const int kDwSlotIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_slot_id() const;
  void set_dw_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.GameCommonRoleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint32 dw_slot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonRoleDataImpl();
};
// -------------------------------------------------------------------

class OnlineRoleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.OnlineRoleData) */ {
 public:
  OnlineRoleData();
  virtual ~OnlineRoleData();

  OnlineRoleData(const OnlineRoleData& from);

  inline OnlineRoleData& operator=(const OnlineRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlineRoleData(OnlineRoleData&& from) noexcept
    : OnlineRoleData() {
    *this = ::std::move(from);
  }

  inline OnlineRoleData& operator=(OnlineRoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineRoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineRoleData* internal_default_instance() {
    return reinterpret_cast<const OnlineRoleData*>(
               &_OnlineRoleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(OnlineRoleData* other);
  friend void swap(OnlineRoleData& a, OnlineRoleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlineRoleData* New() const PROTOBUF_FINAL { return New(NULL); }

  OnlineRoleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnlineRoleData& from);
  void MergeFrom(const OnlineRoleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineRoleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.RoleData role_data = 1;
  bool has_role_data() const;
  void clear_role_data();
  static const int kRoleDataFieldNumber = 1;
  const ::GameProto::RoleData& role_data() const;
  ::GameProto::RoleData* release_role_data();
  ::GameProto::RoleData* mutable_role_data();
  void set_allocated_role_data(::GameProto::RoleData* role_data);

  // uint32 dw_server_id = 2;
  void clear_dw_server_id();
  static const int kDwServerIdFieldNumber = 2;
  ::google::protobuf::uint32 dw_server_id() const;
  void set_dw_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProto.OnlineRoleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::RoleData* role_data_;
  ::google::protobuf::uint32 dw_server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsOnlineRoleDataImpl();
};
// -------------------------------------------------------------------

class GameConfigBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameConfigBase) */ {
 public:
  GameConfigBase();
  virtual ~GameConfigBase();

  GameConfigBase(const GameConfigBase& from);

  inline GameConfigBase& operator=(const GameConfigBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfigBase(GameConfigBase&& from) noexcept
    : GameConfigBase() {
    *this = ::std::move(from);
  }

  inline GameConfigBase& operator=(GameConfigBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfigBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfigBase* internal_default_instance() {
    return reinterpret_cast<const GameConfigBase*>(
               &_GameConfigBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GameConfigBase* other);
  friend void swap(GameConfigBase& a, GameConfigBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfigBase* New() const PROTOBUF_FINAL { return New(NULL); }

  GameConfigBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConfigBase& from);
  void MergeFrom(const GameConfigBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConfigBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_game_type = 1;
  void clear_dw_game_type();
  static const int kDwGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 dw_game_type() const;
  void set_dw_game_type(::google::protobuf::uint32 value);

  // uint32 dw_prepare_time = 2;
  void clear_dw_prepare_time();
  static const int kDwPrepareTimeFieldNumber = 2;
  ::google::protobuf::uint32 dw_prepare_time() const;
  void set_dw_prepare_time(::google::protobuf::uint32 value);

  // uint32 dw_game_ready_time = 3;
  void clear_dw_game_ready_time();
  static const int kDwGameReadyTimeFieldNumber = 3;
  ::google::protobuf::uint32 dw_game_ready_time() const;
  void set_dw_game_ready_time(::google::protobuf::uint32 value);

  // float f_suspend_time = 4;
  void clear_f_suspend_time();
  static const int kFSuspendTimeFieldNumber = 4;
  float f_suspend_time() const;
  void set_f_suspend_time(float value);

  // @@protoc_insertion_point(class_scope:GameProto.GameConfigBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_game_type_;
  ::google::protobuf::uint32 dw_prepare_time_;
  ::google::protobuf::uint32 dw_game_ready_time_;
  float f_suspend_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigBaseImpl();
};
// -------------------------------------------------------------------

class GameConfigCommon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameConfigCommon) */ {
 public:
  GameConfigCommon();
  virtual ~GameConfigCommon();

  GameConfigCommon(const GameConfigCommon& from);

  inline GameConfigCommon& operator=(const GameConfigCommon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfigCommon(GameConfigCommon&& from) noexcept
    : GameConfigCommon() {
    *this = ::std::move(from);
  }

  inline GameConfigCommon& operator=(GameConfigCommon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfigCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfigCommon* internal_default_instance() {
    return reinterpret_cast<const GameConfigCommon*>(
               &_GameConfigCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GameConfigCommon* other);
  friend void swap(GameConfigCommon& a, GameConfigCommon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfigCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  GameConfigCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConfigCommon& from);
  void MergeFrom(const GameConfigCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConfigCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.GameConfigBase base_config = 1;
  bool has_base_config() const;
  void clear_base_config();
  static const int kBaseConfigFieldNumber = 1;
  const ::GameProto::GameConfigBase& base_config() const;
  ::GameProto::GameConfigBase* release_base_config();
  ::GameProto::GameConfigBase* mutable_base_config();
  void set_allocated_base_config(::GameProto::GameConfigBase* base_config);

  // @@protoc_insertion_point(class_scope:GameProto.GameConfigCommon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::GameConfigBase* base_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsGameConfigCommonImpl();
};
// -------------------------------------------------------------------

class GameSceneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameSceneInfo) */ {
 public:
  GameSceneInfo();
  virtual ~GameSceneInfo();

  GameSceneInfo(const GameSceneInfo& from);

  inline GameSceneInfo& operator=(const GameSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSceneInfo(GameSceneInfo&& from) noexcept
    : GameSceneInfo() {
    *this = ::std::move(from);
  }

  inline GameSceneInfo& operator=(GameSceneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSceneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSceneInfo* internal_default_instance() {
    return reinterpret_cast<const GameSceneInfo*>(
               &_GameSceneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GameSceneInfo* other);
  friend void swap(GameSceneInfo& a, GameSceneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSceneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSceneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSceneInfo& from);
  void MergeFrom(const GameSceneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSceneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.EGameSceneState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::GameProto::EGameSceneState state() const;
  void set_state(::GameProto::EGameSceneState value);

  // @@protoc_insertion_point(class_scope:GameProto.GameSceneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsGameSceneInfoImpl();
};
// -------------------------------------------------------------------

class GameCommonSceneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.GameCommonSceneInfo) */ {
 public:
  GameCommonSceneInfo();
  virtual ~GameCommonSceneInfo();

  GameCommonSceneInfo(const GameCommonSceneInfo& from);

  inline GameCommonSceneInfo& operator=(const GameCommonSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCommonSceneInfo(GameCommonSceneInfo&& from) noexcept
    : GameCommonSceneInfo() {
    *this = ::std::move(from);
  }

  inline GameCommonSceneInfo& operator=(GameCommonSceneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCommonSceneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCommonSceneInfo* internal_default_instance() {
    return reinterpret_cast<const GameCommonSceneInfo*>(
               &_GameCommonSceneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GameCommonSceneInfo* other);
  friend void swap(GameCommonSceneInfo& a, GameCommonSceneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCommonSceneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GameCommonSceneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCommonSceneInfo& from);
  void MergeFrom(const GameCommonSceneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCommonSceneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GameProto.GameSceneInfo scene_info = 1;
  bool has_scene_info() const;
  void clear_scene_info();
  static const int kSceneInfoFieldNumber = 1;
  const ::GameProto::GameSceneInfo& scene_info() const;
  ::GameProto::GameSceneInfo* release_scene_info();
  ::GameProto::GameSceneInfo* mutable_scene_info();
  void set_allocated_scene_info(::GameProto::GameSceneInfo* scene_info);

  // @@protoc_insertion_point(class_scope:GameProto.GameCommonSceneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GameProto::GameSceneInfo* scene_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsGameCommonSceneInfoImpl();
};
// -------------------------------------------------------------------

class Tetris : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Tetris) */ {
 public:
  Tetris();
  virtual ~Tetris();

  Tetris(const Tetris& from);

  inline Tetris& operator=(const Tetris& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tetris(Tetris&& from) noexcept
    : Tetris() {
    *this = ::std::move(from);
  }

  inline Tetris& operator=(Tetris&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tetris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tetris* internal_default_instance() {
    return reinterpret_cast<const Tetris*>(
               &_Tetris_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Tetris* other);
  friend void swap(Tetris& a, Tetris& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tetris* New() const PROTOBUF_FINAL { return New(NULL); }

  Tetris* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tetris& from);
  void MergeFrom(const Tetris& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tetris* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dw_tetris_shape = 1;
  void clear_dw_tetris_shape();
  static const int kDwTetrisShapeFieldNumber = 1;
  ::google::protobuf::uint32 dw_tetris_shape() const;
  void set_dw_tetris_shape(::google::protobuf::uint32 value);

  // uint32 dw_tetris_direct = 2;
  void clear_dw_tetris_direct();
  static const int kDwTetrisDirectFieldNumber = 2;
  ::google::protobuf::uint32 dw_tetris_direct() const;
  void set_dw_tetris_direct(::google::protobuf::uint32 value);

  // uint32 dw_tetris_color = 3;
  void clear_dw_tetris_color();
  static const int kDwTetrisColorFieldNumber = 3;
  ::google::protobuf::uint32 dw_tetris_color() const;
  void set_dw_tetris_color(::google::protobuf::uint32 value);

  // int32 dw_pos_x = 4;
  void clear_dw_pos_x();
  static const int kDwPosXFieldNumber = 4;
  ::google::protobuf::int32 dw_pos_x() const;
  void set_dw_pos_x(::google::protobuf::int32 value);

  // int32 dw_pos_y = 5;
  void clear_dw_pos_y();
  static const int kDwPosYFieldNumber = 5;
  ::google::protobuf::int32 dw_pos_y() const;
  void set_dw_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.Tetris)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dw_tetris_shape_;
  ::google::protobuf::uint32 dw_tetris_direct_;
  ::google::protobuf::uint32 dw_tetris_color_;
  ::google::protobuf::int32 dw_pos_x_;
  ::google::protobuf::int32 dw_pos_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_web_5fdata_2eproto::TableStruct;
  friend void ::protobuf_web_5fdata_2eproto::InitDefaultsTetrisImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleData

// uint64 qw_player_id = 1;
inline void RoleData::clear_qw_player_id() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoleData::qw_player_id() const {
  // @@protoc_insertion_point(field_get:GameProto.RoleData.qw_player_id)
  return qw_player_id_;
}
inline void RoleData::set_qw_player_id(::google::protobuf::uint64 value) {
  
  qw_player_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoleData.qw_player_id)
}

// string sz_nick_name = 2;
inline void RoleData::clear_sz_nick_name() {
  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleData::sz_nick_name() const {
  // @@protoc_insertion_point(field_get:GameProto.RoleData.sz_nick_name)
  return sz_nick_name_.GetNoArena();
}
inline void RoleData::set_sz_nick_name(const ::std::string& value) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoleData.sz_nick_name)
}
#if LANG_CXX11
inline void RoleData::set_sz_nick_name(::std::string&& value) {
  
  sz_nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.RoleData.sz_nick_name)
}
#endif
inline void RoleData::set_sz_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoleData.sz_nick_name)
}
inline void RoleData::set_sz_nick_name(const char* value, size_t size) {
  
  sz_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoleData.sz_nick_name)
}
inline ::std::string* RoleData::mutable_sz_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoleData.sz_nick_name)
  return sz_nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleData::release_sz_nick_name() {
  // @@protoc_insertion_point(field_release:GameProto.RoleData.sz_nick_name)
  
  return sz_nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_sz_nick_name(::std::string* sz_nick_name) {
  if (sz_nick_name != NULL) {
    
  } else {
    
  }
  sz_nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_nick_name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoleData.sz_nick_name)
}

// string sz_avatar = 3;
inline void RoleData::clear_sz_avatar() {
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleData::sz_avatar() const {
  // @@protoc_insertion_point(field_get:GameProto.RoleData.sz_avatar)
  return sz_avatar_.GetNoArena();
}
inline void RoleData::set_sz_avatar(const ::std::string& value) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoleData.sz_avatar)
}
#if LANG_CXX11
inline void RoleData::set_sz_avatar(::std::string&& value) {
  
  sz_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.RoleData.sz_avatar)
}
#endif
inline void RoleData::set_sz_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoleData.sz_avatar)
}
inline void RoleData::set_sz_avatar(const char* value, size_t size) {
  
  sz_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoleData.sz_avatar)
}
inline ::std::string* RoleData::mutable_sz_avatar() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoleData.sz_avatar)
  return sz_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleData::release_sz_avatar() {
  // @@protoc_insertion_point(field_release:GameProto.RoleData.sz_avatar)
  
  return sz_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_sz_avatar(::std::string* sz_avatar) {
  if (sz_avatar != NULL) {
    
  } else {
    
  }
  sz_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_avatar);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoleData.sz_avatar)
}

// uint32 dw_sex = 4;
inline void RoleData::clear_dw_sex() {
  dw_sex_ = 0u;
}
inline ::google::protobuf::uint32 RoleData::dw_sex() const {
  // @@protoc_insertion_point(field_get:GameProto.RoleData.dw_sex)
  return dw_sex_;
}
inline void RoleData::set_dw_sex(::google::protobuf::uint32 value) {
  
  dw_sex_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoleData.dw_sex)
}

// -------------------------------------------------------------------

// TeamRoleData

// .GameProto.RoleData role_data = 1;
inline bool TeamRoleData::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline void TeamRoleData::clear_role_data() {
  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
}
inline const ::GameProto::RoleData& TeamRoleData::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.TeamRoleData.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* TeamRoleData::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.TeamRoleData.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* TeamRoleData::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.TeamRoleData.role_data)
  return role_data_;
}
inline void TeamRoleData::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_data_;
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.TeamRoleData.role_data)
}

// uint32 dw_slot_id = 2;
inline void TeamRoleData::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 TeamRoleData::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamRoleData.dw_slot_id)
  return dw_slot_id_;
}
inline void TeamRoleData::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamRoleData.dw_slot_id)
}

// uint32 dw_server_id = 3;
inline void TeamRoleData::clear_dw_server_id() {
  dw_server_id_ = 0u;
}
inline ::google::protobuf::uint32 TeamRoleData::dw_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.TeamRoleData.dw_server_id)
  return dw_server_id_;
}
inline void TeamRoleData::set_dw_server_id(::google::protobuf::uint32 value) {
  
  dw_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.TeamRoleData.dw_server_id)
}

// -------------------------------------------------------------------

// GameCommonRoleData

// .GameProto.RoleData role_data = 1;
inline bool GameCommonRoleData::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline void GameCommonRoleData::clear_role_data() {
  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
}
inline const ::GameProto::RoleData& GameCommonRoleData::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.GameCommonRoleData.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* GameCommonRoleData::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.GameCommonRoleData.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* GameCommonRoleData::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameCommonRoleData.role_data)
  return role_data_;
}
inline void GameCommonRoleData::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_data_;
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameCommonRoleData.role_data)
}

// uint32 dw_slot_id = 2;
inline void GameCommonRoleData::clear_dw_slot_id() {
  dw_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 GameCommonRoleData::dw_slot_id() const {
  // @@protoc_insertion_point(field_get:GameProto.GameCommonRoleData.dw_slot_id)
  return dw_slot_id_;
}
inline void GameCommonRoleData::set_dw_slot_id(::google::protobuf::uint32 value) {
  
  dw_slot_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameCommonRoleData.dw_slot_id)
}

// -------------------------------------------------------------------

// OnlineRoleData

// .GameProto.RoleData role_data = 1;
inline bool OnlineRoleData::has_role_data() const {
  return this != internal_default_instance() && role_data_ != NULL;
}
inline void OnlineRoleData::clear_role_data() {
  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
}
inline const ::GameProto::RoleData& OnlineRoleData::role_data() const {
  const ::GameProto::RoleData* p = role_data_;
  // @@protoc_insertion_point(field_get:GameProto.OnlineRoleData.role_data)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::RoleData*>(
      &::GameProto::_RoleData_default_instance_);
}
inline ::GameProto::RoleData* OnlineRoleData::release_role_data() {
  // @@protoc_insertion_point(field_release:GameProto.OnlineRoleData.role_data)
  
  ::GameProto::RoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline ::GameProto::RoleData* OnlineRoleData::mutable_role_data() {
  
  if (role_data_ == NULL) {
    role_data_ = new ::GameProto::RoleData;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.OnlineRoleData.role_data)
  return role_data_;
}
inline void OnlineRoleData::set_allocated_role_data(::GameProto::RoleData* role_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_data_;
  }
  if (role_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:GameProto.OnlineRoleData.role_data)
}

// uint32 dw_server_id = 2;
inline void OnlineRoleData::clear_dw_server_id() {
  dw_server_id_ = 0u;
}
inline ::google::protobuf::uint32 OnlineRoleData::dw_server_id() const {
  // @@protoc_insertion_point(field_get:GameProto.OnlineRoleData.dw_server_id)
  return dw_server_id_;
}
inline void OnlineRoleData::set_dw_server_id(::google::protobuf::uint32 value) {
  
  dw_server_id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.OnlineRoleData.dw_server_id)
}

// -------------------------------------------------------------------

// GameConfigBase

// uint32 dw_game_type = 1;
inline void GameConfigBase::clear_dw_game_type() {
  dw_game_type_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigBase::dw_game_type() const {
  // @@protoc_insertion_point(field_get:GameProto.GameConfigBase.dw_game_type)
  return dw_game_type_;
}
inline void GameConfigBase::set_dw_game_type(::google::protobuf::uint32 value) {
  
  dw_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameConfigBase.dw_game_type)
}

// uint32 dw_prepare_time = 2;
inline void GameConfigBase::clear_dw_prepare_time() {
  dw_prepare_time_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigBase::dw_prepare_time() const {
  // @@protoc_insertion_point(field_get:GameProto.GameConfigBase.dw_prepare_time)
  return dw_prepare_time_;
}
inline void GameConfigBase::set_dw_prepare_time(::google::protobuf::uint32 value) {
  
  dw_prepare_time_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameConfigBase.dw_prepare_time)
}

// uint32 dw_game_ready_time = 3;
inline void GameConfigBase::clear_dw_game_ready_time() {
  dw_game_ready_time_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigBase::dw_game_ready_time() const {
  // @@protoc_insertion_point(field_get:GameProto.GameConfigBase.dw_game_ready_time)
  return dw_game_ready_time_;
}
inline void GameConfigBase::set_dw_game_ready_time(::google::protobuf::uint32 value) {
  
  dw_game_ready_time_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameConfigBase.dw_game_ready_time)
}

// float f_suspend_time = 4;
inline void GameConfigBase::clear_f_suspend_time() {
  f_suspend_time_ = 0;
}
inline float GameConfigBase::f_suspend_time() const {
  // @@protoc_insertion_point(field_get:GameProto.GameConfigBase.f_suspend_time)
  return f_suspend_time_;
}
inline void GameConfigBase::set_f_suspend_time(float value) {
  
  f_suspend_time_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameConfigBase.f_suspend_time)
}

// -------------------------------------------------------------------

// GameConfigCommon

// .GameProto.GameConfigBase base_config = 1;
inline bool GameConfigCommon::has_base_config() const {
  return this != internal_default_instance() && base_config_ != NULL;
}
inline void GameConfigCommon::clear_base_config() {
  if (GetArenaNoVirtual() == NULL && base_config_ != NULL) {
    delete base_config_;
  }
  base_config_ = NULL;
}
inline const ::GameProto::GameConfigBase& GameConfigCommon::base_config() const {
  const ::GameProto::GameConfigBase* p = base_config_;
  // @@protoc_insertion_point(field_get:GameProto.GameConfigCommon.base_config)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::GameConfigBase*>(
      &::GameProto::_GameConfigBase_default_instance_);
}
inline ::GameProto::GameConfigBase* GameConfigCommon::release_base_config() {
  // @@protoc_insertion_point(field_release:GameProto.GameConfigCommon.base_config)
  
  ::GameProto::GameConfigBase* temp = base_config_;
  base_config_ = NULL;
  return temp;
}
inline ::GameProto::GameConfigBase* GameConfigCommon::mutable_base_config() {
  
  if (base_config_ == NULL) {
    base_config_ = new ::GameProto::GameConfigBase;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameConfigCommon.base_config)
  return base_config_;
}
inline void GameConfigCommon::set_allocated_base_config(::GameProto::GameConfigBase* base_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_config_;
  }
  if (base_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_config, submessage_arena);
    }
    
  } else {
    
  }
  base_config_ = base_config;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameConfigCommon.base_config)
}

// -------------------------------------------------------------------

// GameSceneInfo

// .GameProto.EGameSceneState state = 1;
inline void GameSceneInfo::clear_state() {
  state_ = 0;
}
inline ::GameProto::EGameSceneState GameSceneInfo::state() const {
  // @@protoc_insertion_point(field_get:GameProto.GameSceneInfo.state)
  return static_cast< ::GameProto::EGameSceneState >(state_);
}
inline void GameSceneInfo::set_state(::GameProto::EGameSceneState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.GameSceneInfo.state)
}

// -------------------------------------------------------------------

// GameCommonSceneInfo

// .GameProto.GameSceneInfo scene_info = 1;
inline bool GameCommonSceneInfo::has_scene_info() const {
  return this != internal_default_instance() && scene_info_ != NULL;
}
inline void GameCommonSceneInfo::clear_scene_info() {
  if (GetArenaNoVirtual() == NULL && scene_info_ != NULL) {
    delete scene_info_;
  }
  scene_info_ = NULL;
}
inline const ::GameProto::GameSceneInfo& GameCommonSceneInfo::scene_info() const {
  const ::GameProto::GameSceneInfo* p = scene_info_;
  // @@protoc_insertion_point(field_get:GameProto.GameCommonSceneInfo.scene_info)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::GameSceneInfo*>(
      &::GameProto::_GameSceneInfo_default_instance_);
}
inline ::GameProto::GameSceneInfo* GameCommonSceneInfo::release_scene_info() {
  // @@protoc_insertion_point(field_release:GameProto.GameCommonSceneInfo.scene_info)
  
  ::GameProto::GameSceneInfo* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline ::GameProto::GameSceneInfo* GameCommonSceneInfo::mutable_scene_info() {
  
  if (scene_info_ == NULL) {
    scene_info_ = new ::GameProto::GameSceneInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.GameCommonSceneInfo.scene_info)
  return scene_info_;
}
inline void GameCommonSceneInfo::set_allocated_scene_info(::GameProto::GameSceneInfo* scene_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scene_info_;
  }
  if (scene_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scene_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scene_info, submessage_arena);
    }
    
  } else {
    
  }
  scene_info_ = scene_info;
  // @@protoc_insertion_point(field_set_allocated:GameProto.GameCommonSceneInfo.scene_info)
}

// -------------------------------------------------------------------

// Tetris

// uint32 dw_tetris_shape = 1;
inline void Tetris::clear_dw_tetris_shape() {
  dw_tetris_shape_ = 0u;
}
inline ::google::protobuf::uint32 Tetris::dw_tetris_shape() const {
  // @@protoc_insertion_point(field_get:GameProto.Tetris.dw_tetris_shape)
  return dw_tetris_shape_;
}
inline void Tetris::set_dw_tetris_shape(::google::protobuf::uint32 value) {
  
  dw_tetris_shape_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Tetris.dw_tetris_shape)
}

// uint32 dw_tetris_direct = 2;
inline void Tetris::clear_dw_tetris_direct() {
  dw_tetris_direct_ = 0u;
}
inline ::google::protobuf::uint32 Tetris::dw_tetris_direct() const {
  // @@protoc_insertion_point(field_get:GameProto.Tetris.dw_tetris_direct)
  return dw_tetris_direct_;
}
inline void Tetris::set_dw_tetris_direct(::google::protobuf::uint32 value) {
  
  dw_tetris_direct_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Tetris.dw_tetris_direct)
}

// uint32 dw_tetris_color = 3;
inline void Tetris::clear_dw_tetris_color() {
  dw_tetris_color_ = 0u;
}
inline ::google::protobuf::uint32 Tetris::dw_tetris_color() const {
  // @@protoc_insertion_point(field_get:GameProto.Tetris.dw_tetris_color)
  return dw_tetris_color_;
}
inline void Tetris::set_dw_tetris_color(::google::protobuf::uint32 value) {
  
  dw_tetris_color_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Tetris.dw_tetris_color)
}

// int32 dw_pos_x = 4;
inline void Tetris::clear_dw_pos_x() {
  dw_pos_x_ = 0;
}
inline ::google::protobuf::int32 Tetris::dw_pos_x() const {
  // @@protoc_insertion_point(field_get:GameProto.Tetris.dw_pos_x)
  return dw_pos_x_;
}
inline void Tetris::set_dw_pos_x(::google::protobuf::int32 value) {
  
  dw_pos_x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Tetris.dw_pos_x)
}

// int32 dw_pos_y = 5;
inline void Tetris::clear_dw_pos_y() {
  dw_pos_y_ = 0;
}
inline ::google::protobuf::int32 Tetris::dw_pos_y() const {
  // @@protoc_insertion_point(field_get:GameProto.Tetris.dw_pos_y)
  return dw_pos_y_;
}
inline void Tetris::set_dw_pos_y(::google::protobuf::int32 value) {
  
  dw_pos_y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Tetris.dw_pos_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameProto::EGameType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EGameType>() {
  return ::GameProto::EGameType_descriptor();
}
template <> struct is_proto_enum< ::GameProto::EGameSceneState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::EGameSceneState>() {
  return ::GameProto::EGameSceneState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_web_5fdata_2eproto__INCLUDED
