// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_game.proto

#include "web_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace GameProto {
class PlayerRequestLoginServerIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginServerId>
      _instance;
} _PlayerRequestLoginServerId_default_instance_;
class PlayerRequestLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLogin>
      _instance;
} _PlayerRequestLogin_default_instance_;
class PlayerRequestLoginMakeTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginMakeTeam>
      _instance;
} _PlayerRequestLoginMakeTeam_default_instance_;
class PlayerRequestLoginInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginInviteTeam>
      _instance;
} _PlayerRequestLoginInviteTeam_default_instance_;
class PlayerRequestLoginChangeSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginChangeSlot>
      _instance;
} _PlayerRequestLoginChangeSlot_default_instance_;
class PlayerRequestLoginGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginGameStart>
      _instance;
} _PlayerRequestLoginGameStart_default_instance_;
class PlayerRequestLoginOnLinePlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginOnLinePlayer>
      _instance;
} _PlayerRequestLoginOnLinePlayer_default_instance_;
class PlayerRequestLoginEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginEnterTeam>
      _instance;
} _PlayerRequestLoginEnterTeam_default_instance_;
class PlayerRequestLoginRefuseEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginRefuseEnterTeam>
      _instance;
} _PlayerRequestLoginRefuseEnterTeam_default_instance_;
class PlayerRequestLoginLeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestLoginLeaveTeam>
      _instance;
} _PlayerRequestLoginLeaveTeam_default_instance_;
class LoginAckPlayerServerIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerServerId>
      _instance;
} _LoginAckPlayerServerId_default_instance_;
class LoginAckPlayerLoginResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerLoginResult>
      _instance;
} _LoginAckPlayerLoginResult_default_instance_;
class LoginNotifyPlayerGameKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyPlayerGameKick>
      _instance;
} _LoginNotifyPlayerGameKick_default_instance_;
class LoginAckPlayerMakeTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerMakeTeam>
      _instance;
} _LoginAckPlayerMakeTeam_default_instance_;
class LoginNotifyPlayerTeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyPlayerTeamInfo>
      _instance;
} _LoginNotifyPlayerTeamInfo_default_instance_;
class LoginAckPlayerInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerInviteTeam>
      _instance;
} _LoginAckPlayerInviteTeam_default_instance_;
class LoginNotifyPlayerInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyPlayerInviteTeam>
      _instance;
} _LoginNotifyPlayerInviteTeam_default_instance_;
class LoginAckPlayerChangeSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerChangeSlot>
      _instance;
} _LoginAckPlayerChangeSlot_default_instance_;
class LoginNotifyPlayerTeamKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyPlayerTeamKick>
      _instance;
} _LoginNotifyPlayerTeamKick_default_instance_;
class LoginAckPlayerGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerGameStart>
      _instance;
} _LoginAckPlayerGameStart_default_instance_;
class LoginAckPlayerOnLinePlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerOnLinePlayer>
      _instance;
} _LoginAckPlayerOnLinePlayer_default_instance_;
class LoginAckPlayerEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerEnterTeam>
      _instance;
} _LoginAckPlayerEnterTeam_default_instance_;
class LoginNotifyPlayerRefuseEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyPlayerRefuseEnterTeam>
      _instance;
} _LoginNotifyPlayerRefuseEnterTeam_default_instance_;
class LoginAckPlayerLeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckPlayerLeaveTeam>
      _instance;
} _LoginAckPlayerLeaveTeam_default_instance_;
class LoginNotifyLoginPlayerKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyLoginPlayerKick>
      _instance;
} _LoginNotifyLoginPlayerKick_default_instance_;
class LoginRequestLoginInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestLoginInviteTeam>
      _instance;
} _LoginRequestLoginInviteTeam_default_instance_;
class LoginAckLoginInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginAckLoginInviteTeam>
      _instance;
} _LoginAckLoginInviteTeam_default_instance_;
class LoginNotifyLoginPlayerRefuseEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginNotifyLoginPlayerRefuseEnterTeam>
      _instance;
} _LoginNotifyLoginPlayerRefuseEnterTeam_default_instance_;
class LoginRequestTeamMakeTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamMakeTeam>
      _instance;
} _LoginRequestTeamMakeTeam_default_instance_;
class LoginRequestTeamInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamInviteTeam>
      _instance;
} _LoginRequestTeamInviteTeam_default_instance_;
class LoginRequestTeamChangeSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamChangeSlot>
      _instance;
} _LoginRequestTeamChangeSlot_default_instance_;
class LoginRequestTeamKickPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamKickPlayer>
      _instance;
} _LoginRequestTeamKickPlayer_default_instance_;
class LoginRequestTeamGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamGameStart>
      _instance;
} _LoginRequestTeamGameStart_default_instance_;
class LoginRequestTeamEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamEnterTeam>
      _instance;
} _LoginRequestTeamEnterTeam_default_instance_;
class LoginRequestTeamPlayerLeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequestTeamPlayerLeave>
      _instance;
} _LoginRequestTeamPlayerLeave_default_instance_;
class TeamAckLoginMakeTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginMakeTeam>
      _instance;
} _TeamAckLoginMakeTeam_default_instance_;
class TeamNotifyLoginTeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamNotifyLoginTeamInfo>
      _instance;
} _TeamNotifyLoginTeamInfo_default_instance_;
class TeamAckLoginInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginInviteTeam>
      _instance;
} _TeamAckLoginInviteTeam_default_instance_;
class TeamAckLoginChangeSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginChangeSlot>
      _instance;
} _TeamAckLoginChangeSlot_default_instance_;
class TeamAckLoginKickPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginKickPlayer>
      _instance;
} _TeamAckLoginKickPlayer_default_instance_;
class TeamAckLoginGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginGameStart>
      _instance;
} _TeamAckLoginGameStart_default_instance_;
class TeamAckLoginEnterTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginEnterTeam>
      _instance;
} _TeamAckLoginEnterTeam_default_instance_;
class TeamAckLoginPlayerLeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAckLoginPlayerLeave>
      _instance;
} _TeamAckLoginPlayerLeave_default_instance_;
class TeamRequestGameManagerGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamRequestGameManagerGameStart>
      _instance;
} _TeamRequestGameManagerGameStart_default_instance_;
class GameManagerAckTeamGameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckTeamGameStart>
      _instance;
} _GameManagerAckTeamGameStart_default_instance_;
class GameNotifyGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyGameManagerInfo>
      _instance;
} _GameNotifyGameManagerInfo_default_instance_;
class GameManagerAckGameInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckGameInfoResult>
      _instance;
} _GameManagerAckGameInfoResult_default_instance_;
class PlayerRequestGameManagerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameManagerInfo>
      _instance;
} _PlayerRequestGameManagerInfo_default_instance_;
class GameManagerAckPlayerInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameManagerAckPlayerInfoResult>
      _instance;
} _GameManagerAckPlayerInfoResult_default_instance_;
class PlayerRequestGameTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameTest>
      _instance;
} _PlayerRequestGameTest_default_instance_;
class PlayerRequestGameEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestGameEnter>
      _instance;
} _PlayerRequestGameEnter_default_instance_;
class PlayerRequestMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestMove>
      _instance;
} _PlayerRequestMove_default_instance_;
class PlayerRequestRotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRequestRotation>
      _instance;
} _PlayerRequestRotation_default_instance_;
class GameAckPlayerEnterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAckPlayerEnter>
      _instance;
} _GameAckPlayerEnter_default_instance_;
class GameNotifyPlayerGameConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameConfig>
      _instance;
} _GameNotifyPlayerGameConfig_default_instance_;
class GameNotifyPlayerGameRoleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameRoleData>
      _instance;
} _GameNotifyPlayerGameRoleData_default_instance_;
class GameNotifyPlayerGameSceneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameSceneInfo>
      _instance;
} _GameNotifyPlayerGameSceneInfo_default_instance_;
class GameNotifyPlayerPrepareTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerPrepareTime>
      _instance;
} _GameNotifyPlayerPrepareTime_default_instance_;
class GameNotifyPlayerGameReadyTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameReadyTime>
      _instance;
} _GameNotifyPlayerGameReadyTime_default_instance_;
class GameNotifyPlayerGameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameState>
      _instance;
} _GameNotifyPlayerGameState_default_instance_;
class GameNotifyPlayerGameInitTetrisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerGameInitTetris>
      _instance;
} _GameNotifyPlayerGameInitTetris_default_instance_;
class GameNotifyPlayerNextTetrisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameNotifyPlayerNextTetris>
      _instance;
} _GameNotifyPlayerNextTetris_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo>
      _instance;
} _ServerInfo_default_instance_;
}  // namespace GameProto
namespace protobuf_web_5fgame_2eproto {
void InitDefaultsPlayerRequestLoginServerIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginServerId_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginServerId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginServerId::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginServerId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginServerIdImpl);
}

void InitDefaultsPlayerRequestLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLogin_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLogin::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginImpl);
}

void InitDefaultsPlayerRequestLoginMakeTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginMakeTeam_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginMakeTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginMakeTeam::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginMakeTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginMakeTeamImpl);
}

void InitDefaultsPlayerRequestLoginInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginInviteTeam_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginInviteTeamImpl);
}

void InitDefaultsPlayerRequestLoginChangeSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginChangeSlot_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginChangeSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginChangeSlot::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginChangeSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginChangeSlotImpl);
}

void InitDefaultsPlayerRequestLoginGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginGameStart_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginGameStart::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginGameStartImpl);
}

void InitDefaultsPlayerRequestLoginOnLinePlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginOnLinePlayer_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginOnLinePlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginOnLinePlayer::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginOnLinePlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginOnLinePlayerImpl);
}

void InitDefaultsPlayerRequestLoginEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginEnterTeam_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginEnterTeamImpl);
}

void InitDefaultsPlayerRequestLoginRefuseEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginRefuseEnterTeam_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginRefuseEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginRefuseEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginRefuseEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginRefuseEnterTeamImpl);
}

void InitDefaultsPlayerRequestLoginLeaveTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestLoginLeaveTeam_default_instance_;
    new (ptr) ::GameProto::PlayerRequestLoginLeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestLoginLeaveTeam::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestLoginLeaveTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestLoginLeaveTeamImpl);
}

void InitDefaultsLoginAckPlayerServerIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerServerId_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerServerId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerServerId::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerServerId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerServerIdImpl);
}

void InitDefaultsLoginAckPlayerLoginResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerLoginResult_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerLoginResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerLoginResult::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerLoginResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerLoginResultImpl);
}

void InitDefaultsLoginNotifyPlayerGameKickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyPlayerGameKick_default_instance_;
    new (ptr) ::GameProto::LoginNotifyPlayerGameKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyPlayerGameKick::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyPlayerGameKick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyPlayerGameKickImpl);
}

void InitDefaultsLoginAckPlayerMakeTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerMakeTeam_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerMakeTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerMakeTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerMakeTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerMakeTeamImpl);
}

void InitDefaultsLoginNotifyPlayerTeamInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsTeamRoleData();
  {
    void* ptr = &::GameProto::_LoginNotifyPlayerTeamInfo_default_instance_;
    new (ptr) ::GameProto::LoginNotifyPlayerTeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyPlayerTeamInfo::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyPlayerTeamInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyPlayerTeamInfoImpl);
}

void InitDefaultsLoginAckPlayerInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerInviteTeam_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerInviteTeamImpl);
}

void InitDefaultsLoginNotifyPlayerInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyPlayerInviteTeam_default_instance_;
    new (ptr) ::GameProto::LoginNotifyPlayerInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyPlayerInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyPlayerInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyPlayerInviteTeamImpl);
}

void InitDefaultsLoginAckPlayerChangeSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerChangeSlot_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerChangeSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerChangeSlot::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerChangeSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerChangeSlotImpl);
}

void InitDefaultsLoginNotifyPlayerTeamKickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyPlayerTeamKick_default_instance_;
    new (ptr) ::GameProto::LoginNotifyPlayerTeamKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyPlayerTeamKick::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyPlayerTeamKick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyPlayerTeamKickImpl);
}

void InitDefaultsLoginAckPlayerGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerGameStart_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerGameStart::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerGameStartImpl);
}

void InitDefaultsLoginAckPlayerOnLinePlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerOnLinePlayer_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerOnLinePlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerOnLinePlayer::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerOnLinePlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerOnLinePlayerImpl);
}

void InitDefaultsLoginAckPlayerEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerEnterTeam_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerEnterTeamImpl);
}

void InitDefaultsLoginNotifyPlayerRefuseEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyPlayerRefuseEnterTeam_default_instance_;
    new (ptr) ::GameProto::LoginNotifyPlayerRefuseEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyPlayerRefuseEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyPlayerRefuseEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyPlayerRefuseEnterTeamImpl);
}

void InitDefaultsLoginAckPlayerLeaveTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckPlayerLeaveTeam_default_instance_;
    new (ptr) ::GameProto::LoginAckPlayerLeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckPlayerLeaveTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginAckPlayerLeaveTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckPlayerLeaveTeamImpl);
}

void InitDefaultsLoginNotifyLoginPlayerKickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyLoginPlayerKick_default_instance_;
    new (ptr) ::GameProto::LoginNotifyLoginPlayerKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyLoginPlayerKick::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyLoginPlayerKick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyLoginPlayerKickImpl);
}

void InitDefaultsLoginRequestLoginInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestLoginInviteTeam_default_instance_;
    new (ptr) ::GameProto::LoginRequestLoginInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestLoginInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestLoginInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestLoginInviteTeamImpl);
}

void InitDefaultsLoginAckLoginInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginAckLoginInviteTeam_default_instance_;
    new (ptr) ::GameProto::LoginAckLoginInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginAckLoginInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginAckLoginInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginAckLoginInviteTeamImpl);
}

void InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginNotifyLoginPlayerRefuseEnterTeam_default_instance_;
    new (ptr) ::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeamImpl);
}

void InitDefaultsLoginRequestTeamMakeTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  {
    void* ptr = &::GameProto::_LoginRequestTeamMakeTeam_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamMakeTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamMakeTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamMakeTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamMakeTeamImpl);
}

void InitDefaultsLoginRequestTeamInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestTeamInviteTeam_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamInviteTeamImpl);
}

void InitDefaultsLoginRequestTeamChangeSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestTeamChangeSlot_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamChangeSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamChangeSlot::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamChangeSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamChangeSlotImpl);
}

void InitDefaultsLoginRequestTeamKickPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestTeamKickPlayer_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamKickPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamKickPlayer::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamKickPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamKickPlayerImpl);
}

void InitDefaultsLoginRequestTeamGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestTeamGameStart_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamGameStart::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamGameStartImpl);
}

void InitDefaultsLoginRequestTeamEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsRoleData();
  {
    void* ptr = &::GameProto::_LoginRequestTeamEnterTeam_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamEnterTeamImpl);
}

void InitDefaultsLoginRequestTeamPlayerLeaveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_LoginRequestTeamPlayerLeave_default_instance_;
    new (ptr) ::GameProto::LoginRequestTeamPlayerLeave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::LoginRequestTeamPlayerLeave::InitAsDefaultInstance();
}

void InitDefaultsLoginRequestTeamPlayerLeave() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestTeamPlayerLeaveImpl);
}

void InitDefaultsTeamAckLoginMakeTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginMakeTeam_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginMakeTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginMakeTeam::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginMakeTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginMakeTeamImpl);
}

void InitDefaultsTeamNotifyLoginTeamInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsTeamRoleData();
  {
    void* ptr = &::GameProto::_TeamNotifyLoginTeamInfo_default_instance_;
    new (ptr) ::GameProto::TeamNotifyLoginTeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamNotifyLoginTeamInfo::InitAsDefaultInstance();
}

void InitDefaultsTeamNotifyLoginTeamInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamNotifyLoginTeamInfoImpl);
}

void InitDefaultsTeamAckLoginInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginInviteTeam_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginInviteTeamImpl);
}

void InitDefaultsTeamAckLoginChangeSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginChangeSlot_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginChangeSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginChangeSlot::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginChangeSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginChangeSlotImpl);
}

void InitDefaultsTeamAckLoginKickPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginKickPlayer_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginKickPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginKickPlayer::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginKickPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginKickPlayerImpl);
}

void InitDefaultsTeamAckLoginGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginGameStart_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginGameStart::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginGameStartImpl);
}

void InitDefaultsTeamAckLoginEnterTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginEnterTeam_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginEnterTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginEnterTeam::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginEnterTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginEnterTeamImpl);
}

void InitDefaultsTeamAckLoginPlayerLeaveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamAckLoginPlayerLeave_default_instance_;
    new (ptr) ::GameProto::TeamAckLoginPlayerLeave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamAckLoginPlayerLeave::InitAsDefaultInstance();
}

void InitDefaultsTeamAckLoginPlayerLeave() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamAckLoginPlayerLeaveImpl);
}

void InitDefaultsTeamRequestGameManagerGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_TeamRequestGameManagerGameStart_default_instance_;
    new (ptr) ::GameProto::TeamRequestGameManagerGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::TeamRequestGameManagerGameStart::InitAsDefaultInstance();
}

void InitDefaultsTeamRequestGameManagerGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamRequestGameManagerGameStartImpl);
}

void InitDefaultsGameManagerAckTeamGameStartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameManagerAckTeamGameStart_default_instance_;
    new (ptr) ::GameProto::GameManagerAckTeamGameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameManagerAckTeamGameStart::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckTeamGameStart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckTeamGameStartImpl);
}

void InitDefaultsGameNotifyGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameNotifyGameManagerInfo_default_instance_;
    new (ptr) ::GameProto::GameNotifyGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckGameInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameManagerAckGameInfoResult_default_instance_;
    new (ptr) ::GameProto::GameManagerAckGameInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameManagerAckGameInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckGameInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckGameInfoResultImpl);
}

void InitDefaultsPlayerRequestGameManagerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestGameManagerInfo_default_instance_;
    new (ptr) ::GameProto::PlayerRequestGameManagerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestGameManagerInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameManagerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameManagerInfoImpl);
}

void InitDefaultsGameManagerAckPlayerInfoResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameManagerAckPlayerInfoResult_default_instance_;
    new (ptr) ::GameProto::GameManagerAckPlayerInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameManagerAckPlayerInfoResult::InitAsDefaultInstance();
}

void InitDefaultsGameManagerAckPlayerInfoResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameManagerAckPlayerInfoResultImpl);
}

void InitDefaultsPlayerRequestGameTestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestGameTest_default_instance_;
    new (ptr) ::GameProto::PlayerRequestGameTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestGameTest::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameTest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameTestImpl);
}

void InitDefaultsPlayerRequestGameEnterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestGameEnter_default_instance_;
    new (ptr) ::GameProto::PlayerRequestGameEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestGameEnter::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestGameEnter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestGameEnterImpl);
}

void InitDefaultsPlayerRequestMoveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestMove_default_instance_;
    new (ptr) ::GameProto::PlayerRequestMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestMove::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestMove() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestMoveImpl);
}

void InitDefaultsPlayerRequestRotationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_PlayerRequestRotation_default_instance_;
    new (ptr) ::GameProto::PlayerRequestRotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::PlayerRequestRotation::InitAsDefaultInstance();
}

void InitDefaultsPlayerRequestRotation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRequestRotationImpl);
}

void InitDefaultsGameAckPlayerEnterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameAckPlayerEnter_default_instance_;
    new (ptr) ::GameProto::GameAckPlayerEnter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameAckPlayerEnter::InitAsDefaultInstance();
}

void InitDefaultsGameAckPlayerEnter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameAckPlayerEnterImpl);
}

void InitDefaultsGameNotifyPlayerGameConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsGameConfigCommon();
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameConfig_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameConfig::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameConfigImpl);
}

void InitDefaultsGameNotifyPlayerGameRoleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsGameCommonRoleData();
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameRoleData_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameRoleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameRoleData::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameRoleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameRoleDataImpl);
}

void InitDefaultsGameNotifyPlayerGameSceneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsGameCommonSceneInfo();
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameSceneInfo_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameSceneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameSceneInfo::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameSceneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameSceneInfoImpl);
}

void InitDefaultsGameNotifyPlayerPrepareTimeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameNotifyPlayerPrepareTime_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerPrepareTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerPrepareTime::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerPrepareTime() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerPrepareTimeImpl);
}

void InitDefaultsGameNotifyPlayerGameReadyTimeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameReadyTime_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameReadyTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameReadyTime::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameReadyTime() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameReadyTimeImpl);
}

void InitDefaultsGameNotifyPlayerGameStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameState_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameState::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameStateImpl);
}

void InitDefaultsGameNotifyPlayerGameInitTetrisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsTetris();
  {
    void* ptr = &::GameProto::_GameNotifyPlayerGameInitTetris_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerGameInitTetris();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerGameInitTetris::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerGameInitTetris() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerGameInitTetrisImpl);
}

void InitDefaultsGameNotifyPlayerNextTetrisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_web_5fdata_2eproto::InitDefaultsTetris();
  {
    void* ptr = &::GameProto::_GameNotifyPlayerNextTetris_default_instance_;
    new (ptr) ::GameProto::GameNotifyPlayerNextTetris();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::GameNotifyPlayerNextTetris::InitAsDefaultInstance();
}

void InitDefaultsGameNotifyPlayerNextTetris() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameNotifyPlayerNextTetrisImpl);
}

void InitDefaultsServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameProto::_ServerInfo_default_instance_;
    new (ptr) ::GameProto::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginServerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, dw_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, dw_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLogin, sz_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginMakeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginInviteTeam, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginChangeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginChangeSlot, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginOnLinePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginEnterTeam, dw_team_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginEnterTeam, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginRefuseEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginRefuseEnterTeam, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginRefuseEnterTeam, sz_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestLoginLeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerServerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerServerId, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerServerId, dw_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLoginResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLoginResult, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerGameKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerGameKick, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerMakeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerMakeTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerMakeTeam, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerMakeTeam, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerTeamInfo, team_role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerTeamInfo, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerInviteTeam, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerInviteTeam, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerInviteTeam, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerInviteTeam, dw_team_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerChangeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerChangeSlot, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerTeamKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, sz_listen_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerGameStart, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerOnLinePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerOnLinePlayer, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerOnLinePlayer, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerEnterTeam, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerRefuseEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerRefuseEnterTeam, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyPlayerRefuseEnterTeam, sz_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckPlayerLeaveTeam, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerKick, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestLoginInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestLoginInviteTeam, qw_invite_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestLoginInviteTeam, qw_invitee_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestLoginInviteTeam, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestLoginInviteTeam, dw_team_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckLoginInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckLoginInviteTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckLoginInviteTeam, qw_invite_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginAckLoginInviteTeam, qw_invitee_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam, qw_invite_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam, qw_invitee_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam, sz_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamMakeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamMakeTeam, role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamMakeTeam, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamInviteTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamInviteTeam, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamChangeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamChangeSlot, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamChangeSlot, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamKickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamKickPlayer, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamKickPlayer, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamGameStart, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamGameStart, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamEnterTeam, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamEnterTeam, role_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamPlayerLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamPlayerLeave, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::LoginRequestTeamPlayerLeave, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginMakeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginMakeTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginMakeTeam, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginMakeTeam, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginMakeTeam, dw_slot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamNotifyLoginTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamNotifyLoginTeamInfo, team_role_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamNotifyLoginTeamInfo, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamNotifyLoginTeamInfo, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginInviteTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginInviteTeam, dw_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginChangeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginChangeSlot, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginChangeSlot, dw_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginKickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginKickPlayer, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginKickPlayer, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, sz_listen_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginGameStart, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginEnterTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginEnterTeam, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginEnterTeam, qw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginEnterTeam, qw_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginPlayerLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginPlayerLeave, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamAckLoginPlayerLeave, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRequestGameManagerGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRequestGameManagerGameStart, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::TeamRequestGameManagerGameStart, qw_player_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckTeamGameStart, sz_listen_ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_slave_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, qw_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyGameManagerInfo, dw_team_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckGameInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckGameInfoResult, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameManagerInfo, dw_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameManagerAckPlayerInfoResult, dw_slave_server_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameTest, sz_test_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestGameEnter, qw_player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestMove, f_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestMove, e_direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestRotation, f_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::PlayerRequestRotation, e_direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameAckPlayerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameAckPlayerEnter, dw_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameAckPlayerEnter, dw_game_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameConfig, dw_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameConfig, common_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameRoleData, dw_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameRoleData, common_role_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameSceneInfo, dw_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameSceneInfo, common_scene_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerPrepareTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerPrepareTime, dw_left_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameReadyTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameReadyTime, dw_left_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameInitTetris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameInitTetris, dw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameInitTetris, f_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameInitTetris, curr_tetris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerGameInitTetris, next_tetris_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerNextTetris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerNextTetris, dw_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerNextTetris, f_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::GameNotifyPlayerNextTetris, next_tetris_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, sz_listen_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_team_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_game_server_manager_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerInfo, dw_login_port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameProto::PlayerRequestLoginServerId)},
  { 5, -1, sizeof(::GameProto::PlayerRequestLogin)},
  { 16, -1, sizeof(::GameProto::PlayerRequestLoginMakeTeam)},
  { 21, -1, sizeof(::GameProto::PlayerRequestLoginInviteTeam)},
  { 27, -1, sizeof(::GameProto::PlayerRequestLoginChangeSlot)},
  { 33, -1, sizeof(::GameProto::PlayerRequestLoginGameStart)},
  { 38, -1, sizeof(::GameProto::PlayerRequestLoginOnLinePlayer)},
  { 43, -1, sizeof(::GameProto::PlayerRequestLoginEnterTeam)},
  { 50, -1, sizeof(::GameProto::PlayerRequestLoginRefuseEnterTeam)},
  { 57, -1, sizeof(::GameProto::PlayerRequestLoginLeaveTeam)},
  { 62, -1, sizeof(::GameProto::LoginAckPlayerServerId)},
  { 69, -1, sizeof(::GameProto::LoginAckPlayerLoginResult)},
  { 75, -1, sizeof(::GameProto::LoginNotifyPlayerGameKick)},
  { 81, -1, sizeof(::GameProto::LoginAckPlayerMakeTeam)},
  { 89, -1, sizeof(::GameProto::LoginNotifyPlayerTeamInfo)},
  { 96, -1, sizeof(::GameProto::LoginAckPlayerInviteTeam)},
  { 102, -1, sizeof(::GameProto::LoginNotifyPlayerInviteTeam)},
  { 110, -1, sizeof(::GameProto::LoginAckPlayerChangeSlot)},
  { 116, -1, sizeof(::GameProto::LoginNotifyPlayerTeamKick)},
  { 121, -1, sizeof(::GameProto::LoginAckPlayerGameStart)},
  { 132, -1, sizeof(::GameProto::LoginAckPlayerOnLinePlayer)},
  { 139, -1, sizeof(::GameProto::LoginAckPlayerEnterTeam)},
  { 145, -1, sizeof(::GameProto::LoginNotifyPlayerRefuseEnterTeam)},
  { 152, -1, sizeof(::GameProto::LoginAckPlayerLeaveTeam)},
  { 158, -1, sizeof(::GameProto::LoginNotifyLoginPlayerKick)},
  { 164, -1, sizeof(::GameProto::LoginRequestLoginInviteTeam)},
  { 173, -1, sizeof(::GameProto::LoginAckLoginInviteTeam)},
  { 181, -1, sizeof(::GameProto::LoginNotifyLoginPlayerRefuseEnterTeam)},
  { 189, -1, sizeof(::GameProto::LoginRequestTeamMakeTeam)},
  { 196, -1, sizeof(::GameProto::LoginRequestTeamInviteTeam)},
  { 203, -1, sizeof(::GameProto::LoginRequestTeamChangeSlot)},
  { 210, -1, sizeof(::GameProto::LoginRequestTeamKickPlayer)},
  { 217, -1, sizeof(::GameProto::LoginRequestTeamGameStart)},
  { 224, -1, sizeof(::GameProto::LoginRequestTeamEnterTeam)},
  { 231, -1, sizeof(::GameProto::LoginRequestTeamPlayerLeave)},
  { 238, -1, sizeof(::GameProto::TeamAckLoginMakeTeam)},
  { 247, -1, sizeof(::GameProto::TeamNotifyLoginTeamInfo)},
  { 255, -1, sizeof(::GameProto::TeamAckLoginInviteTeam)},
  { 262, -1, sizeof(::GameProto::TeamAckLoginChangeSlot)},
  { 269, -1, sizeof(::GameProto::TeamAckLoginKickPlayer)},
  { 276, -1, sizeof(::GameProto::TeamAckLoginGameStart)},
  { 288, -1, sizeof(::GameProto::TeamAckLoginEnterTeam)},
  { 296, -1, sizeof(::GameProto::TeamAckLoginPlayerLeave)},
  { 303, -1, sizeof(::GameProto::TeamRequestGameManagerGameStart)},
  { 310, -1, sizeof(::GameProto::GameManagerAckTeamGameStart)},
  { 321, -1, sizeof(::GameProto::GameNotifyGameManagerInfo)},
  { 331, -1, sizeof(::GameProto::GameManagerAckGameInfoResult)},
  { 337, -1, sizeof(::GameProto::PlayerRequestGameManagerInfo)},
  { 343, -1, sizeof(::GameProto::GameManagerAckPlayerInfoResult)},
  { 351, -1, sizeof(::GameProto::PlayerRequestGameTest)},
  { 357, -1, sizeof(::GameProto::PlayerRequestGameEnter)},
  { 363, -1, sizeof(::GameProto::PlayerRequestMove)},
  { 370, -1, sizeof(::GameProto::PlayerRequestRotation)},
  { 377, -1, sizeof(::GameProto::GameAckPlayerEnter)},
  { 384, -1, sizeof(::GameProto::GameNotifyPlayerGameConfig)},
  { 391, -1, sizeof(::GameProto::GameNotifyPlayerGameRoleData)},
  { 398, -1, sizeof(::GameProto::GameNotifyPlayerGameSceneInfo)},
  { 405, -1, sizeof(::GameProto::GameNotifyPlayerPrepareTime)},
  { 411, -1, sizeof(::GameProto::GameNotifyPlayerGameReadyTime)},
  { 417, -1, sizeof(::GameProto::GameNotifyPlayerGameState)},
  { 423, -1, sizeof(::GameProto::GameNotifyPlayerGameInitTetris)},
  { 432, -1, sizeof(::GameProto::GameNotifyPlayerNextTetris)},
  { 440, -1, sizeof(::GameProto::ServerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginServerId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginMakeTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginChangeSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginOnLinePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginRefuseEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestLoginLeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerServerId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerLoginResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyPlayerGameKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerMakeTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyPlayerTeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyPlayerInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerChangeSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyPlayerTeamKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerOnLinePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyPlayerRefuseEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckPlayerLeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyLoginPlayerKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestLoginInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginAckLoginInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginNotifyLoginPlayerRefuseEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamMakeTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamChangeSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamKickPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_LoginRequestTeamPlayerLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginMakeTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamNotifyLoginTeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginChangeSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginKickPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginEnterTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamAckLoginPlayerLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_TeamRequestGameManagerGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameManagerAckTeamGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameManagerAckGameInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestGameManagerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameManagerAckPlayerInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestGameTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestGameEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_PlayerRequestRotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameAckPlayerEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameRoleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameSceneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerPrepareTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameReadyTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerGameInitTetris_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_GameNotifyPlayerNextTetris_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_ServerInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "web_game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 63);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016web_game.proto\022\tGameProto\032\016web_data.pr"
      "oto\"\034\n\032PlayerRequestLoginServerId\"\211\001\n\022Pl"
      "ayerRequestLogin\022\024\n\014qw_player_id\030\001 \001(\004\022\024"
      "\n\014sz_nick_name\030\002 \001(\t\022\021\n\tsz_avatar\030\003 \001(\t\022"
      "\016\n\006dw_sex\030\004 \001(\r\022\022\n\ndw_balance\030\005 \001(\r\022\020\n\010s"
      "z_token\030\006 \001(\t\"\034\n\032PlayerRequestLoginMakeT"
      "eam\"4\n\034PlayerRequestLoginInviteTeam\022\024\n\014q"
      "w_player_id\030\001 \001(\004\"2\n\034PlayerRequestLoginC"
      "hangeSlot\022\022\n\ndw_slot_id\030\001 \001(\r\"\035\n\033PlayerR"
      "equestLoginGameStart\" \n\036PlayerRequestLog"
      "inOnLinePlayer\"L\n\033PlayerRequestLoginEnte"
      "rTeam\022\031\n\021dw_team_server_id\030\001 \001(\r\022\022\n\nqw_t"
      "eam_id\030\002 \001(\004\"L\n!PlayerRequestLoginRefuse"
      "EnterTeam\022\024\n\014qw_player_id\030\001 \001(\004\022\021\n\tsz_Re"
      "ason\030\002 \001(\t\"\035\n\033PlayerRequestLoginLeaveTea"
      "m\"A\n\026LoginAckPlayerServerId\022\021\n\tdw_result"
      "\030\001 \001(\r\022\024\n\014dw_server_id\030\002 \001(\r\".\n\031LoginAck"
      "PlayerLoginResult\022\021\n\tdw_result\030\001 \001(\r\".\n\031"
      "LoginNotifyPlayerGameKick\022\021\n\tdw_result\030\001"
      " \001(\r\"S\n\026LoginAckPlayerMakeTeam\022\021\n\tdw_res"
      "ult\030\001 \001(\r\022\022\n\nqw_team_id\030\002 \001(\004\022\022\n\ndw_slot"
      "_id\030\003 \001(\r\"`\n\031LoginNotifyPlayerTeamInfo\022/"
      "\n\016team_role_data\030\001 \003(\0132\027.GameProto.TeamR"
      "oleData\022\022\n\nqw_team_id\030\002 \001(\004\"-\n\030LoginAckP"
      "layerInviteTeam\022\021\n\tdw_result\030\001 \001(\r\"b\n\033Lo"
      "ginNotifyPlayerInviteTeam\022\024\n\014qw_player_i"
      "d\030\001 \001(\004\022\022\n\nqw_team_id\030\002 \001(\004\022\031\n\021dw_team_s"
      "erver_id\030\003 \001(\r\"-\n\030LoginAckPlayerChangeSl"
      "ot\022\021\n\tdw_result\030\001 \001(\r\"\033\n\031LoginNotifyPlay"
      "erTeamKick\"\244\001\n\027LoginAckPlayerGameStart\022\021"
      "\n\tdw_result\030\001 \001(\r\022\026\n\016dw_player_port\030\002 \001("
      "\r\022\026\n\016dw_server_port\030\003 \001(\r\022\034\n\024dw_slave_se"
      "rver_port\030\004 \001(\r\022\024\n\014sz_listen_ip\030\005 \001(\t\022\022\n"
      "\nqw_team_id\030\006 \001(\004\"E\n\032LoginAckPlayerOnLin"
      "ePlayer\022\021\n\tdw_result\030\001 \001(\r\022\024\n\014qw_player_"
      "id\030\002 \003(\004\",\n\027LoginAckPlayerEnterTeam\022\021\n\td"
      "w_result\030\001 \001(\r\"K\n LoginNotifyPlayerRefus"
      "eEnterTeam\022\024\n\014qw_player_id\030\001 \001(\004\022\021\n\tsz_R"
      "eason\030\002 \001(\t\",\n\027LoginAckPlayerLeaveTeam\022\021"
      "\n\tdw_result\030\001 \001(\r\"2\n\032LoginNotifyLoginPla"
      "yerKick\022\024\n\014qw_player_id\030\001 \001(\004\"y\n\033LoginRe"
      "questLoginInviteTeam\022\024\n\014qw_invite_id\030\001 \001"
      "(\004\022\025\n\rqw_invitee_id\030\002 \001(\004\022\022\n\nqw_team_id\030"
      "\003 \001(\004\022\031\n\021dw_team_server_id\030\004 \001(\r\"Y\n\027Logi"
      "nAckLoginInviteTeam\022\021\n\tdw_result\030\001 \001(\r\022\024"
      "\n\014qw_invite_id\030\002 \001(\004\022\025\n\rqw_invitee_id\030\003 "
      "\001(\004\"g\n%LoginNotifyLoginPlayerRefuseEnter"
      "Team\022\024\n\014qw_invite_id\030\001 \001(\004\022\025\n\rqw_invitee"
      "_id\030\002 \001(\004\022\021\n\tsz_Reason\030\003 \001(\t\"V\n\030LoginReq"
      "uestTeamMakeTeam\022&\n\trole_data\030\001 \001(\0132\023.Ga"
      "meProto.RoleData\022\022\n\nqw_team_id\030\002 \001(\004\"C\n\032"
      "LoginRequestTeamInviteTeam\022\021\n\tdw_result\030"
      "\001 \001(\r\022\022\n\ndw_slot_id\030\002 \001(\r\"C\n\032LoginReques"
      "tTeamChangeSlot\022\021\n\tdw_result\030\001 \001(\r\022\022\n\ndw"
      "_slot_id\030\002 \001(\r\"F\n\032LoginRequestTeamKickPl"
      "ayer\022\024\n\014qw_player_id\030\001 \001(\004\022\022\n\nqw_team_id"
      "\030\002 \001(\004\"E\n\031LoginRequestTeamGameStart\022\022\n\nq"
      "w_team_id\030\001 \001(\004\022\024\n\014qw_player_id\030\002 \001(\004\"W\n"
      "\031LoginRequestTeamEnterTeam\022\022\n\nqw_team_id"
      "\030\001 \001(\004\022&\n\trole_data\030\002 \001(\0132\023.GameProto.Ro"
      "leData\"G\n\033LoginRequestTeamPlayerLeave\022\024\n"
      "\014qw_player_id\030\001 \001(\004\022\022\n\nqw_team_id\030\002 \001(\004\""
      "g\n\024TeamAckLoginMakeTeam\022\021\n\tdw_result\030\001 \001"
      "(\r\022\024\n\014qw_player_id\030\002 \001(\004\022\022\n\nqw_team_id\030\003"
      " \001(\004\022\022\n\ndw_slot_id\030\004 \001(\r\"t\n\027TeamNotifyLo"
      "ginTeamInfo\022/\n\016team_role_data\030\001 \003(\0132\027.Ga"
      "meProto.TeamRoleData\022\022\n\nqw_team_id\030\002 \001(\004"
      "\022\024\n\014qw_player_id\030\003 \001(\004\"<\n\026TeamAckLoginIn"
      "viteTeam\022\021\n\tdw_result\030\001 \001(\r\022\017\n\007dw_slot\030\002"
      " \001(\r\"<\n\026TeamAckLoginChangeSlot\022\021\n\tdw_res"
      "ult\030\001 \001(\r\022\017\n\007dw_slot\030\002 \001(\r\"A\n\026TeamAckLog"
      "inKickPlayer\022\021\n\tdw_result\030\001 \001(\r\022\024\n\014qw_pl"
      "ayer_id\030\002 \001(\004\"\270\001\n\025TeamAckLoginGameStart\022"
      "\021\n\tdw_result\030\001 \001(\r\022\026\n\016dw_player_port\030\002 \001"
      "(\r\022\026\n\016dw_server_port\030\003 \001(\r\022\034\n\024dw_slave_s"
      "erver_port\030\004 \001(\r\022\024\n\014sz_listen_ip\030\005 \001(\t\022\024"
      "\n\014qw_player_id\030\006 \001(\004\022\022\n\nqw_team_id\030\007 \001(\004"
      "\"T\n\025TeamAckLoginEnterTeam\022\021\n\tdw_result\030\001"
      " \001(\r\022\024\n\014qw_player_id\030\002 \001(\004\022\022\n\nqw_team_id"
      "\030\003 \001(\004\"B\n\027TeamAckLoginPlayerLeave\022\021\n\tdw_"
      "result\030\001 \001(\r\022\024\n\014qw_player_id\030\002 \001(\004\"L\n\037Te"
      "amRequestGameManagerGameStart\022\022\n\nqw_team"
      "_id\030\001 \001(\004\022\025\n\rqw_player_ids\030\002 \003(\004\"\250\001\n\033Gam"
      "eManagerAckTeamGameStart\022\021\n\tdw_result\030\001 "
      "\001(\r\022\026\n\016dw_player_port\030\002 \001(\r\022\026\n\016dw_server"
      "_port\030\003 \001(\r\022\034\n\024dw_slave_server_port\030\004 \001("
      "\r\022\022\n\nqw_team_id\030\005 \001(\004\022\024\n\014sz_listen_ip\030\006 "
      "\001(\t\"\230\001\n\031GameNotifyGameManagerInfo\022\026\n\016dw_"
      "player_port\030\001 \001(\r\022\026\n\016dw_server_port\030\002 \001("
      "\r\022\034\n\024dw_slave_server_port\030\003 \001(\r\022\022\n\nqw_te"
      "am_id\030\004 \001(\004\022\031\n\021dw_team_server_id\030\005 \001(\r\"1"
      "\n\034GameManagerAckGameInfoResult\022\021\n\tdw_res"
      "ult\030\001 \001(\r\"1\n\034PlayerRequestGameManagerInf"
      "o\022\021\n\tdw_result\030\001 \001(\r\"n\n\036GameManagerAckPl"
      "ayerInfoResult\022\026\n\016dw_player_port\030\001 \001(\r\022\026"
      "\n\016dw_server_port\030\002 \001(\r\022\034\n\024dw_slave_serve"
      "r_port\030\003 \001(\r\"(\n\025PlayerRequestGameTest\022\017\n"
      "\007sz_test\030\001 \001(\t\".\n\026PlayerRequestGameEnter"
      "\022\024\n\014qw_player_id\030\001 \001(\004\"S\n\021PlayerRequestM"
      "ove\022\016\n\006f_tick\030\001 \001(\002\022.\n\013e_direction\030\002 \001(\016"
      "2\031.GameProto.EMoveDirection\"[\n\025PlayerReq"
      "uestRotation\022\016\n\006f_tick\030\001 \001(\002\0222\n\013e_direct"
      "ion\030\002 \001(\0162\035.GameProto.ERotationDirection"
      "\"=\n\022GameAckPlayerEnter\022\021\n\tdw_result\030\001 \001("
      "\r\022\024\n\014dw_game_type\030\002 \001(\r\"f\n\032GameNotifyPla"
      "yerGameConfig\022\024\n\014dw_game_type\030\001 \001(\r\0222\n\rc"
      "ommon_config\030\002 \001(\0132\033.GameProto.GameConfi"
      "gCommon\"m\n\034GameNotifyPlayerGameRoleData\022"
      "\024\n\014dw_game_type\030\001 \001(\r\0227\n\020common_role_dat"
      "a\030\002 \001(\0132\035.GameProto.GameCommonRoleData\"p"
      "\n\035GameNotifyPlayerGameSceneInfo\022\024\n\014dw_ga"
      "me_type\030\001 \001(\r\0229\n\021common_scene_info\030\002 \001(\013"
      "2\036.GameProto.GameCommonSceneInfo\"3\n\033Game"
      "NotifyPlayerPrepareTime\022\024\n\014dw_left_time\030"
      "\001 \001(\r\"5\n\035GameNotifyPlayerGameReadyTime\022\024"
      "\n\014dw_left_time\030\001 \001(\r\"F\n\031GameNotifyPlayer"
      "GameState\022)\n\005state\030\001 \001(\0162\032.GameProto.EGa"
      "meSceneState\"\226\001\n\036GameNotifyPlayerGameIni"
      "tTetris\022\024\n\014dw_player_id\030\001 \001(\004\022\016\n\006f_tick\030"
      "\002 \001(\002\022&\n\013curr_tetris\030\003 \001(\0132\021.GameProto.T"
      "etris\022&\n\013next_tetris\030\004 \001(\0132\021.GameProto.T"
      "etris\"j\n\032GameNotifyPlayerNextTetris\022\024\n\014d"
      "w_player_id\030\001 \001(\004\022\016\n\006f_tick\030\002 \001(\002\022&\n\013nex"
      "t_tetris\030\003 \001(\0132\021.GameProto.Tetris\"\212\001\n\nSe"
      "rverInfo\022\024\n\014dw_server_id\030\001 \001(\r\022\024\n\014sz_lis"
      "ten_ip\030\002 \001(\t\022\024\n\014dw_team_port\030\003 \001(\r\022#\n\033dw"
      "_game_server_manager_port\030\004 \001(\r\022\025\n\rdw_lo"
      "gin_port\030\005 \001(\r*I\n\013EServerType\022\013\n\007ST_NONE"
      "\020\000\022\014\n\010ST_Login\020\001\022\013\n\007ST_Team\020\002\022\022\n\016ST_Game"
      "Manager\020\003*\'\n\tETeamType\022\013\n\007TT_NONE\020\000\022\r\n\tT"
      "T_Normal\020\001*\214\002\n\nEErrorCode\022\013\n\007EC_NONE\020\000\022\024"
      "\n\020EC_AlreadyInTeam\020\001\022\026\n\022EC_MakeTeamNotId"
      "le\020\002\022\027\n\023EC_CannotFindPlayer\020\003\022\017\n\013EC_NoTe"
      "amId\020\004\022\020\n\014EC_NotLeader\020\005\022\023\n\017EC_TeamHasSt"
      "art\020\006\022\032\n\026EC_NoGameManagerServer\020\007\022\023\n\017EC_"
      "NoTeamServer\020\010\022\024\n\020EC_NoLoginServer\020\t\022\026\n\022"
      "EC_PlayerNotOnline\020\n\022\023\n\017EC_FailIntoTeam\020"
      "\013*I\n\016EMoveDirection\022\014\n\010EMD_NONE\020\000\022\014\n\010EMD"
      "_Down\020\001\022\014\n\010EMD_Left\020\002\022\r\n\tEMD_Right\020\003*\?\n\022"
      "ERotationDirection\022\014\n\010ERD_NONE\020\000\022\014\n\010ERD_"
      "Left\020\001\022\r\n\tERD_Right\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "web_game.proto", &protobuf_RegisterTypes);
  ::protobuf_web_5fdata_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_web_5fgame_2eproto
namespace GameProto {
const ::google::protobuf::EnumDescriptor* EServerType_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[0];
}
bool EServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamType_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[1];
}
bool ETeamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EErrorCode_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[2];
}
bool EErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoveDirection_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[3];
}
bool EMoveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERotationDirection_descriptor() {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_web_5fgame_2eproto::file_level_enum_descriptors[4];
}
bool ERotationDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayerRequestLoginServerId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginServerId::PlayerRequestLoginServerId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginServerId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginServerId)
}
PlayerRequestLoginServerId::PlayerRequestLoginServerId(const PlayerRequestLoginServerId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginServerId)
}

void PlayerRequestLoginServerId::SharedCtor() {
  _cached_size_ = 0;
}

PlayerRequestLoginServerId::~PlayerRequestLoginServerId() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginServerId)
  SharedDtor();
}

void PlayerRequestLoginServerId::SharedDtor() {
}

void PlayerRequestLoginServerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginServerId::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginServerId& PlayerRequestLoginServerId::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginServerId();
  return *internal_default_instance();
}

PlayerRequestLoginServerId* PlayerRequestLoginServerId::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginServerId* n = new PlayerRequestLoginServerId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginServerId::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerRequestLoginServerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginServerId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginServerId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginServerId)
  return false;
#undef DO_
}

void PlayerRequestLoginServerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginServerId)
}

::google::protobuf::uint8* PlayerRequestLoginServerId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginServerId)
  return target;
}

size_t PlayerRequestLoginServerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginServerId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginServerId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginServerId)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginServerId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginServerId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginServerId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginServerId)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginServerId::MergeFrom(const PlayerRequestLoginServerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginServerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerRequestLoginServerId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginServerId::CopyFrom(const PlayerRequestLoginServerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginServerId::IsInitialized() const {
  return true;
}

void PlayerRequestLoginServerId::Swap(PlayerRequestLoginServerId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginServerId::InternalSwap(PlayerRequestLoginServerId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginServerId::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLogin::kQwPlayerIdFieldNumber;
const int PlayerRequestLogin::kSzNickNameFieldNumber;
const int PlayerRequestLogin::kSzAvatarFieldNumber;
const int PlayerRequestLogin::kDwSexFieldNumber;
const int PlayerRequestLogin::kDwBalanceFieldNumber;
const int PlayerRequestLogin::kSzTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLogin::PlayerRequestLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLogin)
}
PlayerRequestLogin::PlayerRequestLogin(const PlayerRequestLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_nick_name().size() > 0) {
    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_avatar().size() > 0) {
    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  sz_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_token().size() > 0) {
    sz_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_token_);
  }
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_balance_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLogin)
}

void PlayerRequestLogin::SharedCtor() {
  sz_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_balance_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  _cached_size_ = 0;
}

PlayerRequestLogin::~PlayerRequestLogin() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLogin)
  SharedDtor();
}

void PlayerRequestLogin::SharedDtor() {
  sz_nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerRequestLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLogin::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLogin& PlayerRequestLogin::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLogin();
  return *internal_default_instance();
}

PlayerRequestLogin* PlayerRequestLogin::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLogin* n = new PlayerRequestLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sz_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_balance_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_balance_));
  _internal_metadata_.Clear();
}

bool PlayerRequestLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_nick_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_sex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_balance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_token().data(), static_cast<int>(this->sz_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLogin.sz_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLogin)
  return false;
#undef DO_
}

void PlayerRequestLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_nick_name(), output);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sz_avatar(), output);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_sex(), output);
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw_balance(), output);
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_token().data(), static_cast<int>(this->sz_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sz_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLogin)
}

::google::protobuf::uint8* PlayerRequestLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_nick_name().data(), static_cast<int>(this->sz_nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_nick_name(), target);
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_avatar().data(), static_cast<int>(this->sz_avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sz_avatar(), target);
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_sex(), target);
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw_balance(), target);
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_token().data(), static_cast<int>(this->sz_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLogin.sz_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sz_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLogin)
  return target;
}

size_t PlayerRequestLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_nick_name = 2;
  if (this->sz_nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_nick_name());
  }

  // string sz_avatar = 3;
  if (this->sz_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_avatar());
  }

  // string sz_token = 6;
  if (this->sz_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_token());
  }

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_sex = 4;
  if (this->dw_sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_sex());
  }

  // uint32 dw_balance = 5;
  if (this->dw_balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_balance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLogin)
    MergeFrom(*source);
  }
}

void PlayerRequestLogin::MergeFrom(const PlayerRequestLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_nick_name().size() > 0) {

    sz_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_nick_name_);
  }
  if (from.sz_avatar().size() > 0) {

    sz_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_avatar_);
  }
  if (from.sz_token().size() > 0) {

    sz_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_token_);
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_sex() != 0) {
    set_dw_sex(from.dw_sex());
  }
  if (from.dw_balance() != 0) {
    set_dw_balance(from.dw_balance());
  }
}

void PlayerRequestLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLogin::CopyFrom(const PlayerRequestLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLogin::IsInitialized() const {
  return true;
}

void PlayerRequestLogin::Swap(PlayerRequestLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLogin::InternalSwap(PlayerRequestLogin* other) {
  using std::swap;
  sz_nick_name_.Swap(&other->sz_nick_name_);
  sz_avatar_.Swap(&other->sz_avatar_);
  sz_token_.Swap(&other->sz_token_);
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_sex_, other->dw_sex_);
  swap(dw_balance_, other->dw_balance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLogin::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginMakeTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginMakeTeam::PlayerRequestLoginMakeTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginMakeTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginMakeTeam)
}
PlayerRequestLoginMakeTeam::PlayerRequestLoginMakeTeam(const PlayerRequestLoginMakeTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginMakeTeam)
}

void PlayerRequestLoginMakeTeam::SharedCtor() {
  _cached_size_ = 0;
}

PlayerRequestLoginMakeTeam::~PlayerRequestLoginMakeTeam() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginMakeTeam)
  SharedDtor();
}

void PlayerRequestLoginMakeTeam::SharedDtor() {
}

void PlayerRequestLoginMakeTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginMakeTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginMakeTeam& PlayerRequestLoginMakeTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginMakeTeam();
  return *internal_default_instance();
}

PlayerRequestLoginMakeTeam* PlayerRequestLoginMakeTeam::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginMakeTeam* n = new PlayerRequestLoginMakeTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginMakeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerRequestLoginMakeTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginMakeTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginMakeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginMakeTeam)
  return false;
#undef DO_
}

void PlayerRequestLoginMakeTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginMakeTeam)
}

::google::protobuf::uint8* PlayerRequestLoginMakeTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginMakeTeam)
  return target;
}

size_t PlayerRequestLoginMakeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginMakeTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginMakeTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginMakeTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginMakeTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginMakeTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginMakeTeam)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginMakeTeam::MergeFrom(const PlayerRequestLoginMakeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerRequestLoginMakeTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginMakeTeam::CopyFrom(const PlayerRequestLoginMakeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginMakeTeam::IsInitialized() const {
  return true;
}

void PlayerRequestLoginMakeTeam::Swap(PlayerRequestLoginMakeTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginMakeTeam::InternalSwap(PlayerRequestLoginMakeTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginMakeTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLoginInviteTeam::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginInviteTeam::PlayerRequestLoginInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginInviteTeam)
}
PlayerRequestLoginInviteTeam::PlayerRequestLoginInviteTeam(const PlayerRequestLoginInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qw_player_id_ = from.qw_player_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginInviteTeam)
}

void PlayerRequestLoginInviteTeam::SharedCtor() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PlayerRequestLoginInviteTeam::~PlayerRequestLoginInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginInviteTeam)
  SharedDtor();
}

void PlayerRequestLoginInviteTeam::SharedDtor() {
}

void PlayerRequestLoginInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginInviteTeam& PlayerRequestLoginInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginInviteTeam();
  return *internal_default_instance();
}

PlayerRequestLoginInviteTeam* PlayerRequestLoginInviteTeam::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginInviteTeam* n = new PlayerRequestLoginInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PlayerRequestLoginInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginInviteTeam)
  return false;
#undef DO_
}

void PlayerRequestLoginInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginInviteTeam)
}

::google::protobuf::uint8* PlayerRequestLoginInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginInviteTeam)
  return target;
}

size_t PlayerRequestLoginInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginInviteTeam)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginInviteTeam::MergeFrom(const PlayerRequestLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void PlayerRequestLoginInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginInviteTeam::CopyFrom(const PlayerRequestLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginInviteTeam::IsInitialized() const {
  return true;
}

void PlayerRequestLoginInviteTeam::Swap(PlayerRequestLoginInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginInviteTeam::InternalSwap(PlayerRequestLoginInviteTeam* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginChangeSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLoginChangeSlot::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginChangeSlot::PlayerRequestLoginChangeSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginChangeSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginChangeSlot)
}
PlayerRequestLoginChangeSlot::PlayerRequestLoginChangeSlot(const PlayerRequestLoginChangeSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_slot_id_ = from.dw_slot_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginChangeSlot)
}

void PlayerRequestLoginChangeSlot::SharedCtor() {
  dw_slot_id_ = 0u;
  _cached_size_ = 0;
}

PlayerRequestLoginChangeSlot::~PlayerRequestLoginChangeSlot() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginChangeSlot)
  SharedDtor();
}

void PlayerRequestLoginChangeSlot::SharedDtor() {
}

void PlayerRequestLoginChangeSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginChangeSlot::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginChangeSlot& PlayerRequestLoginChangeSlot::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginChangeSlot();
  return *internal_default_instance();
}

PlayerRequestLoginChangeSlot* PlayerRequestLoginChangeSlot::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginChangeSlot* n = new PlayerRequestLoginChangeSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginChangeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_slot_id_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerRequestLoginChangeSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginChangeSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_slot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginChangeSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginChangeSlot)
  return false;
#undef DO_
}

void PlayerRequestLoginChangeSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_slot_id = 1;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginChangeSlot)
}

::google::protobuf::uint8* PlayerRequestLoginChangeSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_slot_id = 1;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginChangeSlot)
  return target;
}

size_t PlayerRequestLoginChangeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginChangeSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_slot_id = 1;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginChangeSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginChangeSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginChangeSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginChangeSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginChangeSlot)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginChangeSlot::MergeFrom(const PlayerRequestLoginChangeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
}

void PlayerRequestLoginChangeSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginChangeSlot::CopyFrom(const PlayerRequestLoginChangeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginChangeSlot::IsInitialized() const {
  return true;
}

void PlayerRequestLoginChangeSlot::Swap(PlayerRequestLoginChangeSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginChangeSlot::InternalSwap(PlayerRequestLoginChangeSlot* other) {
  using std::swap;
  swap(dw_slot_id_, other->dw_slot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginChangeSlot::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginGameStart::PlayerRequestLoginGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginGameStart)
}
PlayerRequestLoginGameStart::PlayerRequestLoginGameStart(const PlayerRequestLoginGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginGameStart)
}

void PlayerRequestLoginGameStart::SharedCtor() {
  _cached_size_ = 0;
}

PlayerRequestLoginGameStart::~PlayerRequestLoginGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginGameStart)
  SharedDtor();
}

void PlayerRequestLoginGameStart::SharedDtor() {
}

void PlayerRequestLoginGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginGameStart& PlayerRequestLoginGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginGameStart();
  return *internal_default_instance();
}

PlayerRequestLoginGameStart* PlayerRequestLoginGameStart::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginGameStart* n = new PlayerRequestLoginGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerRequestLoginGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginGameStart)
  return false;
#undef DO_
}

void PlayerRequestLoginGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginGameStart)
}

::google::protobuf::uint8* PlayerRequestLoginGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginGameStart)
  return target;
}

size_t PlayerRequestLoginGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginGameStart)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginGameStart::MergeFrom(const PlayerRequestLoginGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerRequestLoginGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginGameStart::CopyFrom(const PlayerRequestLoginGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginGameStart::IsInitialized() const {
  return true;
}

void PlayerRequestLoginGameStart::Swap(PlayerRequestLoginGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginGameStart::InternalSwap(PlayerRequestLoginGameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginOnLinePlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginOnLinePlayer::PlayerRequestLoginOnLinePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginOnLinePlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginOnLinePlayer)
}
PlayerRequestLoginOnLinePlayer::PlayerRequestLoginOnLinePlayer(const PlayerRequestLoginOnLinePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginOnLinePlayer)
}

void PlayerRequestLoginOnLinePlayer::SharedCtor() {
  _cached_size_ = 0;
}

PlayerRequestLoginOnLinePlayer::~PlayerRequestLoginOnLinePlayer() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginOnLinePlayer)
  SharedDtor();
}

void PlayerRequestLoginOnLinePlayer::SharedDtor() {
}

void PlayerRequestLoginOnLinePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginOnLinePlayer::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginOnLinePlayer& PlayerRequestLoginOnLinePlayer::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginOnLinePlayer();
  return *internal_default_instance();
}

PlayerRequestLoginOnLinePlayer* PlayerRequestLoginOnLinePlayer::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginOnLinePlayer* n = new PlayerRequestLoginOnLinePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginOnLinePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerRequestLoginOnLinePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginOnLinePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginOnLinePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginOnLinePlayer)
  return false;
#undef DO_
}

void PlayerRequestLoginOnLinePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginOnLinePlayer)
}

::google::protobuf::uint8* PlayerRequestLoginOnLinePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginOnLinePlayer)
  return target;
}

size_t PlayerRequestLoginOnLinePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginOnLinePlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginOnLinePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginOnLinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginOnLinePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginOnLinePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginOnLinePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginOnLinePlayer)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginOnLinePlayer::MergeFrom(const PlayerRequestLoginOnLinePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginOnLinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerRequestLoginOnLinePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginOnLinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginOnLinePlayer::CopyFrom(const PlayerRequestLoginOnLinePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginOnLinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginOnLinePlayer::IsInitialized() const {
  return true;
}

void PlayerRequestLoginOnLinePlayer::Swap(PlayerRequestLoginOnLinePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginOnLinePlayer::InternalSwap(PlayerRequestLoginOnLinePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginOnLinePlayer::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLoginEnterTeam::kDwTeamServerIdFieldNumber;
const int PlayerRequestLoginEnterTeam::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginEnterTeam::PlayerRequestLoginEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginEnterTeam)
}
PlayerRequestLoginEnterTeam::PlayerRequestLoginEnterTeam(const PlayerRequestLoginEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_team_id_, &from.qw_team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_team_server_id_) -
    reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_team_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginEnterTeam)
}

void PlayerRequestLoginEnterTeam::SharedCtor() {
  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_team_server_id_));
  _cached_size_ = 0;
}

PlayerRequestLoginEnterTeam::~PlayerRequestLoginEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginEnterTeam)
  SharedDtor();
}

void PlayerRequestLoginEnterTeam::SharedDtor() {
}

void PlayerRequestLoginEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginEnterTeam& PlayerRequestLoginEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginEnterTeam();
  return *internal_default_instance();
}

PlayerRequestLoginEnterTeam* PlayerRequestLoginEnterTeam::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginEnterTeam* n = new PlayerRequestLoginEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_team_server_id_));
  _internal_metadata_.Clear();
}

bool PlayerRequestLoginEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_team_server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginEnterTeam)
  return false;
#undef DO_
}

void PlayerRequestLoginEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_team_server_id = 1;
  if (this->dw_team_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_team_server_id(), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginEnterTeam)
}

::google::protobuf::uint8* PlayerRequestLoginEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_team_server_id = 1;
  if (this->dw_team_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_team_server_id(), target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginEnterTeam)
  return target;
}

size_t PlayerRequestLoginEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_team_server_id = 1;
  if (this->dw_team_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginEnterTeam)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginEnterTeam::MergeFrom(const PlayerRequestLoginEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_team_server_id() != 0) {
    set_dw_team_server_id(from.dw_team_server_id());
  }
}

void PlayerRequestLoginEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginEnterTeam::CopyFrom(const PlayerRequestLoginEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginEnterTeam::IsInitialized() const {
  return true;
}

void PlayerRequestLoginEnterTeam::Swap(PlayerRequestLoginEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginEnterTeam::InternalSwap(PlayerRequestLoginEnterTeam* other) {
  using std::swap;
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_team_server_id_, other->dw_team_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginRefuseEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestLoginRefuseEnterTeam::kQwPlayerIdFieldNumber;
const int PlayerRequestLoginRefuseEnterTeam::kSzReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginRefuseEnterTeam::PlayerRequestLoginRefuseEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginRefuseEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginRefuseEnterTeam)
}
PlayerRequestLoginRefuseEnterTeam::PlayerRequestLoginRefuseEnterTeam(const PlayerRequestLoginRefuseEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_reason().size() > 0) {
    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  qw_player_id_ = from.qw_player_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginRefuseEnterTeam)
}

void PlayerRequestLoginRefuseEnterTeam::SharedCtor() {
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PlayerRequestLoginRefuseEnterTeam::~PlayerRequestLoginRefuseEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginRefuseEnterTeam)
  SharedDtor();
}

void PlayerRequestLoginRefuseEnterTeam::SharedDtor() {
  sz_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerRequestLoginRefuseEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginRefuseEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginRefuseEnterTeam& PlayerRequestLoginRefuseEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginRefuseEnterTeam();
  return *internal_default_instance();
}

PlayerRequestLoginRefuseEnterTeam* PlayerRequestLoginRefuseEnterTeam::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginRefuseEnterTeam* n = new PlayerRequestLoginRefuseEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginRefuseEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PlayerRequestLoginRefuseEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_Reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginRefuseEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginRefuseEnterTeam)
  return false;
#undef DO_
}

void PlayerRequestLoginRefuseEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginRefuseEnterTeam)
}

::google::protobuf::uint8* PlayerRequestLoginRefuseEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestLoginRefuseEnterTeam.sz_Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginRefuseEnterTeam)
  return target;
}

size_t PlayerRequestLoginRefuseEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_reason());
  }

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginRefuseEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginRefuseEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginRefuseEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginRefuseEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginRefuseEnterTeam)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginRefuseEnterTeam::MergeFrom(const PlayerRequestLoginRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_reason().size() > 0) {

    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void PlayerRequestLoginRefuseEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginRefuseEnterTeam::CopyFrom(const PlayerRequestLoginRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginRefuseEnterTeam::IsInitialized() const {
  return true;
}

void PlayerRequestLoginRefuseEnterTeam::Swap(PlayerRequestLoginRefuseEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginRefuseEnterTeam::InternalSwap(PlayerRequestLoginRefuseEnterTeam* other) {
  using std::swap;
  sz_reason_.Swap(&other->sz_reason_);
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginRefuseEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestLoginLeaveTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestLoginLeaveTeam::PlayerRequestLoginLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginLeaveTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestLoginLeaveTeam)
}
PlayerRequestLoginLeaveTeam::PlayerRequestLoginLeaveTeam(const PlayerRequestLoginLeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestLoginLeaveTeam)
}

void PlayerRequestLoginLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
}

PlayerRequestLoginLeaveTeam::~PlayerRequestLoginLeaveTeam() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestLoginLeaveTeam)
  SharedDtor();
}

void PlayerRequestLoginLeaveTeam::SharedDtor() {
}

void PlayerRequestLoginLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestLoginLeaveTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestLoginLeaveTeam& PlayerRequestLoginLeaveTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestLoginLeaveTeam();
  return *internal_default_instance();
}

PlayerRequestLoginLeaveTeam* PlayerRequestLoginLeaveTeam::New(::google::protobuf::Arena* arena) const {
  PlayerRequestLoginLeaveTeam* n = new PlayerRequestLoginLeaveTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestLoginLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestLoginLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerRequestLoginLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestLoginLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestLoginLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestLoginLeaveTeam)
  return false;
#undef DO_
}

void PlayerRequestLoginLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestLoginLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestLoginLeaveTeam)
}

::google::protobuf::uint8* PlayerRequestLoginLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestLoginLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestLoginLeaveTeam)
  return target;
}

size_t PlayerRequestLoginLeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestLoginLeaveTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestLoginLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestLoginLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestLoginLeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestLoginLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestLoginLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestLoginLeaveTeam)
    MergeFrom(*source);
  }
}

void PlayerRequestLoginLeaveTeam::MergeFrom(const PlayerRequestLoginLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestLoginLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerRequestLoginLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestLoginLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestLoginLeaveTeam::CopyFrom(const PlayerRequestLoginLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestLoginLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestLoginLeaveTeam::IsInitialized() const {
  return true;
}

void PlayerRequestLoginLeaveTeam::Swap(PlayerRequestLoginLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestLoginLeaveTeam::InternalSwap(PlayerRequestLoginLeaveTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestLoginLeaveTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerServerId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerServerId::kDwResultFieldNumber;
const int LoginAckPlayerServerId::kDwServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerServerId::LoginAckPlayerServerId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerServerId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerServerId)
}
LoginAckPlayerServerId::LoginAckPlayerServerId(const LoginAckPlayerServerId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_server_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerServerId)
}

void LoginAckPlayerServerId::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_server_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_server_id_));
  _cached_size_ = 0;
}

LoginAckPlayerServerId::~LoginAckPlayerServerId() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerServerId)
  SharedDtor();
}

void LoginAckPlayerServerId::SharedDtor() {
}

void LoginAckPlayerServerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerServerId::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerServerId& LoginAckPlayerServerId::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerServerId();
  return *internal_default_instance();
}

LoginAckPlayerServerId* LoginAckPlayerServerId::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerServerId* n = new LoginAckPlayerServerId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerServerId::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_server_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_server_id_));
  _internal_metadata_.Clear();
}

bool LoginAckPlayerServerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerServerId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerServerId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerServerId)
  return false;
#undef DO_
}

void LoginAckPlayerServerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerServerId)
}

::google::protobuf::uint8* LoginAckPlayerServerId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerServerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerServerId)
  return target;
}

size_t LoginAckPlayerServerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerServerId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_server_id = 2;
  if (this->dw_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerServerId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerServerId)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerServerId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerServerId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerServerId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerServerId)
    MergeFrom(*source);
  }
}

void LoginAckPlayerServerId::MergeFrom(const LoginAckPlayerServerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerServerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_server_id() != 0) {
    set_dw_server_id(from.dw_server_id());
  }
}

void LoginAckPlayerServerId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerServerId::CopyFrom(const LoginAckPlayerServerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerServerId::IsInitialized() const {
  return true;
}

void LoginAckPlayerServerId::Swap(LoginAckPlayerServerId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerServerId::InternalSwap(LoginAckPlayerServerId* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_server_id_, other->dw_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerServerId::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerLoginResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerLoginResult::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerLoginResult::LoginAckPlayerLoginResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerLoginResult)
}
LoginAckPlayerLoginResult::LoginAckPlayerLoginResult(const LoginAckPlayerLoginResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerLoginResult)
}

void LoginAckPlayerLoginResult::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerLoginResult::~LoginAckPlayerLoginResult() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerLoginResult)
  SharedDtor();
}

void LoginAckPlayerLoginResult::SharedDtor() {
}

void LoginAckPlayerLoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerLoginResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerLoginResult& LoginAckPlayerLoginResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLoginResult();
  return *internal_default_instance();
}

LoginAckPlayerLoginResult* LoginAckPlayerLoginResult::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerLoginResult* n = new LoginAckPlayerLoginResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerLoginResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerLoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerLoginResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerLoginResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerLoginResult)
  return false;
#undef DO_
}

void LoginAckPlayerLoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerLoginResult)
}

::google::protobuf::uint8* LoginAckPlayerLoginResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerLoginResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerLoginResult)
  return target;
}

size_t LoginAckPlayerLoginResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerLoginResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerLoginResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerLoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerLoginResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerLoginResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerLoginResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerLoginResult)
    MergeFrom(*source);
  }
}

void LoginAckPlayerLoginResult::MergeFrom(const LoginAckPlayerLoginResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerLoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerLoginResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerLoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerLoginResult::CopyFrom(const LoginAckPlayerLoginResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerLoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerLoginResult::IsInitialized() const {
  return true;
}

void LoginAckPlayerLoginResult::Swap(LoginAckPlayerLoginResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerLoginResult::InternalSwap(LoginAckPlayerLoginResult* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerLoginResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyPlayerGameKick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyPlayerGameKick::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyPlayerGameKick::LoginNotifyPlayerGameKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerGameKick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyPlayerGameKick)
}
LoginNotifyPlayerGameKick::LoginNotifyPlayerGameKick(const LoginNotifyPlayerGameKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyPlayerGameKick)
}

void LoginNotifyPlayerGameKick::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginNotifyPlayerGameKick::~LoginNotifyPlayerGameKick() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyPlayerGameKick)
  SharedDtor();
}

void LoginNotifyPlayerGameKick::SharedDtor() {
}

void LoginNotifyPlayerGameKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyPlayerGameKick::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyPlayerGameKick& LoginNotifyPlayerGameKick::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerGameKick();
  return *internal_default_instance();
}

LoginNotifyPlayerGameKick* LoginNotifyPlayerGameKick::New(::google::protobuf::Arena* arena) const {
  LoginNotifyPlayerGameKick* n = new LoginNotifyPlayerGameKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyPlayerGameKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyPlayerGameKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginNotifyPlayerGameKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyPlayerGameKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyPlayerGameKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyPlayerGameKick)
  return false;
#undef DO_
}

void LoginNotifyPlayerGameKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyPlayerGameKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyPlayerGameKick)
}

::google::protobuf::uint8* LoginNotifyPlayerGameKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyPlayerGameKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyPlayerGameKick)
  return target;
}

size_t LoginNotifyPlayerGameKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyPlayerGameKick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyPlayerGameKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyPlayerGameKick)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyPlayerGameKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyPlayerGameKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyPlayerGameKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyPlayerGameKick)
    MergeFrom(*source);
  }
}

void LoginNotifyPlayerGameKick::MergeFrom(const LoginNotifyPlayerGameKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyPlayerGameKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginNotifyPlayerGameKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyPlayerGameKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyPlayerGameKick::CopyFrom(const LoginNotifyPlayerGameKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyPlayerGameKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyPlayerGameKick::IsInitialized() const {
  return true;
}

void LoginNotifyPlayerGameKick::Swap(LoginNotifyPlayerGameKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyPlayerGameKick::InternalSwap(LoginNotifyPlayerGameKick* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyPlayerGameKick::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerMakeTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerMakeTeam::kDwResultFieldNumber;
const int LoginAckPlayerMakeTeam::kQwTeamIdFieldNumber;
const int LoginAckPlayerMakeTeam::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerMakeTeam::LoginAckPlayerMakeTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerMakeTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerMakeTeam)
}
LoginAckPlayerMakeTeam::LoginAckPlayerMakeTeam(const LoginAckPlayerMakeTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_team_id_, &from.qw_team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slot_id_) -
    reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_slot_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerMakeTeam)
}

void LoginAckPlayerMakeTeam::SharedCtor() {
  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_slot_id_));
  _cached_size_ = 0;
}

LoginAckPlayerMakeTeam::~LoginAckPlayerMakeTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerMakeTeam)
  SharedDtor();
}

void LoginAckPlayerMakeTeam::SharedDtor() {
}

void LoginAckPlayerMakeTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerMakeTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerMakeTeam& LoginAckPlayerMakeTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerMakeTeam();
  return *internal_default_instance();
}

LoginAckPlayerMakeTeam* LoginAckPlayerMakeTeam::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerMakeTeam* n = new LoginAckPlayerMakeTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerMakeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(dw_slot_id_));
  _internal_metadata_.Clear();
}

bool LoginAckPlayerMakeTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerMakeTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerMakeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerMakeTeam)
  return false;
#undef DO_
}

void LoginAckPlayerMakeTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  // uint32 dw_slot_id = 3;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerMakeTeam)
}

::google::protobuf::uint8* LoginAckPlayerMakeTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  // uint32 dw_slot_id = 3;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerMakeTeam)
  return target;
}

size_t LoginAckPlayerMakeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerMakeTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot_id = 3;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerMakeTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerMakeTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerMakeTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerMakeTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerMakeTeam)
    MergeFrom(*source);
  }
}

void LoginAckPlayerMakeTeam::MergeFrom(const LoginAckPlayerMakeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
}

void LoginAckPlayerMakeTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerMakeTeam::CopyFrom(const LoginAckPlayerMakeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerMakeTeam::IsInitialized() const {
  return true;
}

void LoginAckPlayerMakeTeam::Swap(LoginAckPlayerMakeTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerMakeTeam::InternalSwap(LoginAckPlayerMakeTeam* other) {
  using std::swap;
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_id_, other->dw_slot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerMakeTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyPlayerTeamInfo::InitAsDefaultInstance() {
}
void LoginNotifyPlayerTeamInfo::clear_team_role_data() {
  team_role_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyPlayerTeamInfo::kTeamRoleDataFieldNumber;
const int LoginNotifyPlayerTeamInfo::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyPlayerTeamInfo::LoginNotifyPlayerTeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyPlayerTeamInfo)
}
LoginNotifyPlayerTeamInfo::LoginNotifyPlayerTeamInfo(const LoginNotifyPlayerTeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      team_role_data_(from.team_role_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qw_team_id_ = from.qw_team_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyPlayerTeamInfo)
}

void LoginNotifyPlayerTeamInfo::SharedCtor() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LoginNotifyPlayerTeamInfo::~LoginNotifyPlayerTeamInfo() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyPlayerTeamInfo)
  SharedDtor();
}

void LoginNotifyPlayerTeamInfo::SharedDtor() {
}

void LoginNotifyPlayerTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyPlayerTeamInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyPlayerTeamInfo& LoginNotifyPlayerTeamInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamInfo();
  return *internal_default_instance();
}

LoginNotifyPlayerTeamInfo* LoginNotifyPlayerTeamInfo::New(::google::protobuf::Arena* arena) const {
  LoginNotifyPlayerTeamInfo* n = new LoginNotifyPlayerTeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyPlayerTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyPlayerTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_role_data_.Clear();
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LoginNotifyPlayerTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyPlayerTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameProto.TeamRoleData team_role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_team_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyPlayerTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyPlayerTeamInfo)
  return false;
#undef DO_
}

void LoginNotifyPlayerTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyPlayerTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_role_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_role_data(static_cast<int>(i)), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyPlayerTeamInfo)
}

::google::protobuf::uint8* LoginNotifyPlayerTeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyPlayerTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_role_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->team_role_data(static_cast<int>(i)), deterministic, target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyPlayerTeamInfo)
  return target;
}

size_t LoginNotifyPlayerTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyPlayerTeamInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GameProto.TeamRoleData team_role_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->team_role_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_role_data(static_cast<int>(i)));
    }
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyPlayerTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyPlayerTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyPlayerTeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyPlayerTeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyPlayerTeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyPlayerTeamInfo)
    MergeFrom(*source);
  }
}

void LoginNotifyPlayerTeamInfo::MergeFrom(const LoginNotifyPlayerTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyPlayerTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_role_data_.MergeFrom(from.team_role_data_);
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginNotifyPlayerTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyPlayerTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyPlayerTeamInfo::CopyFrom(const LoginNotifyPlayerTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyPlayerTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyPlayerTeamInfo::IsInitialized() const {
  return true;
}

void LoginNotifyPlayerTeamInfo::Swap(LoginNotifyPlayerTeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyPlayerTeamInfo::InternalSwap(LoginNotifyPlayerTeamInfo* other) {
  using std::swap;
  team_role_data_.InternalSwap(&other->team_role_data_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyPlayerTeamInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerInviteTeam::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerInviteTeam::LoginAckPlayerInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerInviteTeam)
}
LoginAckPlayerInviteTeam::LoginAckPlayerInviteTeam(const LoginAckPlayerInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerInviteTeam)
}

void LoginAckPlayerInviteTeam::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerInviteTeam::~LoginAckPlayerInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerInviteTeam)
  SharedDtor();
}

void LoginAckPlayerInviteTeam::SharedDtor() {
}

void LoginAckPlayerInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerInviteTeam& LoginAckPlayerInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerInviteTeam();
  return *internal_default_instance();
}

LoginAckPlayerInviteTeam* LoginAckPlayerInviteTeam::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerInviteTeam* n = new LoginAckPlayerInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerInviteTeam)
  return false;
#undef DO_
}

void LoginAckPlayerInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerInviteTeam)
}

::google::protobuf::uint8* LoginAckPlayerInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerInviteTeam)
  return target;
}

size_t LoginAckPlayerInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerInviteTeam)
    MergeFrom(*source);
  }
}

void LoginAckPlayerInviteTeam::MergeFrom(const LoginAckPlayerInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerInviteTeam::CopyFrom(const LoginAckPlayerInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerInviteTeam::IsInitialized() const {
  return true;
}

void LoginAckPlayerInviteTeam::Swap(LoginAckPlayerInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerInviteTeam::InternalSwap(LoginAckPlayerInviteTeam* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyPlayerInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyPlayerInviteTeam::kQwPlayerIdFieldNumber;
const int LoginNotifyPlayerInviteTeam::kQwTeamIdFieldNumber;
const int LoginNotifyPlayerInviteTeam::kDwTeamServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyPlayerInviteTeam::LoginNotifyPlayerInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyPlayerInviteTeam)
}
LoginNotifyPlayerInviteTeam::LoginNotifyPlayerInviteTeam(const LoginNotifyPlayerInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_team_server_id_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_team_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyPlayerInviteTeam)
}

void LoginNotifyPlayerInviteTeam::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_team_server_id_));
  _cached_size_ = 0;
}

LoginNotifyPlayerInviteTeam::~LoginNotifyPlayerInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyPlayerInviteTeam)
  SharedDtor();
}

void LoginNotifyPlayerInviteTeam::SharedDtor() {
}

void LoginNotifyPlayerInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyPlayerInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyPlayerInviteTeam& LoginNotifyPlayerInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerInviteTeam();
  return *internal_default_instance();
}

LoginNotifyPlayerInviteTeam* LoginNotifyPlayerInviteTeam::New(::google::protobuf::Arena* arena) const {
  LoginNotifyPlayerInviteTeam* n = new LoginNotifyPlayerInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyPlayerInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_team_server_id_));
  _internal_metadata_.Clear();
}

bool LoginNotifyPlayerInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyPlayerInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_team_server_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyPlayerInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyPlayerInviteTeam)
  return false;
#undef DO_
}

void LoginNotifyPlayerInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  // uint32 dw_team_server_id = 3;
  if (this->dw_team_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_team_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyPlayerInviteTeam)
}

::google::protobuf::uint8* LoginNotifyPlayerInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyPlayerInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  // uint32 dw_team_server_id = 3;
  if (this->dw_team_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_team_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyPlayerInviteTeam)
  return target;
}

size_t LoginNotifyPlayerInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyPlayerInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_team_server_id = 3;
  if (this->dw_team_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyPlayerInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyPlayerInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyPlayerInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyPlayerInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyPlayerInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyPlayerInviteTeam)
    MergeFrom(*source);
  }
}

void LoginNotifyPlayerInviteTeam::MergeFrom(const LoginNotifyPlayerInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyPlayerInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_team_server_id() != 0) {
    set_dw_team_server_id(from.dw_team_server_id());
  }
}

void LoginNotifyPlayerInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyPlayerInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyPlayerInviteTeam::CopyFrom(const LoginNotifyPlayerInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyPlayerInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyPlayerInviteTeam::IsInitialized() const {
  return true;
}

void LoginNotifyPlayerInviteTeam::Swap(LoginNotifyPlayerInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyPlayerInviteTeam::InternalSwap(LoginNotifyPlayerInviteTeam* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_team_server_id_, other->dw_team_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyPlayerInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerChangeSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerChangeSlot::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerChangeSlot::LoginAckPlayerChangeSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerChangeSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerChangeSlot)
}
LoginAckPlayerChangeSlot::LoginAckPlayerChangeSlot(const LoginAckPlayerChangeSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerChangeSlot)
}

void LoginAckPlayerChangeSlot::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerChangeSlot::~LoginAckPlayerChangeSlot() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerChangeSlot)
  SharedDtor();
}

void LoginAckPlayerChangeSlot::SharedDtor() {
}

void LoginAckPlayerChangeSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerChangeSlot::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerChangeSlot& LoginAckPlayerChangeSlot::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerChangeSlot();
  return *internal_default_instance();
}

LoginAckPlayerChangeSlot* LoginAckPlayerChangeSlot::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerChangeSlot* n = new LoginAckPlayerChangeSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerChangeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerChangeSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerChangeSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerChangeSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerChangeSlot)
  return false;
#undef DO_
}

void LoginAckPlayerChangeSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerChangeSlot)
}

::google::protobuf::uint8* LoginAckPlayerChangeSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerChangeSlot)
  return target;
}

size_t LoginAckPlayerChangeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerChangeSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerChangeSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerChangeSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerChangeSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerChangeSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerChangeSlot)
    MergeFrom(*source);
  }
}

void LoginAckPlayerChangeSlot::MergeFrom(const LoginAckPlayerChangeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerChangeSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerChangeSlot::CopyFrom(const LoginAckPlayerChangeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerChangeSlot::IsInitialized() const {
  return true;
}

void LoginAckPlayerChangeSlot::Swap(LoginAckPlayerChangeSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerChangeSlot::InternalSwap(LoginAckPlayerChangeSlot* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerChangeSlot::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyPlayerTeamKick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyPlayerTeamKick::LoginNotifyPlayerTeamKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamKick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyPlayerTeamKick)
}
LoginNotifyPlayerTeamKick::LoginNotifyPlayerTeamKick(const LoginNotifyPlayerTeamKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyPlayerTeamKick)
}

void LoginNotifyPlayerTeamKick::SharedCtor() {
  _cached_size_ = 0;
}

LoginNotifyPlayerTeamKick::~LoginNotifyPlayerTeamKick() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyPlayerTeamKick)
  SharedDtor();
}

void LoginNotifyPlayerTeamKick::SharedDtor() {
}

void LoginNotifyPlayerTeamKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyPlayerTeamKick::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyPlayerTeamKick& LoginNotifyPlayerTeamKick::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerTeamKick();
  return *internal_default_instance();
}

LoginNotifyPlayerTeamKick* LoginNotifyPlayerTeamKick::New(::google::protobuf::Arena* arena) const {
  LoginNotifyPlayerTeamKick* n = new LoginNotifyPlayerTeamKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyPlayerTeamKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyPlayerTeamKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LoginNotifyPlayerTeamKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyPlayerTeamKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyPlayerTeamKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyPlayerTeamKick)
  return false;
#undef DO_
}

void LoginNotifyPlayerTeamKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyPlayerTeamKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyPlayerTeamKick)
}

::google::protobuf::uint8* LoginNotifyPlayerTeamKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyPlayerTeamKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyPlayerTeamKick)
  return target;
}

size_t LoginNotifyPlayerTeamKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyPlayerTeamKick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyPlayerTeamKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyPlayerTeamKick)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyPlayerTeamKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyPlayerTeamKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyPlayerTeamKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyPlayerTeamKick)
    MergeFrom(*source);
  }
}

void LoginNotifyPlayerTeamKick::MergeFrom(const LoginNotifyPlayerTeamKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyPlayerTeamKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoginNotifyPlayerTeamKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyPlayerTeamKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyPlayerTeamKick::CopyFrom(const LoginNotifyPlayerTeamKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyPlayerTeamKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyPlayerTeamKick::IsInitialized() const {
  return true;
}

void LoginNotifyPlayerTeamKick::Swap(LoginNotifyPlayerTeamKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyPlayerTeamKick::InternalSwap(LoginNotifyPlayerTeamKick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyPlayerTeamKick::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerGameStart::kDwResultFieldNumber;
const int LoginAckPlayerGameStart::kDwPlayerPortFieldNumber;
const int LoginAckPlayerGameStart::kDwServerPortFieldNumber;
const int LoginAckPlayerGameStart::kDwSlaveServerPortFieldNumber;
const int LoginAckPlayerGameStart::kSzListenIpFieldNumber;
const int LoginAckPlayerGameStart::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerGameStart::LoginAckPlayerGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerGameStart)
}
LoginAckPlayerGameStart::LoginAckPlayerGameStart(const LoginAckPlayerGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_listen_ip().size() > 0) {
    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerGameStart)
}

void LoginAckPlayerGameStart::SharedCtor() {
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

LoginAckPlayerGameStart::~LoginAckPlayerGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerGameStart)
  SharedDtor();
}

void LoginAckPlayerGameStart::SharedDtor() {
  sz_listen_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginAckPlayerGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerGameStart& LoginAckPlayerGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerGameStart();
  return *internal_default_instance();
}

LoginAckPlayerGameStart* LoginAckPlayerGameStart::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerGameStart* n = new LoginAckPlayerGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool LoginAckPlayerGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_player_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_listen_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_listen_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.LoginAckPlayerGameStart.sz_listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerGameStart)
  return false;
#undef DO_
}

void LoginAckPlayerGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_slave_server_port(), output);
  }

  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginAckPlayerGameStart.sz_listen_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sz_listen_ip(), output);
  }

  // uint64 qw_team_id = 6;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerGameStart)
}

::google::protobuf::uint8* LoginAckPlayerGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_slave_server_port(), target);
  }

  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginAckPlayerGameStart.sz_listen_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sz_listen_ip(), target);
  }

  // uint64 qw_team_id = 6;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerGameStart)
  return target;
}

size_t LoginAckPlayerGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_listen_ip());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  // uint64 qw_team_id = 6;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerGameStart)
    MergeFrom(*source);
  }
}

void LoginAckPlayerGameStart::MergeFrom(const LoginAckPlayerGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_listen_ip().size() > 0) {

    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginAckPlayerGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerGameStart::CopyFrom(const LoginAckPlayerGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerGameStart::IsInitialized() const {
  return true;
}

void LoginAckPlayerGameStart::Swap(LoginAckPlayerGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerGameStart::InternalSwap(LoginAckPlayerGameStart* other) {
  using std::swap;
  sz_listen_ip_.Swap(&other->sz_listen_ip_);
  swap(dw_result_, other->dw_result_);
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerOnLinePlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerOnLinePlayer::kDwResultFieldNumber;
const int LoginAckPlayerOnLinePlayer::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerOnLinePlayer::LoginAckPlayerOnLinePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerOnLinePlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerOnLinePlayer)
}
LoginAckPlayerOnLinePlayer::LoginAckPlayerOnLinePlayer(const LoginAckPlayerOnLinePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      qw_player_id_(from.qw_player_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerOnLinePlayer)
}

void LoginAckPlayerOnLinePlayer::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerOnLinePlayer::~LoginAckPlayerOnLinePlayer() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerOnLinePlayer)
  SharedDtor();
}

void LoginAckPlayerOnLinePlayer::SharedDtor() {
}

void LoginAckPlayerOnLinePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerOnLinePlayer::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerOnLinePlayer& LoginAckPlayerOnLinePlayer::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerOnLinePlayer();
  return *internal_default_instance();
}

LoginAckPlayerOnLinePlayer* LoginAckPlayerOnLinePlayer::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerOnLinePlayer* n = new LoginAckPlayerOnLinePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerOnLinePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qw_player_id_.Clear();
  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerOnLinePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerOnLinePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_qw_player_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_qw_player_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerOnLinePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerOnLinePlayer)
  return false;
#undef DO_
}

void LoginAckPlayerOnLinePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // repeated uint64 qw_player_id = 2;
  if (this->qw_player_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qw_player_id_cached_byte_size_));
  }
  for (int i = 0, n = this->qw_player_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->qw_player_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerOnLinePlayer)
}

::google::protobuf::uint8* LoginAckPlayerOnLinePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerOnLinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // repeated uint64 qw_player_id = 2;
  if (this->qw_player_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _qw_player_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->qw_player_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerOnLinePlayer)
  return target;
}

size_t LoginAckPlayerOnLinePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerOnLinePlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 qw_player_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->qw_player_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qw_player_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerOnLinePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerOnLinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerOnLinePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerOnLinePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerOnLinePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerOnLinePlayer)
    MergeFrom(*source);
  }
}

void LoginAckPlayerOnLinePlayer::MergeFrom(const LoginAckPlayerOnLinePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerOnLinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qw_player_id_.MergeFrom(from.qw_player_id_);
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerOnLinePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerOnLinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerOnLinePlayer::CopyFrom(const LoginAckPlayerOnLinePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerOnLinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerOnLinePlayer::IsInitialized() const {
  return true;
}

void LoginAckPlayerOnLinePlayer::Swap(LoginAckPlayerOnLinePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerOnLinePlayer::InternalSwap(LoginAckPlayerOnLinePlayer* other) {
  using std::swap;
  qw_player_id_.InternalSwap(&other->qw_player_id_);
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerOnLinePlayer::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerEnterTeam::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerEnterTeam::LoginAckPlayerEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerEnterTeam)
}
LoginAckPlayerEnterTeam::LoginAckPlayerEnterTeam(const LoginAckPlayerEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerEnterTeam)
}

void LoginAckPlayerEnterTeam::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerEnterTeam::~LoginAckPlayerEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerEnterTeam)
  SharedDtor();
}

void LoginAckPlayerEnterTeam::SharedDtor() {
}

void LoginAckPlayerEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerEnterTeam& LoginAckPlayerEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerEnterTeam();
  return *internal_default_instance();
}

LoginAckPlayerEnterTeam* LoginAckPlayerEnterTeam::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerEnterTeam* n = new LoginAckPlayerEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerEnterTeam)
  return false;
#undef DO_
}

void LoginAckPlayerEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerEnterTeam)
}

::google::protobuf::uint8* LoginAckPlayerEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerEnterTeam)
  return target;
}

size_t LoginAckPlayerEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerEnterTeam)
    MergeFrom(*source);
  }
}

void LoginAckPlayerEnterTeam::MergeFrom(const LoginAckPlayerEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerEnterTeam::CopyFrom(const LoginAckPlayerEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerEnterTeam::IsInitialized() const {
  return true;
}

void LoginAckPlayerEnterTeam::Swap(LoginAckPlayerEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerEnterTeam::InternalSwap(LoginAckPlayerEnterTeam* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyPlayerRefuseEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyPlayerRefuseEnterTeam::kQwPlayerIdFieldNumber;
const int LoginNotifyPlayerRefuseEnterTeam::kSzReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyPlayerRefuseEnterTeam::LoginNotifyPlayerRefuseEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerRefuseEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyPlayerRefuseEnterTeam)
}
LoginNotifyPlayerRefuseEnterTeam::LoginNotifyPlayerRefuseEnterTeam(const LoginNotifyPlayerRefuseEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_reason().size() > 0) {
    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  qw_player_id_ = from.qw_player_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyPlayerRefuseEnterTeam)
}

void LoginNotifyPlayerRefuseEnterTeam::SharedCtor() {
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LoginNotifyPlayerRefuseEnterTeam::~LoginNotifyPlayerRefuseEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  SharedDtor();
}

void LoginNotifyPlayerRefuseEnterTeam::SharedDtor() {
  sz_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginNotifyPlayerRefuseEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyPlayerRefuseEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyPlayerRefuseEnterTeam& LoginNotifyPlayerRefuseEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyPlayerRefuseEnterTeam();
  return *internal_default_instance();
}

LoginNotifyPlayerRefuseEnterTeam* LoginNotifyPlayerRefuseEnterTeam::New(::google::protobuf::Arena* arena) const {
  LoginNotifyPlayerRefuseEnterTeam* n = new LoginNotifyPlayerRefuseEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyPlayerRefuseEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LoginNotifyPlayerRefuseEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_Reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  return false;
#undef DO_
}

void LoginNotifyPlayerRefuseEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyPlayerRefuseEnterTeam)
}

::google::protobuf::uint8* LoginNotifyPlayerRefuseEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginNotifyPlayerRefuseEnterTeam.sz_Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  return target;
}

size_t LoginNotifyPlayerRefuseEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_Reason = 2;
  if (this->sz_reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_reason());
  }

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyPlayerRefuseEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyPlayerRefuseEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyPlayerRefuseEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyPlayerRefuseEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyPlayerRefuseEnterTeam)
    MergeFrom(*source);
  }
}

void LoginNotifyPlayerRefuseEnterTeam::MergeFrom(const LoginNotifyPlayerRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_reason().size() > 0) {

    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void LoginNotifyPlayerRefuseEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyPlayerRefuseEnterTeam::CopyFrom(const LoginNotifyPlayerRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyPlayerRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyPlayerRefuseEnterTeam::IsInitialized() const {
  return true;
}

void LoginNotifyPlayerRefuseEnterTeam::Swap(LoginNotifyPlayerRefuseEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyPlayerRefuseEnterTeam::InternalSwap(LoginNotifyPlayerRefuseEnterTeam* other) {
  using std::swap;
  sz_reason_.Swap(&other->sz_reason_);
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyPlayerRefuseEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckPlayerLeaveTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckPlayerLeaveTeam::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckPlayerLeaveTeam::LoginAckPlayerLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLeaveTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckPlayerLeaveTeam)
}
LoginAckPlayerLeaveTeam::LoginAckPlayerLeaveTeam(const LoginAckPlayerLeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckPlayerLeaveTeam)
}

void LoginAckPlayerLeaveTeam::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

LoginAckPlayerLeaveTeam::~LoginAckPlayerLeaveTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckPlayerLeaveTeam)
  SharedDtor();
}

void LoginAckPlayerLeaveTeam::SharedDtor() {
}

void LoginAckPlayerLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckPlayerLeaveTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckPlayerLeaveTeam& LoginAckPlayerLeaveTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckPlayerLeaveTeam();
  return *internal_default_instance();
}

LoginAckPlayerLeaveTeam* LoginAckPlayerLeaveTeam::New(::google::protobuf::Arena* arena) const {
  LoginAckPlayerLeaveTeam* n = new LoginAckPlayerLeaveTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckPlayerLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckPlayerLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool LoginAckPlayerLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckPlayerLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckPlayerLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckPlayerLeaveTeam)
  return false;
#undef DO_
}

void LoginAckPlayerLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckPlayerLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckPlayerLeaveTeam)
}

::google::protobuf::uint8* LoginAckPlayerLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckPlayerLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckPlayerLeaveTeam)
  return target;
}

size_t LoginAckPlayerLeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckPlayerLeaveTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckPlayerLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckPlayerLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckPlayerLeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckPlayerLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckPlayerLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckPlayerLeaveTeam)
    MergeFrom(*source);
  }
}

void LoginAckPlayerLeaveTeam::MergeFrom(const LoginAckPlayerLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckPlayerLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckPlayerLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckPlayerLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckPlayerLeaveTeam::CopyFrom(const LoginAckPlayerLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckPlayerLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckPlayerLeaveTeam::IsInitialized() const {
  return true;
}

void LoginAckPlayerLeaveTeam::Swap(LoginAckPlayerLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckPlayerLeaveTeam::InternalSwap(LoginAckPlayerLeaveTeam* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckPlayerLeaveTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyLoginPlayerKick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyLoginPlayerKick::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyLoginPlayerKick::LoginNotifyLoginPlayerKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerKick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyLoginPlayerKick)
}
LoginNotifyLoginPlayerKick::LoginNotifyLoginPlayerKick(const LoginNotifyLoginPlayerKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qw_player_id_ = from.qw_player_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyLoginPlayerKick)
}

void LoginNotifyLoginPlayerKick::SharedCtor() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LoginNotifyLoginPlayerKick::~LoginNotifyLoginPlayerKick() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyLoginPlayerKick)
  SharedDtor();
}

void LoginNotifyLoginPlayerKick::SharedDtor() {
}

void LoginNotifyLoginPlayerKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyLoginPlayerKick::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyLoginPlayerKick& LoginNotifyLoginPlayerKick::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerKick();
  return *internal_default_instance();
}

LoginNotifyLoginPlayerKick* LoginNotifyLoginPlayerKick::New(::google::protobuf::Arena* arena) const {
  LoginNotifyLoginPlayerKick* n = new LoginNotifyLoginPlayerKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyLoginPlayerKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyLoginPlayerKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LoginNotifyLoginPlayerKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyLoginPlayerKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyLoginPlayerKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyLoginPlayerKick)
  return false;
#undef DO_
}

void LoginNotifyLoginPlayerKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyLoginPlayerKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyLoginPlayerKick)
}

::google::protobuf::uint8* LoginNotifyLoginPlayerKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyLoginPlayerKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyLoginPlayerKick)
  return target;
}

size_t LoginNotifyLoginPlayerKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyLoginPlayerKick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyLoginPlayerKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyLoginPlayerKick)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyLoginPlayerKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyLoginPlayerKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyLoginPlayerKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyLoginPlayerKick)
    MergeFrom(*source);
  }
}

void LoginNotifyLoginPlayerKick::MergeFrom(const LoginNotifyLoginPlayerKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyLoginPlayerKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void LoginNotifyLoginPlayerKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyLoginPlayerKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyLoginPlayerKick::CopyFrom(const LoginNotifyLoginPlayerKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyLoginPlayerKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyLoginPlayerKick::IsInitialized() const {
  return true;
}

void LoginNotifyLoginPlayerKick::Swap(LoginNotifyLoginPlayerKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyLoginPlayerKick::InternalSwap(LoginNotifyLoginPlayerKick* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyLoginPlayerKick::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestLoginInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestLoginInviteTeam::kQwInviteIdFieldNumber;
const int LoginRequestLoginInviteTeam::kQwInviteeIdFieldNumber;
const int LoginRequestLoginInviteTeam::kQwTeamIdFieldNumber;
const int LoginRequestLoginInviteTeam::kDwTeamServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestLoginInviteTeam::LoginRequestLoginInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestLoginInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestLoginInviteTeam)
}
LoginRequestLoginInviteTeam::LoginRequestLoginInviteTeam(const LoginRequestLoginInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_invite_id_, &from.qw_invite_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_team_server_id_) -
    reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_team_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestLoginInviteTeam)
}

void LoginRequestLoginInviteTeam::SharedCtor() {
  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_team_server_id_));
  _cached_size_ = 0;
}

LoginRequestLoginInviteTeam::~LoginRequestLoginInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestLoginInviteTeam)
  SharedDtor();
}

void LoginRequestLoginInviteTeam::SharedDtor() {
}

void LoginRequestLoginInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestLoginInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestLoginInviteTeam& LoginRequestLoginInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestLoginInviteTeam();
  return *internal_default_instance();
}

LoginRequestLoginInviteTeam* LoginRequestLoginInviteTeam::New(::google::protobuf::Arena* arena) const {
  LoginRequestLoginInviteTeam* n = new LoginRequestLoginInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestLoginInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_team_server_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestLoginInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestLoginInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_invite_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_invitee_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invitee_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_team_server_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestLoginInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestLoginInviteTeam)
  return false;
#undef DO_
}

void LoginRequestLoginInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_invite_id(), output);
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_invitee_id(), output);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qw_team_id(), output);
  }

  // uint32 dw_team_server_id = 4;
  if (this->dw_team_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_team_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestLoginInviteTeam)
}

::google::protobuf::uint8* LoginRequestLoginInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_invite_id(), target);
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_invitee_id(), target);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qw_team_id(), target);
  }

  // uint32 dw_team_server_id = 4;
  if (this->dw_team_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_team_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestLoginInviteTeam)
  return target;
}

size_t LoginRequestLoginInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestLoginInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invite_id());
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invitee_id());
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_team_server_id = 4;
  if (this->dw_team_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestLoginInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestLoginInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestLoginInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestLoginInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestLoginInviteTeam)
    MergeFrom(*source);
  }
}

void LoginRequestLoginInviteTeam::MergeFrom(const LoginRequestLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_invite_id() != 0) {
    set_qw_invite_id(from.qw_invite_id());
  }
  if (from.qw_invitee_id() != 0) {
    set_qw_invitee_id(from.qw_invitee_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_team_server_id() != 0) {
    set_dw_team_server_id(from.dw_team_server_id());
  }
}

void LoginRequestLoginInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestLoginInviteTeam::CopyFrom(const LoginRequestLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestLoginInviteTeam::IsInitialized() const {
  return true;
}

void LoginRequestLoginInviteTeam::Swap(LoginRequestLoginInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestLoginInviteTeam::InternalSwap(LoginRequestLoginInviteTeam* other) {
  using std::swap;
  swap(qw_invite_id_, other->qw_invite_id_);
  swap(qw_invitee_id_, other->qw_invitee_id_);
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_team_server_id_, other->dw_team_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestLoginInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginAckLoginInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAckLoginInviteTeam::kDwResultFieldNumber;
const int LoginAckLoginInviteTeam::kQwInviteIdFieldNumber;
const int LoginAckLoginInviteTeam::kQwInviteeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAckLoginInviteTeam::LoginAckLoginInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckLoginInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginAckLoginInviteTeam)
}
LoginAckLoginInviteTeam::LoginAckLoginInviteTeam(const LoginAckLoginInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_invite_id_, &from.qw_invite_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_result_) -
    reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_result_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginAckLoginInviteTeam)
}

void LoginAckLoginInviteTeam::SharedCtor() {
  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_result_));
  _cached_size_ = 0;
}

LoginAckLoginInviteTeam::~LoginAckLoginInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginAckLoginInviteTeam)
  SharedDtor();
}

void LoginAckLoginInviteTeam::SharedDtor() {
}

void LoginAckLoginInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAckLoginInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAckLoginInviteTeam& LoginAckLoginInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginAckLoginInviteTeam();
  return *internal_default_instance();
}

LoginAckLoginInviteTeam* LoginAckLoginInviteTeam::New(::google::protobuf::Arena* arena) const {
  LoginAckLoginInviteTeam* n = new LoginAckLoginInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAckLoginInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(dw_result_));
  _internal_metadata_.Clear();
}

bool LoginAckLoginInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginAckLoginInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_invite_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_invitee_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invitee_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginAckLoginInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginAckLoginInviteTeam)
  return false;
#undef DO_
}

void LoginAckLoginInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_invite_id = 2;
  if (this->qw_invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_invite_id(), output);
  }

  // uint64 qw_invitee_id = 3;
  if (this->qw_invitee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qw_invitee_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginAckLoginInviteTeam)
}

::google::protobuf::uint8* LoginAckLoginInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_invite_id = 2;
  if (this->qw_invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_invite_id(), target);
  }

  // uint64 qw_invitee_id = 3;
  if (this->qw_invitee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qw_invitee_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginAckLoginInviteTeam)
  return target;
}

size_t LoginAckLoginInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginAckLoginInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_invite_id = 2;
  if (this->qw_invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invite_id());
  }

  // uint64 qw_invitee_id = 3;
  if (this->qw_invitee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invitee_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAckLoginInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginAckLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAckLoginInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAckLoginInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginAckLoginInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginAckLoginInviteTeam)
    MergeFrom(*source);
  }
}

void LoginAckLoginInviteTeam::MergeFrom(const LoginAckLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginAckLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_invite_id() != 0) {
    set_qw_invite_id(from.qw_invite_id());
  }
  if (from.qw_invitee_id() != 0) {
    set_qw_invitee_id(from.qw_invitee_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void LoginAckLoginInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginAckLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAckLoginInviteTeam::CopyFrom(const LoginAckLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginAckLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAckLoginInviteTeam::IsInitialized() const {
  return true;
}

void LoginAckLoginInviteTeam::Swap(LoginAckLoginInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAckLoginInviteTeam::InternalSwap(LoginAckLoginInviteTeam* other) {
  using std::swap;
  swap(qw_invite_id_, other->qw_invite_id_);
  swap(qw_invitee_id_, other->qw_invitee_id_);
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAckLoginInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginNotifyLoginPlayerRefuseEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotifyLoginPlayerRefuseEnterTeam::kQwInviteIdFieldNumber;
const int LoginNotifyLoginPlayerRefuseEnterTeam::kQwInviteeIdFieldNumber;
const int LoginNotifyLoginPlayerRefuseEnterTeam::kSzReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotifyLoginPlayerRefuseEnterTeam::LoginNotifyLoginPlayerRefuseEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
}
LoginNotifyLoginPlayerRefuseEnterTeam::LoginNotifyLoginPlayerRefuseEnterTeam(const LoginNotifyLoginPlayerRefuseEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_reason().size() > 0) {
    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  ::memcpy(&qw_invite_id_, &from.qw_invite_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_invitee_id_) -
    reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(qw_invitee_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
}

void LoginNotifyLoginPlayerRefuseEnterTeam::SharedCtor() {
  sz_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_invitee_id_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(qw_invitee_id_));
  _cached_size_ = 0;
}

LoginNotifyLoginPlayerRefuseEnterTeam::~LoginNotifyLoginPlayerRefuseEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  SharedDtor();
}

void LoginNotifyLoginPlayerRefuseEnterTeam::SharedDtor() {
  sz_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginNotifyLoginPlayerRefuseEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNotifyLoginPlayerRefuseEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginNotifyLoginPlayerRefuseEnterTeam& LoginNotifyLoginPlayerRefuseEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginNotifyLoginPlayerRefuseEnterTeam();
  return *internal_default_instance();
}

LoginNotifyLoginPlayerRefuseEnterTeam* LoginNotifyLoginPlayerRefuseEnterTeam::New(::google::protobuf::Arena* arena) const {
  LoginNotifyLoginPlayerRefuseEnterTeam* n = new LoginNotifyLoginPlayerRefuseEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotifyLoginPlayerRefuseEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qw_invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_invitee_id_) -
      reinterpret_cast<char*>(&qw_invite_id_)) + sizeof(qw_invitee_id_));
  _internal_metadata_.Clear();
}

bool LoginNotifyLoginPlayerRefuseEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_invite_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_invitee_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_invitee_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_Reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  return false;
#undef DO_
}

void LoginNotifyLoginPlayerRefuseEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_invite_id(), output);
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_invitee_id(), output);
  }

  // string sz_Reason = 3;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sz_reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
}

::google::protobuf::uint8* LoginNotifyLoginPlayerRefuseEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_invite_id(), target);
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_invitee_id(), target);
  }

  // string sz_Reason = 3;
  if (this->sz_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_reason().data(), static_cast<int>(this->sz_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.sz_Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sz_reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  return target;
}

size_t LoginNotifyLoginPlayerRefuseEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_Reason = 3;
  if (this->sz_reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_reason());
  }

  // uint64 qw_invite_id = 1;
  if (this->qw_invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invite_id());
  }

  // uint64 qw_invitee_id = 2;
  if (this->qw_invitee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_invitee_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotifyLoginPlayerRefuseEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginNotifyLoginPlayerRefuseEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNotifyLoginPlayerRefuseEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
    MergeFrom(*source);
  }
}

void LoginNotifyLoginPlayerRefuseEnterTeam::MergeFrom(const LoginNotifyLoginPlayerRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_reason().size() > 0) {

    sz_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_reason_);
  }
  if (from.qw_invite_id() != 0) {
    set_qw_invite_id(from.qw_invite_id());
  }
  if (from.qw_invitee_id() != 0) {
    set_qw_invitee_id(from.qw_invitee_id());
  }
}

void LoginNotifyLoginPlayerRefuseEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNotifyLoginPlayerRefuseEnterTeam::CopyFrom(const LoginNotifyLoginPlayerRefuseEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginNotifyLoginPlayerRefuseEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotifyLoginPlayerRefuseEnterTeam::IsInitialized() const {
  return true;
}

void LoginNotifyLoginPlayerRefuseEnterTeam::Swap(LoginNotifyLoginPlayerRefuseEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotifyLoginPlayerRefuseEnterTeam::InternalSwap(LoginNotifyLoginPlayerRefuseEnterTeam* other) {
  using std::swap;
  sz_reason_.Swap(&other->sz_reason_);
  swap(qw_invite_id_, other->qw_invite_id_);
  swap(qw_invitee_id_, other->qw_invitee_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNotifyLoginPlayerRefuseEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamMakeTeam::InitAsDefaultInstance() {
  ::GameProto::_LoginRequestTeamMakeTeam_default_instance_._instance.get_mutable()->role_data_ = const_cast< ::GameProto::RoleData*>(
      ::GameProto::RoleData::internal_default_instance());
}
void LoginRequestTeamMakeTeam::clear_role_data() {
  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamMakeTeam::kRoleDataFieldNumber;
const int LoginRequestTeamMakeTeam::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamMakeTeam::LoginRequestTeamMakeTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamMakeTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamMakeTeam)
}
LoginRequestTeamMakeTeam::LoginRequestTeamMakeTeam(const LoginRequestTeamMakeTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role_data()) {
    role_data_ = new ::GameProto::RoleData(*from.role_data_);
  } else {
    role_data_ = NULL;
  }
  qw_team_id_ = from.qw_team_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamMakeTeam)
}

void LoginRequestTeamMakeTeam::SharedCtor() {
  ::memset(&role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&role_data_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

LoginRequestTeamMakeTeam::~LoginRequestTeamMakeTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamMakeTeam)
  SharedDtor();
}

void LoginRequestTeamMakeTeam::SharedDtor() {
  if (this != internal_default_instance()) delete role_data_;
}

void LoginRequestTeamMakeTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamMakeTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamMakeTeam& LoginRequestTeamMakeTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamMakeTeam();
  return *internal_default_instance();
}

LoginRequestTeamMakeTeam* LoginRequestTeamMakeTeam::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamMakeTeam* n = new LoginRequestTeamMakeTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamMakeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LoginRequestTeamMakeTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamMakeTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.RoleData role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamMakeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamMakeTeam)
  return false;
#undef DO_
}

void LoginRequestTeamMakeTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->role_data_, output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamMakeTeam)
}

::google::protobuf::uint8* LoginRequestTeamMakeTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->role_data_, deterministic, target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamMakeTeam)
  return target;
}

size_t LoginRequestTeamMakeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamMakeTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.RoleData role_data = 1;
  if (this->has_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_data_);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamMakeTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamMakeTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamMakeTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamMakeTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamMakeTeam)
    MergeFrom(*source);
  }
}

void LoginRequestTeamMakeTeam::MergeFrom(const LoginRequestTeamMakeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role_data()) {
    mutable_role_data()->::GameProto::RoleData::MergeFrom(from.role_data());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginRequestTeamMakeTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamMakeTeam::CopyFrom(const LoginRequestTeamMakeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamMakeTeam::IsInitialized() const {
  return true;
}

void LoginRequestTeamMakeTeam::Swap(LoginRequestTeamMakeTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamMakeTeam::InternalSwap(LoginRequestTeamMakeTeam* other) {
  using std::swap;
  swap(role_data_, other->role_data_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamMakeTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamInviteTeam::kDwResultFieldNumber;
const int LoginRequestTeamInviteTeam::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamInviteTeam::LoginRequestTeamInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamInviteTeam)
}
LoginRequestTeamInviteTeam::LoginRequestTeamInviteTeam(const LoginRequestTeamInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slot_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamInviteTeam)
}

void LoginRequestTeamInviteTeam::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  _cached_size_ = 0;
}

LoginRequestTeamInviteTeam::~LoginRequestTeamInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamInviteTeam)
  SharedDtor();
}

void LoginRequestTeamInviteTeam::SharedDtor() {
}

void LoginRequestTeamInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamInviteTeam& LoginRequestTeamInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamInviteTeam();
  return *internal_default_instance();
}

LoginRequestTeamInviteTeam* LoginRequestTeamInviteTeam::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamInviteTeam* n = new LoginRequestTeamInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestTeamInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamInviteTeam)
  return false;
#undef DO_
}

void LoginRequestTeamInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamInviteTeam)
}

::google::protobuf::uint8* LoginRequestTeamInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamInviteTeam)
  return target;
}

size_t LoginRequestTeamInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamInviteTeam)
    MergeFrom(*source);
  }
}

void LoginRequestTeamInviteTeam::MergeFrom(const LoginRequestTeamInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
}

void LoginRequestTeamInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamInviteTeam::CopyFrom(const LoginRequestTeamInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamInviteTeam::IsInitialized() const {
  return true;
}

void LoginRequestTeamInviteTeam::Swap(LoginRequestTeamInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamInviteTeam::InternalSwap(LoginRequestTeamInviteTeam* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_id_, other->dw_slot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamChangeSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamChangeSlot::kDwResultFieldNumber;
const int LoginRequestTeamChangeSlot::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamChangeSlot::LoginRequestTeamChangeSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamChangeSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamChangeSlot)
}
LoginRequestTeamChangeSlot::LoginRequestTeamChangeSlot(const LoginRequestTeamChangeSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slot_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamChangeSlot)
}

void LoginRequestTeamChangeSlot::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  _cached_size_ = 0;
}

LoginRequestTeamChangeSlot::~LoginRequestTeamChangeSlot() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamChangeSlot)
  SharedDtor();
}

void LoginRequestTeamChangeSlot::SharedDtor() {
}

void LoginRequestTeamChangeSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamChangeSlot::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamChangeSlot& LoginRequestTeamChangeSlot::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamChangeSlot();
  return *internal_default_instance();
}

LoginRequestTeamChangeSlot* LoginRequestTeamChangeSlot::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamChangeSlot* n = new LoginRequestTeamChangeSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamChangeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestTeamChangeSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamChangeSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamChangeSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamChangeSlot)
  return false;
#undef DO_
}

void LoginRequestTeamChangeSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamChangeSlot)
}

::google::protobuf::uint8* LoginRequestTeamChangeSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamChangeSlot)
  return target;
}

size_t LoginRequestTeamChangeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamChangeSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot_id = 2;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamChangeSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamChangeSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamChangeSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamChangeSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamChangeSlot)
    MergeFrom(*source);
  }
}

void LoginRequestTeamChangeSlot::MergeFrom(const LoginRequestTeamChangeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
}

void LoginRequestTeamChangeSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamChangeSlot::CopyFrom(const LoginRequestTeamChangeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamChangeSlot::IsInitialized() const {
  return true;
}

void LoginRequestTeamChangeSlot::Swap(LoginRequestTeamChangeSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamChangeSlot::InternalSwap(LoginRequestTeamChangeSlot* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_id_, other->dw_slot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamChangeSlot::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamKickPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamKickPlayer::kQwPlayerIdFieldNumber;
const int LoginRequestTeamKickPlayer::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamKickPlayer::LoginRequestTeamKickPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamKickPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamKickPlayer)
}
LoginRequestTeamKickPlayer::LoginRequestTeamKickPlayer(const LoginRequestTeamKickPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamKickPlayer)
}

void LoginRequestTeamKickPlayer::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

LoginRequestTeamKickPlayer::~LoginRequestTeamKickPlayer() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamKickPlayer)
  SharedDtor();
}

void LoginRequestTeamKickPlayer::SharedDtor() {
}

void LoginRequestTeamKickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamKickPlayer::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamKickPlayer& LoginRequestTeamKickPlayer::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamKickPlayer();
  return *internal_default_instance();
}

LoginRequestTeamKickPlayer* LoginRequestTeamKickPlayer::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamKickPlayer* n = new LoginRequestTeamKickPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamKickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestTeamKickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamKickPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamKickPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamKickPlayer)
  return false;
#undef DO_
}

void LoginRequestTeamKickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamKickPlayer)
}

::google::protobuf::uint8* LoginRequestTeamKickPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamKickPlayer)
  return target;
}

size_t LoginRequestTeamKickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamKickPlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamKickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamKickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamKickPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamKickPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamKickPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamKickPlayer)
    MergeFrom(*source);
  }
}

void LoginRequestTeamKickPlayer::MergeFrom(const LoginRequestTeamKickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamKickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginRequestTeamKickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamKickPlayer::CopyFrom(const LoginRequestTeamKickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamKickPlayer::IsInitialized() const {
  return true;
}

void LoginRequestTeamKickPlayer::Swap(LoginRequestTeamKickPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamKickPlayer::InternalSwap(LoginRequestTeamKickPlayer* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamKickPlayer::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamGameStart::kQwTeamIdFieldNumber;
const int LoginRequestTeamGameStart::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamGameStart::LoginRequestTeamGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamGameStart)
}
LoginRequestTeamGameStart::LoginRequestTeamGameStart(const LoginRequestTeamGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_team_id_, &from.qw_team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_player_id_) -
    reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamGameStart)
}

void LoginRequestTeamGameStart::SharedCtor() {
  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_player_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  _cached_size_ = 0;
}

LoginRequestTeamGameStart::~LoginRequestTeamGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamGameStart)
  SharedDtor();
}

void LoginRequestTeamGameStart::SharedDtor() {
}

void LoginRequestTeamGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamGameStart& LoginRequestTeamGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamGameStart();
  return *internal_default_instance();
}

LoginRequestTeamGameStart* LoginRequestTeamGameStart::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamGameStart* n = new LoginRequestTeamGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_player_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestTeamGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamGameStart)
  return false;
#undef DO_
}

void LoginRequestTeamGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_team_id(), output);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamGameStart)
}

::google::protobuf::uint8* LoginRequestTeamGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_team_id(), target);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamGameStart)
  return target;
}

size_t LoginRequestTeamGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamGameStart)
    MergeFrom(*source);
  }
}

void LoginRequestTeamGameStart::MergeFrom(const LoginRequestTeamGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void LoginRequestTeamGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamGameStart::CopyFrom(const LoginRequestTeamGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamGameStart::IsInitialized() const {
  return true;
}

void LoginRequestTeamGameStart::Swap(LoginRequestTeamGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamGameStart::InternalSwap(LoginRequestTeamGameStart* other) {
  using std::swap;
  swap(qw_team_id_, other->qw_team_id_);
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamEnterTeam::InitAsDefaultInstance() {
  ::GameProto::_LoginRequestTeamEnterTeam_default_instance_._instance.get_mutable()->role_data_ = const_cast< ::GameProto::RoleData*>(
      ::GameProto::RoleData::internal_default_instance());
}
void LoginRequestTeamEnterTeam::clear_role_data() {
  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamEnterTeam::kQwTeamIdFieldNumber;
const int LoginRequestTeamEnterTeam::kRoleDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamEnterTeam::LoginRequestTeamEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamEnterTeam)
}
LoginRequestTeamEnterTeam::LoginRequestTeamEnterTeam(const LoginRequestTeamEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role_data()) {
    role_data_ = new ::GameProto::RoleData(*from.role_data_);
  } else {
    role_data_ = NULL;
  }
  qw_team_id_ = from.qw_team_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamEnterTeam)
}

void LoginRequestTeamEnterTeam::SharedCtor() {
  ::memset(&role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&role_data_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

LoginRequestTeamEnterTeam::~LoginRequestTeamEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamEnterTeam)
  SharedDtor();
}

void LoginRequestTeamEnterTeam::SharedDtor() {
  if (this != internal_default_instance()) delete role_data_;
}

void LoginRequestTeamEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamEnterTeam& LoginRequestTeamEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamEnterTeam();
  return *internal_default_instance();
}

LoginRequestTeamEnterTeam* LoginRequestTeamEnterTeam::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamEnterTeam* n = new LoginRequestTeamEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && role_data_ != NULL) {
    delete role_data_;
  }
  role_data_ = NULL;
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LoginRequestTeamEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.RoleData role_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamEnterTeam)
  return false;
#undef DO_
}

void LoginRequestTeamEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_team_id(), output);
  }

  // .GameProto.RoleData role_data = 2;
  if (this->has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->role_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamEnterTeam)
}

::google::protobuf::uint8* LoginRequestTeamEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_team_id(), target);
  }

  // .GameProto.RoleData role_data = 2;
  if (this->has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->role_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamEnterTeam)
  return target;
}

size_t LoginRequestTeamEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.RoleData role_data = 2;
  if (this->has_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_data_);
  }

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamEnterTeam)
    MergeFrom(*source);
  }
}

void LoginRequestTeamEnterTeam::MergeFrom(const LoginRequestTeamEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role_data()) {
    mutable_role_data()->::GameProto::RoleData::MergeFrom(from.role_data());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginRequestTeamEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamEnterTeam::CopyFrom(const LoginRequestTeamEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamEnterTeam::IsInitialized() const {
  return true;
}

void LoginRequestTeamEnterTeam::Swap(LoginRequestTeamEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamEnterTeam::InternalSwap(LoginRequestTeamEnterTeam* other) {
  using std::swap;
  swap(role_data_, other->role_data_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequestTeamPlayerLeave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestTeamPlayerLeave::kQwPlayerIdFieldNumber;
const int LoginRequestTeamPlayerLeave::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestTeamPlayerLeave::LoginRequestTeamPlayerLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamPlayerLeave();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.LoginRequestTeamPlayerLeave)
}
LoginRequestTeamPlayerLeave::LoginRequestTeamPlayerLeave(const LoginRequestTeamPlayerLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.LoginRequestTeamPlayerLeave)
}

void LoginRequestTeamPlayerLeave::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

LoginRequestTeamPlayerLeave::~LoginRequestTeamPlayerLeave() {
  // @@protoc_insertion_point(destructor:GameProto.LoginRequestTeamPlayerLeave)
  SharedDtor();
}

void LoginRequestTeamPlayerLeave::SharedDtor() {
}

void LoginRequestTeamPlayerLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestTeamPlayerLeave::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequestTeamPlayerLeave& LoginRequestTeamPlayerLeave::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsLoginRequestTeamPlayerLeave();
  return *internal_default_instance();
}

LoginRequestTeamPlayerLeave* LoginRequestTeamPlayerLeave::New(::google::protobuf::Arena* arena) const {
  LoginRequestTeamPlayerLeave* n = new LoginRequestTeamPlayerLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequestTeamPlayerLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.LoginRequestTeamPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool LoginRequestTeamPlayerLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.LoginRequestTeamPlayerLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.LoginRequestTeamPlayerLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.LoginRequestTeamPlayerLeave)
  return false;
#undef DO_
}

void LoginRequestTeamPlayerLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.LoginRequestTeamPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.LoginRequestTeamPlayerLeave)
}

::google::protobuf::uint8* LoginRequestTeamPlayerLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.LoginRequestTeamPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.LoginRequestTeamPlayerLeave)
  return target;
}

size_t LoginRequestTeamPlayerLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.LoginRequestTeamPlayerLeave)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestTeamPlayerLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.LoginRequestTeamPlayerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestTeamPlayerLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequestTeamPlayerLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.LoginRequestTeamPlayerLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.LoginRequestTeamPlayerLeave)
    MergeFrom(*source);
  }
}

void LoginRequestTeamPlayerLeave::MergeFrom(const LoginRequestTeamPlayerLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.LoginRequestTeamPlayerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void LoginRequestTeamPlayerLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.LoginRequestTeamPlayerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestTeamPlayerLeave::CopyFrom(const LoginRequestTeamPlayerLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.LoginRequestTeamPlayerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestTeamPlayerLeave::IsInitialized() const {
  return true;
}

void LoginRequestTeamPlayerLeave::Swap(LoginRequestTeamPlayerLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestTeamPlayerLeave::InternalSwap(LoginRequestTeamPlayerLeave* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequestTeamPlayerLeave::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginMakeTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginMakeTeam::kDwResultFieldNumber;
const int TeamAckLoginMakeTeam::kQwPlayerIdFieldNumber;
const int TeamAckLoginMakeTeam::kQwTeamIdFieldNumber;
const int TeamAckLoginMakeTeam::kDwSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginMakeTeam::TeamAckLoginMakeTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginMakeTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginMakeTeam)
}
TeamAckLoginMakeTeam::TeamAckLoginMakeTeam(const TeamAckLoginMakeTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginMakeTeam)
}

void TeamAckLoginMakeTeam::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

TeamAckLoginMakeTeam::~TeamAckLoginMakeTeam() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginMakeTeam)
  SharedDtor();
}

void TeamAckLoginMakeTeam::SharedDtor() {
}

void TeamAckLoginMakeTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginMakeTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginMakeTeam& TeamAckLoginMakeTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginMakeTeam();
  return *internal_default_instance();
}

TeamAckLoginMakeTeam* TeamAckLoginMakeTeam::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginMakeTeam* n = new TeamAckLoginMakeTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginMakeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginMakeTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginMakeTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginMakeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginMakeTeam)
  return false;
#undef DO_
}

void TeamAckLoginMakeTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qw_team_id(), output);
  }

  // uint32 dw_slot_id = 4;
  if (this->dw_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_slot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginMakeTeam)
}

::google::protobuf::uint8* TeamAckLoginMakeTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginMakeTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qw_team_id(), target);
  }

  // uint32 dw_slot_id = 4;
  if (this->dw_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_slot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginMakeTeam)
  return target;
}

size_t TeamAckLoginMakeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginMakeTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot_id = 4;
  if (this->dw_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot_id());
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginMakeTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginMakeTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginMakeTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginMakeTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginMakeTeam)
    MergeFrom(*source);
  }
}

void TeamAckLoginMakeTeam::MergeFrom(const TeamAckLoginMakeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginMakeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot_id() != 0) {
    set_dw_slot_id(from.dw_slot_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void TeamAckLoginMakeTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginMakeTeam::CopyFrom(const TeamAckLoginMakeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginMakeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginMakeTeam::IsInitialized() const {
  return true;
}

void TeamAckLoginMakeTeam::Swap(TeamAckLoginMakeTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginMakeTeam::InternalSwap(TeamAckLoginMakeTeam* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_id_, other->dw_slot_id_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginMakeTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamNotifyLoginTeamInfo::InitAsDefaultInstance() {
}
void TeamNotifyLoginTeamInfo::clear_team_role_data() {
  team_role_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamNotifyLoginTeamInfo::kTeamRoleDataFieldNumber;
const int TeamNotifyLoginTeamInfo::kQwTeamIdFieldNumber;
const int TeamNotifyLoginTeamInfo::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamNotifyLoginTeamInfo::TeamNotifyLoginTeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamNotifyLoginTeamInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamNotifyLoginTeamInfo)
}
TeamNotifyLoginTeamInfo::TeamNotifyLoginTeamInfo(const TeamNotifyLoginTeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      team_role_data_(from.team_role_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_team_id_, &from.qw_team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_player_id_) -
    reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamNotifyLoginTeamInfo)
}

void TeamNotifyLoginTeamInfo::SharedCtor() {
  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_player_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  _cached_size_ = 0;
}

TeamNotifyLoginTeamInfo::~TeamNotifyLoginTeamInfo() {
  // @@protoc_insertion_point(destructor:GameProto.TeamNotifyLoginTeamInfo)
  SharedDtor();
}

void TeamNotifyLoginTeamInfo::SharedDtor() {
}

void TeamNotifyLoginTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamNotifyLoginTeamInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamNotifyLoginTeamInfo& TeamNotifyLoginTeamInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamNotifyLoginTeamInfo();
  return *internal_default_instance();
}

TeamNotifyLoginTeamInfo* TeamNotifyLoginTeamInfo::New(::google::protobuf::Arena* arena) const {
  TeamNotifyLoginTeamInfo* n = new TeamNotifyLoginTeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamNotifyLoginTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamNotifyLoginTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_role_data_.Clear();
  ::memset(&qw_team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_player_id_) -
      reinterpret_cast<char*>(&qw_team_id_)) + sizeof(qw_player_id_));
  _internal_metadata_.Clear();
}

bool TeamNotifyLoginTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamNotifyLoginTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameProto.TeamRoleData team_role_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_team_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamNotifyLoginTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamNotifyLoginTeamInfo)
  return false;
#undef DO_
}

void TeamNotifyLoginTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamNotifyLoginTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_role_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_role_data(static_cast<int>(i)), output);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_team_id(), output);
  }

  // uint64 qw_player_id = 3;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamNotifyLoginTeamInfo)
}

::google::protobuf::uint8* TeamNotifyLoginTeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamNotifyLoginTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.TeamRoleData team_role_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_role_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->team_role_data(static_cast<int>(i)), deterministic, target);
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_team_id(), target);
  }

  // uint64 qw_player_id = 3;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamNotifyLoginTeamInfo)
  return target;
}

size_t TeamNotifyLoginTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamNotifyLoginTeamInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GameProto.TeamRoleData team_role_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->team_role_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_role_data(static_cast<int>(i)));
    }
  }

  // uint64 qw_team_id = 2;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint64 qw_player_id = 3;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamNotifyLoginTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamNotifyLoginTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamNotifyLoginTeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamNotifyLoginTeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamNotifyLoginTeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamNotifyLoginTeamInfo)
    MergeFrom(*source);
  }
}

void TeamNotifyLoginTeamInfo::MergeFrom(const TeamNotifyLoginTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamNotifyLoginTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_role_data_.MergeFrom(from.team_role_data_);
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void TeamNotifyLoginTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamNotifyLoginTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamNotifyLoginTeamInfo::CopyFrom(const TeamNotifyLoginTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamNotifyLoginTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamNotifyLoginTeamInfo::IsInitialized() const {
  return true;
}

void TeamNotifyLoginTeamInfo::Swap(TeamNotifyLoginTeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamNotifyLoginTeamInfo::InternalSwap(TeamNotifyLoginTeamInfo* other) {
  using std::swap;
  team_role_data_.InternalSwap(&other->team_role_data_);
  swap(qw_team_id_, other->qw_team_id_);
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamNotifyLoginTeamInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginInviteTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginInviteTeam::kDwResultFieldNumber;
const int TeamAckLoginInviteTeam::kDwSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginInviteTeam::TeamAckLoginInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginInviteTeam)
}
TeamAckLoginInviteTeam::TeamAckLoginInviteTeam(const TeamAckLoginInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slot_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginInviteTeam)
}

void TeamAckLoginInviteTeam::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  _cached_size_ = 0;
}

TeamAckLoginInviteTeam::~TeamAckLoginInviteTeam() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginInviteTeam)
  SharedDtor();
}

void TeamAckLoginInviteTeam::SharedDtor() {
}

void TeamAckLoginInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginInviteTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginInviteTeam& TeamAckLoginInviteTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginInviteTeam();
  return *internal_default_instance();
}

TeamAckLoginInviteTeam* TeamAckLoginInviteTeam::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginInviteTeam* n = new TeamAckLoginInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginInviteTeam)
  return false;
#undef DO_
}

void TeamAckLoginInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginInviteTeam)
}

::google::protobuf::uint8* TeamAckLoginInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginInviteTeam)
  return target;
}

size_t TeamAckLoginInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginInviteTeam)
    MergeFrom(*source);
  }
}

void TeamAckLoginInviteTeam::MergeFrom(const TeamAckLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot() != 0) {
    set_dw_slot(from.dw_slot());
  }
}

void TeamAckLoginInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginInviteTeam::CopyFrom(const TeamAckLoginInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginInviteTeam::IsInitialized() const {
  return true;
}

void TeamAckLoginInviteTeam::Swap(TeamAckLoginInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginInviteTeam::InternalSwap(TeamAckLoginInviteTeam* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_, other->dw_slot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginInviteTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginChangeSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginChangeSlot::kDwResultFieldNumber;
const int TeamAckLoginChangeSlot::kDwSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginChangeSlot::TeamAckLoginChangeSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginChangeSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginChangeSlot)
}
TeamAckLoginChangeSlot::TeamAckLoginChangeSlot(const TeamAckLoginChangeSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slot_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginChangeSlot)
}

void TeamAckLoginChangeSlot::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  _cached_size_ = 0;
}

TeamAckLoginChangeSlot::~TeamAckLoginChangeSlot() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginChangeSlot)
  SharedDtor();
}

void TeamAckLoginChangeSlot::SharedDtor() {
}

void TeamAckLoginChangeSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginChangeSlot::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginChangeSlot& TeamAckLoginChangeSlot::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginChangeSlot();
  return *internal_default_instance();
}

TeamAckLoginChangeSlot* TeamAckLoginChangeSlot::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginChangeSlot* n = new TeamAckLoginChangeSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginChangeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slot_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_slot_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginChangeSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginChangeSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginChangeSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginChangeSlot)
  return false;
#undef DO_
}

void TeamAckLoginChangeSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_slot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginChangeSlot)
}

::google::protobuf::uint8* TeamAckLoginChangeSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginChangeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_slot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginChangeSlot)
  return target;
}

size_t TeamAckLoginChangeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginChangeSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_slot = 2;
  if (this->dw_slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginChangeSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginChangeSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginChangeSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginChangeSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginChangeSlot)
    MergeFrom(*source);
  }
}

void TeamAckLoginChangeSlot::MergeFrom(const TeamAckLoginChangeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginChangeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_slot() != 0) {
    set_dw_slot(from.dw_slot());
  }
}

void TeamAckLoginChangeSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginChangeSlot::CopyFrom(const TeamAckLoginChangeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginChangeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginChangeSlot::IsInitialized() const {
  return true;
}

void TeamAckLoginChangeSlot::Swap(TeamAckLoginChangeSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginChangeSlot::InternalSwap(TeamAckLoginChangeSlot* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_slot_, other->dw_slot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginChangeSlot::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginKickPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginKickPlayer::kDwResultFieldNumber;
const int TeamAckLoginKickPlayer::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginKickPlayer::TeamAckLoginKickPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginKickPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginKickPlayer)
}
TeamAckLoginKickPlayer::TeamAckLoginKickPlayer(const TeamAckLoginKickPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_result_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginKickPlayer)
}

void TeamAckLoginKickPlayer::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _cached_size_ = 0;
}

TeamAckLoginKickPlayer::~TeamAckLoginKickPlayer() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginKickPlayer)
  SharedDtor();
}

void TeamAckLoginKickPlayer::SharedDtor() {
}

void TeamAckLoginKickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginKickPlayer::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginKickPlayer& TeamAckLoginKickPlayer::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginKickPlayer();
  return *internal_default_instance();
}

TeamAckLoginKickPlayer* TeamAckLoginKickPlayer::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginKickPlayer* n = new TeamAckLoginKickPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginKickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginKickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginKickPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginKickPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginKickPlayer)
  return false;
#undef DO_
}

void TeamAckLoginKickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginKickPlayer)
}

::google::protobuf::uint8* TeamAckLoginKickPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginKickPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginKickPlayer)
  return target;
}

size_t TeamAckLoginKickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginKickPlayer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginKickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginKickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginKickPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginKickPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginKickPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginKickPlayer)
    MergeFrom(*source);
  }
}

void TeamAckLoginKickPlayer::MergeFrom(const TeamAckLoginKickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginKickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void TeamAckLoginKickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginKickPlayer::CopyFrom(const TeamAckLoginKickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginKickPlayer::IsInitialized() const {
  return true;
}

void TeamAckLoginKickPlayer::Swap(TeamAckLoginKickPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginKickPlayer::InternalSwap(TeamAckLoginKickPlayer* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginKickPlayer::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginGameStart::kDwResultFieldNumber;
const int TeamAckLoginGameStart::kDwPlayerPortFieldNumber;
const int TeamAckLoginGameStart::kDwServerPortFieldNumber;
const int TeamAckLoginGameStart::kDwSlaveServerPortFieldNumber;
const int TeamAckLoginGameStart::kSzListenIpFieldNumber;
const int TeamAckLoginGameStart::kQwPlayerIdFieldNumber;
const int TeamAckLoginGameStart::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginGameStart::TeamAckLoginGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginGameStart)
}
TeamAckLoginGameStart::TeamAckLoginGameStart(const TeamAckLoginGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_listen_ip().size() > 0) {
    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginGameStart)
}

void TeamAckLoginGameStart::SharedCtor() {
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

TeamAckLoginGameStart::~TeamAckLoginGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginGameStart)
  SharedDtor();
}

void TeamAckLoginGameStart::SharedDtor() {
  sz_listen_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamAckLoginGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginGameStart& TeamAckLoginGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginGameStart();
  return *internal_default_instance();
}

TeamAckLoginGameStart* TeamAckLoginGameStart::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginGameStart* n = new TeamAckLoginGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_player_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_listen_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_listen_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.TeamAckLoginGameStart.sz_listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginGameStart)
  return false;
#undef DO_
}

void TeamAckLoginGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_slave_server_port(), output);
  }

  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.TeamAckLoginGameStart.sz_listen_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sz_listen_ip(), output);
  }

  // uint64 qw_player_id = 6;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 7;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginGameStart)
}

::google::protobuf::uint8* TeamAckLoginGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_slave_server_port(), target);
  }

  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.TeamAckLoginGameStart.sz_listen_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sz_listen_ip(), target);
  }

  // uint64 qw_player_id = 6;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 7;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginGameStart)
  return target;
}

size_t TeamAckLoginGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_listen_ip = 5;
  if (this->sz_listen_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_listen_ip());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  // uint64 qw_player_id = 6;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint64 qw_team_id = 7;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginGameStart)
    MergeFrom(*source);
  }
}

void TeamAckLoginGameStart::MergeFrom(const TeamAckLoginGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_listen_ip().size() > 0) {

    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void TeamAckLoginGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginGameStart::CopyFrom(const TeamAckLoginGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginGameStart::IsInitialized() const {
  return true;
}

void TeamAckLoginGameStart::Swap(TeamAckLoginGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginGameStart::InternalSwap(TeamAckLoginGameStart* other) {
  using std::swap;
  sz_listen_ip_.Swap(&other->sz_listen_ip_);
  swap(dw_result_, other->dw_result_);
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  swap(qw_player_id_, other->qw_player_id_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginEnterTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginEnterTeam::kDwResultFieldNumber;
const int TeamAckLoginEnterTeam::kQwPlayerIdFieldNumber;
const int TeamAckLoginEnterTeam::kQwTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginEnterTeam::TeamAckLoginEnterTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginEnterTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginEnterTeam)
}
TeamAckLoginEnterTeam::TeamAckLoginEnterTeam(const TeamAckLoginEnterTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_result_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginEnterTeam)
}

void TeamAckLoginEnterTeam::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _cached_size_ = 0;
}

TeamAckLoginEnterTeam::~TeamAckLoginEnterTeam() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginEnterTeam)
  SharedDtor();
}

void TeamAckLoginEnterTeam::SharedDtor() {
}

void TeamAckLoginEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginEnterTeam::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginEnterTeam& TeamAckLoginEnterTeam::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginEnterTeam();
  return *internal_default_instance();
}

TeamAckLoginEnterTeam* TeamAckLoginEnterTeam::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginEnterTeam* n = new TeamAckLoginEnterTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginEnterTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginEnterTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginEnterTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginEnterTeam)
  return false;
#undef DO_
}

void TeamAckLoginEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_player_id(), output);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qw_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginEnterTeam)
}

::google::protobuf::uint8* TeamAckLoginEnterTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginEnterTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_player_id(), target);
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qw_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginEnterTeam)
  return target;
}

size_t TeamAckLoginEnterTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginEnterTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint64 qw_team_id = 3;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginEnterTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginEnterTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginEnterTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginEnterTeam)
    MergeFrom(*source);
  }
}

void TeamAckLoginEnterTeam::MergeFrom(const TeamAckLoginEnterTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginEnterTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void TeamAckLoginEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginEnterTeam::CopyFrom(const TeamAckLoginEnterTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginEnterTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginEnterTeam::IsInitialized() const {
  return true;
}

void TeamAckLoginEnterTeam::Swap(TeamAckLoginEnterTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginEnterTeam::InternalSwap(TeamAckLoginEnterTeam* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginEnterTeam::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAckLoginPlayerLeave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAckLoginPlayerLeave::kDwResultFieldNumber;
const int TeamAckLoginPlayerLeave::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAckLoginPlayerLeave::TeamAckLoginPlayerLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginPlayerLeave();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamAckLoginPlayerLeave)
}
TeamAckLoginPlayerLeave::TeamAckLoginPlayerLeave(const TeamAckLoginPlayerLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qw_player_id_, &from.qw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_result_) -
    reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamAckLoginPlayerLeave)
}

void TeamAckLoginPlayerLeave::SharedCtor() {
  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _cached_size_ = 0;
}

TeamAckLoginPlayerLeave::~TeamAckLoginPlayerLeave() {
  // @@protoc_insertion_point(destructor:GameProto.TeamAckLoginPlayerLeave)
  SharedDtor();
}

void TeamAckLoginPlayerLeave::SharedDtor() {
}

void TeamAckLoginPlayerLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAckLoginPlayerLeave::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAckLoginPlayerLeave& TeamAckLoginPlayerLeave::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamAckLoginPlayerLeave();
  return *internal_default_instance();
}

TeamAckLoginPlayerLeave* TeamAckLoginPlayerLeave::New(::google::protobuf::Arena* arena) const {
  TeamAckLoginPlayerLeave* n = new TeamAckLoginPlayerLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamAckLoginPlayerLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamAckLoginPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_result_) -
      reinterpret_cast<char*>(&qw_player_id_)) + sizeof(dw_result_));
  _internal_metadata_.Clear();
}

bool TeamAckLoginPlayerLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamAckLoginPlayerLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamAckLoginPlayerLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamAckLoginPlayerLeave)
  return false;
#undef DO_
}

void TeamAckLoginPlayerLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamAckLoginPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamAckLoginPlayerLeave)
}

::google::protobuf::uint8* TeamAckLoginPlayerLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamAckLoginPlayerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamAckLoginPlayerLeave)
  return target;
}

size_t TeamAckLoginPlayerLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamAckLoginPlayerLeave)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 2;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAckLoginPlayerLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamAckLoginPlayerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAckLoginPlayerLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAckLoginPlayerLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamAckLoginPlayerLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamAckLoginPlayerLeave)
    MergeFrom(*source);
  }
}

void TeamAckLoginPlayerLeave::MergeFrom(const TeamAckLoginPlayerLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamAckLoginPlayerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void TeamAckLoginPlayerLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamAckLoginPlayerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAckLoginPlayerLeave::CopyFrom(const TeamAckLoginPlayerLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamAckLoginPlayerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAckLoginPlayerLeave::IsInitialized() const {
  return true;
}

void TeamAckLoginPlayerLeave::Swap(TeamAckLoginPlayerLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAckLoginPlayerLeave::InternalSwap(TeamAckLoginPlayerLeave* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamAckLoginPlayerLeave::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamRequestGameManagerGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRequestGameManagerGameStart::kQwTeamIdFieldNumber;
const int TeamRequestGameManagerGameStart::kQwPlayerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRequestGameManagerGameStart::TeamRequestGameManagerGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsTeamRequestGameManagerGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.TeamRequestGameManagerGameStart)
}
TeamRequestGameManagerGameStart::TeamRequestGameManagerGameStart(const TeamRequestGameManagerGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      qw_player_ids_(from.qw_player_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qw_team_id_ = from.qw_team_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.TeamRequestGameManagerGameStart)
}

void TeamRequestGameManagerGameStart::SharedCtor() {
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TeamRequestGameManagerGameStart::~TeamRequestGameManagerGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.TeamRequestGameManagerGameStart)
  SharedDtor();
}

void TeamRequestGameManagerGameStart::SharedDtor() {
}

void TeamRequestGameManagerGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRequestGameManagerGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRequestGameManagerGameStart& TeamRequestGameManagerGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsTeamRequestGameManagerGameStart();
  return *internal_default_instance();
}

TeamRequestGameManagerGameStart* TeamRequestGameManagerGameStart::New(::google::protobuf::Arena* arena) const {
  TeamRequestGameManagerGameStart* n = new TeamRequestGameManagerGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRequestGameManagerGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.TeamRequestGameManagerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qw_player_ids_.Clear();
  qw_team_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TeamRequestGameManagerGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.TeamRequestGameManagerGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 qw_player_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_qw_player_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_qw_player_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.TeamRequestGameManagerGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.TeamRequestGameManagerGameStart)
  return false;
#undef DO_
}

void TeamRequestGameManagerGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.TeamRequestGameManagerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_team_id(), output);
  }

  // repeated uint64 qw_player_ids = 2;
  if (this->qw_player_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _qw_player_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->qw_player_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->qw_player_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.TeamRequestGameManagerGameStart)
}

::google::protobuf::uint8* TeamRequestGameManagerGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.TeamRequestGameManagerGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_team_id(), target);
  }

  // repeated uint64 qw_player_ids = 2;
  if (this->qw_player_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _qw_player_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->qw_player_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.TeamRequestGameManagerGameStart)
  return target;
}

size_t TeamRequestGameManagerGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.TeamRequestGameManagerGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 qw_player_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->qw_player_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qw_player_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 qw_team_id = 1;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRequestGameManagerGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.TeamRequestGameManagerGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRequestGameManagerGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRequestGameManagerGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.TeamRequestGameManagerGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.TeamRequestGameManagerGameStart)
    MergeFrom(*source);
  }
}

void TeamRequestGameManagerGameStart::MergeFrom(const TeamRequestGameManagerGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.TeamRequestGameManagerGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qw_player_ids_.MergeFrom(from.qw_player_ids_);
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void TeamRequestGameManagerGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.TeamRequestGameManagerGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRequestGameManagerGameStart::CopyFrom(const TeamRequestGameManagerGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.TeamRequestGameManagerGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRequestGameManagerGameStart::IsInitialized() const {
  return true;
}

void TeamRequestGameManagerGameStart::Swap(TeamRequestGameManagerGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRequestGameManagerGameStart::InternalSwap(TeamRequestGameManagerGameStart* other) {
  using std::swap;
  qw_player_ids_.InternalSwap(&other->qw_player_ids_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRequestGameManagerGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckTeamGameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckTeamGameStart::kDwResultFieldNumber;
const int GameManagerAckTeamGameStart::kDwPlayerPortFieldNumber;
const int GameManagerAckTeamGameStart::kDwServerPortFieldNumber;
const int GameManagerAckTeamGameStart::kDwSlaveServerPortFieldNumber;
const int GameManagerAckTeamGameStart::kQwTeamIdFieldNumber;
const int GameManagerAckTeamGameStart::kSzListenIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckTeamGameStart::GameManagerAckTeamGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckTeamGameStart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameManagerAckTeamGameStart)
}
GameManagerAckTeamGameStart::GameManagerAckTeamGameStart(const GameManagerAckTeamGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_listen_ip().size() > 0) {
    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_team_id_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameManagerAckTeamGameStart)
}

void GameManagerAckTeamGameStart::SharedCtor() {
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _cached_size_ = 0;
}

GameManagerAckTeamGameStart::~GameManagerAckTeamGameStart() {
  // @@protoc_insertion_point(destructor:GameProto.GameManagerAckTeamGameStart)
  SharedDtor();
}

void GameManagerAckTeamGameStart::SharedDtor() {
  sz_listen_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameManagerAckTeamGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckTeamGameStart::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckTeamGameStart& GameManagerAckTeamGameStart::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckTeamGameStart();
  return *internal_default_instance();
}

GameManagerAckTeamGameStart* GameManagerAckTeamGameStart::New(::google::protobuf::Arena* arena) const {
  GameManagerAckTeamGameStart* n = new GameManagerAckTeamGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckTeamGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameManagerAckTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_team_id_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(qw_team_id_));
  _internal_metadata_.Clear();
}

bool GameManagerAckTeamGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameManagerAckTeamGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_player_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_listen_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_listen_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.GameManagerAckTeamGameStart.sz_listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameManagerAckTeamGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameManagerAckTeamGameStart)
  return false;
#undef DO_
}

void GameManagerAckTeamGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameManagerAckTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_slave_server_port(), output);
  }

  // uint64 qw_team_id = 5;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->qw_team_id(), output);
  }

  // string sz_listen_ip = 6;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.GameManagerAckTeamGameStart.sz_listen_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sz_listen_ip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameManagerAckTeamGameStart)
}

::google::protobuf::uint8* GameManagerAckTeamGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameManagerAckTeamGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_slave_server_port(), target);
  }

  // uint64 qw_team_id = 5;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->qw_team_id(), target);
  }

  // string sz_listen_ip = 6;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.GameManagerAckTeamGameStart.sz_listen_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sz_listen_ip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameManagerAckTeamGameStart)
  return target;
}

size_t GameManagerAckTeamGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameManagerAckTeamGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_listen_ip = 6;
  if (this->sz_listen_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_listen_ip());
  }

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_player_port = 2;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 3;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 4;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  // uint64 qw_team_id = 5;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckTeamGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameManagerAckTeamGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckTeamGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckTeamGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameManagerAckTeamGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameManagerAckTeamGameStart)
    MergeFrom(*source);
  }
}

void GameManagerAckTeamGameStart::MergeFrom(const GameManagerAckTeamGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameManagerAckTeamGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_listen_ip().size() > 0) {

    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
}

void GameManagerAckTeamGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameManagerAckTeamGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckTeamGameStart::CopyFrom(const GameManagerAckTeamGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameManagerAckTeamGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckTeamGameStart::IsInitialized() const {
  return true;
}

void GameManagerAckTeamGameStart::Swap(GameManagerAckTeamGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckTeamGameStart::InternalSwap(GameManagerAckTeamGameStart* other) {
  using std::swap;
  sz_listen_ip_.Swap(&other->sz_listen_ip_);
  swap(dw_result_, other->dw_result_);
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  swap(qw_team_id_, other->qw_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckTeamGameStart::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyGameManagerInfo::kDwPlayerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kDwSlaveServerPortFieldNumber;
const int GameNotifyGameManagerInfo::kQwTeamIdFieldNumber;
const int GameNotifyGameManagerInfo::kDwTeamServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyGameManagerInfo::GameNotifyGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyGameManagerInfo)
}
GameNotifyGameManagerInfo::GameNotifyGameManagerInfo(const GameNotifyGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_team_server_id_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_team_server_id_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyGameManagerInfo)
}

void GameNotifyGameManagerInfo::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_team_server_id_));
  _cached_size_ = 0;
}

GameNotifyGameManagerInfo::~GameNotifyGameManagerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyGameManagerInfo)
  SharedDtor();
}

void GameNotifyGameManagerInfo::SharedDtor() {
}

void GameNotifyGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyGameManagerInfo& GameNotifyGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyGameManagerInfo();
  return *internal_default_instance();
}

GameNotifyGameManagerInfo* GameNotifyGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  GameNotifyGameManagerInfo* n = new GameNotifyGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_team_server_id_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_team_server_id_));
  _internal_metadata_.Clear();
}

bool GameNotifyGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qw_team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_team_server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyGameManagerInfo)
  return false;
#undef DO_
}

void GameNotifyGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  // uint64 qw_team_id = 4;
  if (this->qw_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->qw_team_id(), output);
  }

  // uint32 dw_team_server_id = 5;
  if (this->dw_team_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw_team_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyGameManagerInfo)
}

::google::protobuf::uint8* GameNotifyGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  // uint64 qw_team_id = 4;
  if (this->qw_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->qw_team_id(), target);
  }

  // uint32 dw_team_server_id = 5;
  if (this->dw_team_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw_team_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyGameManagerInfo)
  return target;
}

size_t GameNotifyGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint64 qw_team_id = 4;
  if (this->qw_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_team_id());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  // uint32 dw_team_server_id = 5;
  if (this->dw_team_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyGameManagerInfo)
    MergeFrom(*source);
  }
}

void GameNotifyGameManagerInfo::MergeFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.qw_team_id() != 0) {
    set_qw_team_id(from.qw_team_id());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
  if (from.dw_team_server_id() != 0) {
    set_dw_team_server_id(from.dw_team_server_id());
  }
}

void GameNotifyGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyGameManagerInfo::CopyFrom(const GameNotifyGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyGameManagerInfo::IsInitialized() const {
  return true;
}

void GameNotifyGameManagerInfo::Swap(GameNotifyGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyGameManagerInfo::InternalSwap(GameNotifyGameManagerInfo* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(qw_team_id_, other->qw_team_id_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  swap(dw_team_server_id_, other->dw_team_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckGameInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckGameInfoResult::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckGameInfoResult::GameManagerAckGameInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameManagerAckGameInfoResult)
}
GameManagerAckGameInfoResult::GameManagerAckGameInfoResult(const GameManagerAckGameInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameManagerAckGameInfoResult)
}

void GameManagerAckGameInfoResult::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

GameManagerAckGameInfoResult::~GameManagerAckGameInfoResult() {
  // @@protoc_insertion_point(destructor:GameProto.GameManagerAckGameInfoResult)
  SharedDtor();
}

void GameManagerAckGameInfoResult::SharedDtor() {
}

void GameManagerAckGameInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckGameInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckGameInfoResult& GameManagerAckGameInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckGameInfoResult();
  return *internal_default_instance();
}

GameManagerAckGameInfoResult* GameManagerAckGameInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckGameInfoResult* n = new GameManagerAckGameInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckGameInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool GameManagerAckGameInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameManagerAckGameInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameManagerAckGameInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameManagerAckGameInfoResult)
  return false;
#undef DO_
}

void GameManagerAckGameInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameManagerAckGameInfoResult)
}

::google::protobuf::uint8* GameManagerAckGameInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameManagerAckGameInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameManagerAckGameInfoResult)
  return target;
}

size_t GameManagerAckGameInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameManagerAckGameInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckGameInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckGameInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckGameInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameManagerAckGameInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameManagerAckGameInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckGameInfoResult::MergeFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameManagerAckGameInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void GameManagerAckGameInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckGameInfoResult::CopyFrom(const GameManagerAckGameInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameManagerAckGameInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckGameInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckGameInfoResult::Swap(GameManagerAckGameInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckGameInfoResult::InternalSwap(GameManagerAckGameInfoResult* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckGameInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameManagerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameManagerInfo::kDwResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestGameManagerInfo)
}
PlayerRequestGameManagerInfo::PlayerRequestGameManagerInfo(const PlayerRequestGameManagerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_result_ = from.dw_result_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestGameManagerInfo)
}

void PlayerRequestGameManagerInfo::SharedCtor() {
  dw_result_ = 0u;
  _cached_size_ = 0;
}

PlayerRequestGameManagerInfo::~PlayerRequestGameManagerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestGameManagerInfo)
  SharedDtor();
}

void PlayerRequestGameManagerInfo::SharedDtor() {
}

void PlayerRequestGameManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameManagerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameManagerInfo& PlayerRequestGameManagerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameManagerInfo();
  return *internal_default_instance();
}

PlayerRequestGameManagerInfo* PlayerRequestGameManagerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameManagerInfo* n = new PlayerRequestGameManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_result_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerRequestGameManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestGameManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestGameManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestGameManagerInfo)
  return false;
#undef DO_
}

void PlayerRequestGameManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestGameManagerInfo)
}

::google::protobuf::uint8* PlayerRequestGameManagerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestGameManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestGameManagerInfo)
  return target;
}

size_t PlayerRequestGameManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestGameManagerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameManagerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameManagerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestGameManagerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestGameManagerInfo)
    MergeFrom(*source);
  }
}

void PlayerRequestGameManagerInfo::MergeFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestGameManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
}

void PlayerRequestGameManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameManagerInfo::CopyFrom(const PlayerRequestGameManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestGameManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameManagerInfo::IsInitialized() const {
  return true;
}

void PlayerRequestGameManagerInfo::Swap(PlayerRequestGameManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameManagerInfo::InternalSwap(PlayerRequestGameManagerInfo* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameManagerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameManagerAckPlayerInfoResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameManagerAckPlayerInfoResult::kDwPlayerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwServerPortFieldNumber;
const int GameManagerAckPlayerInfoResult::kDwSlaveServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameManagerAckPlayerInfoResult)
}
GameManagerAckPlayerInfoResult::GameManagerAckPlayerInfoResult(const GameManagerAckPlayerInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_player_port_, &from.dw_player_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_slave_server_port_) -
    reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameManagerAckPlayerInfoResult)
}

void GameManagerAckPlayerInfoResult::SharedCtor() {
  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _cached_size_ = 0;
}

GameManagerAckPlayerInfoResult::~GameManagerAckPlayerInfoResult() {
  // @@protoc_insertion_point(destructor:GameProto.GameManagerAckPlayerInfoResult)
  SharedDtor();
}

void GameManagerAckPlayerInfoResult::SharedDtor() {
}

void GameManagerAckPlayerInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameManagerAckPlayerInfoResult::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameManagerAckPlayerInfoResult& GameManagerAckPlayerInfoResult::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameManagerAckPlayerInfoResult();
  return *internal_default_instance();
}

GameManagerAckPlayerInfoResult* GameManagerAckPlayerInfoResult::New(::google::protobuf::Arena* arena) const {
  GameManagerAckPlayerInfoResult* n = new GameManagerAckPlayerInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameManagerAckPlayerInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_player_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_slave_server_port_) -
      reinterpret_cast<char*>(&dw_player_port_)) + sizeof(dw_slave_server_port_));
  _internal_metadata_.Clear();
}

bool GameManagerAckPlayerInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameManagerAckPlayerInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_player_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_slave_server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_slave_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameManagerAckPlayerInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameManagerAckPlayerInfoResult)
  return false;
#undef DO_
}

void GameManagerAckPlayerInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_player_port(), output);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_server_port(), output);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_slave_server_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameManagerAckPlayerInfoResult)
}

::google::protobuf::uint8* GameManagerAckPlayerInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameManagerAckPlayerInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_player_port(), target);
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_server_port(), target);
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_slave_server_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameManagerAckPlayerInfoResult)
  return target;
}

size_t GameManagerAckPlayerInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameManagerAckPlayerInfoResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_player_port = 1;
  if (this->dw_player_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_player_port());
  }

  // uint32 dw_server_port = 2;
  if (this->dw_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_port());
  }

  // uint32 dw_slave_server_port = 3;
  if (this->dw_slave_server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_slave_server_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameManagerAckPlayerInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameManagerAckPlayerInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameManagerAckPlayerInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameManagerAckPlayerInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameManagerAckPlayerInfoResult)
    MergeFrom(*source);
  }
}

void GameManagerAckPlayerInfoResult::MergeFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameManagerAckPlayerInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_player_port() != 0) {
    set_dw_player_port(from.dw_player_port());
  }
  if (from.dw_server_port() != 0) {
    set_dw_server_port(from.dw_server_port());
  }
  if (from.dw_slave_server_port() != 0) {
    set_dw_slave_server_port(from.dw_slave_server_port());
  }
}

void GameManagerAckPlayerInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameManagerAckPlayerInfoResult::CopyFrom(const GameManagerAckPlayerInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameManagerAckPlayerInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagerAckPlayerInfoResult::IsInitialized() const {
  return true;
}

void GameManagerAckPlayerInfoResult::Swap(GameManagerAckPlayerInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameManagerAckPlayerInfoResult::InternalSwap(GameManagerAckPlayerInfoResult* other) {
  using std::swap;
  swap(dw_player_port_, other->dw_player_port_);
  swap(dw_server_port_, other->dw_server_port_);
  swap(dw_slave_server_port_, other->dw_slave_server_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameManagerAckPlayerInfoResult::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameTest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameTest::kSzTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameTest::PlayerRequestGameTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestGameTest)
}
PlayerRequestGameTest::PlayerRequestGameTest(const PlayerRequestGameTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_test().size() > 0) {
    sz_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_test_);
  }
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestGameTest)
}

void PlayerRequestGameTest::SharedCtor() {
  sz_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlayerRequestGameTest::~PlayerRequestGameTest() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestGameTest)
  SharedDtor();
}

void PlayerRequestGameTest::SharedDtor() {
  sz_test_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerRequestGameTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameTest::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameTest& PlayerRequestGameTest::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameTest();
  return *internal_default_instance();
}

PlayerRequestGameTest* PlayerRequestGameTest::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameTest* n = new PlayerRequestGameTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameTest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PlayerRequestGameTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestGameTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sz_test = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_test()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_test().data(), static_cast<int>(this->sz_test().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerRequestGameTest.sz_test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestGameTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestGameTest)
  return false;
#undef DO_
}

void PlayerRequestGameTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_test().data(), static_cast<int>(this->sz_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestGameTest.sz_test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sz_test(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestGameTest)
}

::google::protobuf::uint8* PlayerRequestGameTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestGameTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_test().data(), static_cast<int>(this->sz_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerRequestGameTest.sz_test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sz_test(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestGameTest)
  return target;
}

size_t PlayerRequestGameTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestGameTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_test = 1;
  if (this->sz_test().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_test());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestGameTest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestGameTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestGameTest)
    MergeFrom(*source);
  }
}

void PlayerRequestGameTest::MergeFrom(const PlayerRequestGameTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestGameTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_test().size() > 0) {

    sz_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_test_);
  }
}

void PlayerRequestGameTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestGameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameTest::CopyFrom(const PlayerRequestGameTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestGameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameTest::IsInitialized() const {
  return true;
}

void PlayerRequestGameTest::Swap(PlayerRequestGameTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameTest::InternalSwap(PlayerRequestGameTest* other) {
  using std::swap;
  sz_test_.Swap(&other->sz_test_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameTest::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestGameEnter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestGameEnter::kQwPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestGameEnter::PlayerRequestGameEnter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameEnter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestGameEnter)
}
PlayerRequestGameEnter::PlayerRequestGameEnter(const PlayerRequestGameEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qw_player_id_ = from.qw_player_id_;
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestGameEnter)
}

void PlayerRequestGameEnter::SharedCtor() {
  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PlayerRequestGameEnter::~PlayerRequestGameEnter() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestGameEnter)
  SharedDtor();
}

void PlayerRequestGameEnter::SharedDtor() {
}

void PlayerRequestGameEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestGameEnter::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestGameEnter& PlayerRequestGameEnter::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestGameEnter();
  return *internal_default_instance();
}

PlayerRequestGameEnter* PlayerRequestGameEnter::New(::google::protobuf::Arena* arena) const {
  PlayerRequestGameEnter* n = new PlayerRequestGameEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestGameEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestGameEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qw_player_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PlayerRequestGameEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestGameEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 qw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestGameEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestGameEnter)
  return false;
#undef DO_
}

void PlayerRequestGameEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestGameEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->qw_player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestGameEnter)
}

::google::protobuf::uint8* PlayerRequestGameEnter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestGameEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->qw_player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestGameEnter)
  return target;
}

size_t PlayerRequestGameEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestGameEnter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 qw_player_id = 1;
  if (this->qw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qw_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestGameEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestGameEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestGameEnter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestGameEnter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestGameEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestGameEnter)
    MergeFrom(*source);
  }
}

void PlayerRequestGameEnter::MergeFrom(const PlayerRequestGameEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestGameEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qw_player_id() != 0) {
    set_qw_player_id(from.qw_player_id());
  }
}

void PlayerRequestGameEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestGameEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestGameEnter::CopyFrom(const PlayerRequestGameEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestGameEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestGameEnter::IsInitialized() const {
  return true;
}

void PlayerRequestGameEnter::Swap(PlayerRequestGameEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestGameEnter::InternalSwap(PlayerRequestGameEnter* other) {
  using std::swap;
  swap(qw_player_id_, other->qw_player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestGameEnter::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestMove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestMove::kFTickFieldNumber;
const int PlayerRequestMove::kEDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestMove::PlayerRequestMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestMove();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestMove)
}
PlayerRequestMove::PlayerRequestMove(const PlayerRequestMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f_tick_, &from.f_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_direction_) -
    reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestMove)
}

void PlayerRequestMove::SharedCtor() {
  ::memset(&f_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_direction_) -
      reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  _cached_size_ = 0;
}

PlayerRequestMove::~PlayerRequestMove() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestMove)
  SharedDtor();
}

void PlayerRequestMove::SharedDtor() {
}

void PlayerRequestMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestMove::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestMove& PlayerRequestMove::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestMove();
  return *internal_default_instance();
}

PlayerRequestMove* PlayerRequestMove::New(::google::protobuf::Arena* arena) const {
  PlayerRequestMove* n = new PlayerRequestMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestMove::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_direction_) -
      reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  _internal_metadata_.Clear();
}

bool PlayerRequestMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float f_tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.EMoveDirection e_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_e_direction(static_cast< ::GameProto::EMoveDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestMove)
  return false;
#undef DO_
}

void PlayerRequestMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f_tick = 1;
  if (this->f_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->f_tick(), output);
  }

  // .GameProto.EMoveDirection e_direction = 2;
  if (this->e_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->e_direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestMove)
}

::google::protobuf::uint8* PlayerRequestMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f_tick = 1;
  if (this->f_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->f_tick(), target);
  }

  // .GameProto.EMoveDirection e_direction = 2;
  if (this->e_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->e_direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestMove)
  return target;
}

size_t PlayerRequestMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestMove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float f_tick = 1;
  if (this->f_tick() != 0) {
    total_size += 1 + 4;
  }

  // .GameProto.EMoveDirection e_direction = 2;
  if (this->e_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->e_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestMove)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestMove)
    MergeFrom(*source);
  }
}

void PlayerRequestMove::MergeFrom(const PlayerRequestMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f_tick() != 0) {
    set_f_tick(from.f_tick());
  }
  if (from.e_direction() != 0) {
    set_e_direction(from.e_direction());
  }
}

void PlayerRequestMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestMove::CopyFrom(const PlayerRequestMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestMove::IsInitialized() const {
  return true;
}

void PlayerRequestMove::Swap(PlayerRequestMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestMove::InternalSwap(PlayerRequestMove* other) {
  using std::swap;
  swap(f_tick_, other->f_tick_);
  swap(e_direction_, other->e_direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestMove::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRequestRotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRequestRotation::kFTickFieldNumber;
const int PlayerRequestRotation::kEDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRequestRotation::PlayerRequestRotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestRotation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerRequestRotation)
}
PlayerRequestRotation::PlayerRequestRotation(const PlayerRequestRotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f_tick_, &from.f_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_direction_) -
    reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerRequestRotation)
}

void PlayerRequestRotation::SharedCtor() {
  ::memset(&f_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_direction_) -
      reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  _cached_size_ = 0;
}

PlayerRequestRotation::~PlayerRequestRotation() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerRequestRotation)
  SharedDtor();
}

void PlayerRequestRotation::SharedDtor() {
}

void PlayerRequestRotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequestRotation::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRequestRotation& PlayerRequestRotation::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsPlayerRequestRotation();
  return *internal_default_instance();
}

PlayerRequestRotation* PlayerRequestRotation::New(::google::protobuf::Arena* arena) const {
  PlayerRequestRotation* n = new PlayerRequestRotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRequestRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerRequestRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_direction_) -
      reinterpret_cast<char*>(&f_tick_)) + sizeof(e_direction_));
  _internal_metadata_.Clear();
}

bool PlayerRequestRotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerRequestRotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float f_tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.ERotationDirection e_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_e_direction(static_cast< ::GameProto::ERotationDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerRequestRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerRequestRotation)
  return false;
#undef DO_
}

void PlayerRequestRotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerRequestRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f_tick = 1;
  if (this->f_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->f_tick(), output);
  }

  // .GameProto.ERotationDirection e_direction = 2;
  if (this->e_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->e_direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.PlayerRequestRotation)
}

::google::protobuf::uint8* PlayerRequestRotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerRequestRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f_tick = 1;
  if (this->f_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->f_tick(), target);
  }

  // .GameProto.ERotationDirection e_direction = 2;
  if (this->e_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->e_direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerRequestRotation)
  return target;
}

size_t PlayerRequestRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerRequestRotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float f_tick = 1;
  if (this->f_tick() != 0) {
    total_size += 1 + 4;
  }

  // .GameProto.ERotationDirection e_direction = 2;
  if (this->e_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->e_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequestRotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerRequestRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRequestRotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRequestRotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerRequestRotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerRequestRotation)
    MergeFrom(*source);
  }
}

void PlayerRequestRotation::MergeFrom(const PlayerRequestRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerRequestRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f_tick() != 0) {
    set_f_tick(from.f_tick());
  }
  if (from.e_direction() != 0) {
    set_e_direction(from.e_direction());
  }
}

void PlayerRequestRotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerRequestRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequestRotation::CopyFrom(const PlayerRequestRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerRequestRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequestRotation::IsInitialized() const {
  return true;
}

void PlayerRequestRotation::Swap(PlayerRequestRotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRequestRotation::InternalSwap(PlayerRequestRotation* other) {
  using std::swap;
  swap(f_tick_, other->f_tick_);
  swap(e_direction_, other->e_direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRequestRotation::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameAckPlayerEnter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAckPlayerEnter::kDwResultFieldNumber;
const int GameAckPlayerEnter::kDwGameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAckPlayerEnter::GameAckPlayerEnter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameAckPlayerEnter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameAckPlayerEnter)
}
GameAckPlayerEnter::GameAckPlayerEnter(const GameAckPlayerEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dw_result_, &from.dw_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_game_type_) -
    reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_game_type_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameAckPlayerEnter)
}

void GameAckPlayerEnter::SharedCtor() {
  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_game_type_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_game_type_));
  _cached_size_ = 0;
}

GameAckPlayerEnter::~GameAckPlayerEnter() {
  // @@protoc_insertion_point(destructor:GameProto.GameAckPlayerEnter)
  SharedDtor();
}

void GameAckPlayerEnter::SharedDtor() {
}

void GameAckPlayerEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAckPlayerEnter::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameAckPlayerEnter& GameAckPlayerEnter::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameAckPlayerEnter();
  return *internal_default_instance();
}

GameAckPlayerEnter* GameAckPlayerEnter::New(::google::protobuf::Arena* arena) const {
  GameAckPlayerEnter* n = new GameAckPlayerEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameAckPlayerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameAckPlayerEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dw_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_game_type_) -
      reinterpret_cast<char*>(&dw_result_)) + sizeof(dw_game_type_));
  _internal_metadata_.Clear();
}

bool GameAckPlayerEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameAckPlayerEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameAckPlayerEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameAckPlayerEnter)
  return false;
#undef DO_
}

void GameAckPlayerEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameAckPlayerEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_result(), output);
  }

  // uint32 dw_game_type = 2;
  if (this->dw_game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dw_game_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameAckPlayerEnter)
}

::google::protobuf::uint8* GameAckPlayerEnter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameAckPlayerEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_result(), target);
  }

  // uint32 dw_game_type = 2;
  if (this->dw_game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dw_game_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameAckPlayerEnter)
  return target;
}

size_t GameAckPlayerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameAckPlayerEnter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_result = 1;
  if (this->dw_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_result());
  }

  // uint32 dw_game_type = 2;
  if (this->dw_game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAckPlayerEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameAckPlayerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAckPlayerEnter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameAckPlayerEnter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameAckPlayerEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameAckPlayerEnter)
    MergeFrom(*source);
  }
}

void GameAckPlayerEnter::MergeFrom(const GameAckPlayerEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameAckPlayerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_result() != 0) {
    set_dw_result(from.dw_result());
  }
  if (from.dw_game_type() != 0) {
    set_dw_game_type(from.dw_game_type());
  }
}

void GameAckPlayerEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameAckPlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAckPlayerEnter::CopyFrom(const GameAckPlayerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameAckPlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAckPlayerEnter::IsInitialized() const {
  return true;
}

void GameAckPlayerEnter::Swap(GameAckPlayerEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAckPlayerEnter::InternalSwap(GameAckPlayerEnter* other) {
  using std::swap;
  swap(dw_result_, other->dw_result_);
  swap(dw_game_type_, other->dw_game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameAckPlayerEnter::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameConfig::InitAsDefaultInstance() {
  ::GameProto::_GameNotifyPlayerGameConfig_default_instance_._instance.get_mutable()->common_config_ = const_cast< ::GameProto::GameConfigCommon*>(
      ::GameProto::GameConfigCommon::internal_default_instance());
}
void GameNotifyPlayerGameConfig::clear_common_config() {
  if (GetArenaNoVirtual() == NULL && common_config_ != NULL) {
    delete common_config_;
  }
  common_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameConfig::kDwGameTypeFieldNumber;
const int GameNotifyPlayerGameConfig::kCommonConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameConfig::GameNotifyPlayerGameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameConfig)
}
GameNotifyPlayerGameConfig::GameNotifyPlayerGameConfig(const GameNotifyPlayerGameConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_config()) {
    common_config_ = new ::GameProto::GameConfigCommon(*from.common_config_);
  } else {
    common_config_ = NULL;
  }
  dw_game_type_ = from.dw_game_type_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameConfig)
}

void GameNotifyPlayerGameConfig::SharedCtor() {
  ::memset(&common_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_game_type_) -
      reinterpret_cast<char*>(&common_config_)) + sizeof(dw_game_type_));
  _cached_size_ = 0;
}

GameNotifyPlayerGameConfig::~GameNotifyPlayerGameConfig() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameConfig)
  SharedDtor();
}

void GameNotifyPlayerGameConfig::SharedDtor() {
  if (this != internal_default_instance()) delete common_config_;
}

void GameNotifyPlayerGameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameConfig::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameConfig& GameNotifyPlayerGameConfig::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameConfig();
  return *internal_default_instance();
}

GameNotifyPlayerGameConfig* GameNotifyPlayerGameConfig::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameConfig* n = new GameNotifyPlayerGameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_config_ != NULL) {
    delete common_config_;
  }
  common_config_ = NULL;
  dw_game_type_ = 0u;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.GameConfigCommon common_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameConfig)
  return false;
#undef DO_
}

void GameNotifyPlayerGameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_game_type(), output);
  }

  // .GameProto.GameConfigCommon common_config = 2;
  if (this->has_common_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->common_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameConfig)
}

::google::protobuf::uint8* GameNotifyPlayerGameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_game_type(), target);
  }

  // .GameProto.GameConfigCommon common_config = 2;
  if (this->has_common_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->common_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameConfig)
  return target;
}

size_t GameNotifyPlayerGameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.GameConfigCommon common_config = 2;
  if (this->has_common_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_config_);
  }

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameConfig)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameConfig::MergeFrom(const GameNotifyPlayerGameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_config()) {
    mutable_common_config()->::GameProto::GameConfigCommon::MergeFrom(from.common_config());
  }
  if (from.dw_game_type() != 0) {
    set_dw_game_type(from.dw_game_type());
  }
}

void GameNotifyPlayerGameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameConfig::CopyFrom(const GameNotifyPlayerGameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameConfig::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameConfig::Swap(GameNotifyPlayerGameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameConfig::InternalSwap(GameNotifyPlayerGameConfig* other) {
  using std::swap;
  swap(common_config_, other->common_config_);
  swap(dw_game_type_, other->dw_game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameConfig::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameRoleData::InitAsDefaultInstance() {
  ::GameProto::_GameNotifyPlayerGameRoleData_default_instance_._instance.get_mutable()->common_role_data_ = const_cast< ::GameProto::GameCommonRoleData*>(
      ::GameProto::GameCommonRoleData::internal_default_instance());
}
void GameNotifyPlayerGameRoleData::clear_common_role_data() {
  if (GetArenaNoVirtual() == NULL && common_role_data_ != NULL) {
    delete common_role_data_;
  }
  common_role_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameRoleData::kDwGameTypeFieldNumber;
const int GameNotifyPlayerGameRoleData::kCommonRoleDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameRoleData::GameNotifyPlayerGameRoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameRoleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameRoleData)
}
GameNotifyPlayerGameRoleData::GameNotifyPlayerGameRoleData(const GameNotifyPlayerGameRoleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_role_data()) {
    common_role_data_ = new ::GameProto::GameCommonRoleData(*from.common_role_data_);
  } else {
    common_role_data_ = NULL;
  }
  dw_game_type_ = from.dw_game_type_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameRoleData)
}

void GameNotifyPlayerGameRoleData::SharedCtor() {
  ::memset(&common_role_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_game_type_) -
      reinterpret_cast<char*>(&common_role_data_)) + sizeof(dw_game_type_));
  _cached_size_ = 0;
}

GameNotifyPlayerGameRoleData::~GameNotifyPlayerGameRoleData() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameRoleData)
  SharedDtor();
}

void GameNotifyPlayerGameRoleData::SharedDtor() {
  if (this != internal_default_instance()) delete common_role_data_;
}

void GameNotifyPlayerGameRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameRoleData::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameRoleData& GameNotifyPlayerGameRoleData::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameRoleData();
  return *internal_default_instance();
}

GameNotifyPlayerGameRoleData* GameNotifyPlayerGameRoleData::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameRoleData* n = new GameNotifyPlayerGameRoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_role_data_ != NULL) {
    delete common_role_data_;
  }
  common_role_data_ = NULL;
  dw_game_type_ = 0u;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.GameCommonRoleData common_role_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_role_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameRoleData)
  return false;
#undef DO_
}

void GameNotifyPlayerGameRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_game_type(), output);
  }

  // .GameProto.GameCommonRoleData common_role_data = 2;
  if (this->has_common_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->common_role_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameRoleData)
}

::google::protobuf::uint8* GameNotifyPlayerGameRoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameRoleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_game_type(), target);
  }

  // .GameProto.GameCommonRoleData common_role_data = 2;
  if (this->has_common_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->common_role_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameRoleData)
  return target;
}

size_t GameNotifyPlayerGameRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameRoleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.GameCommonRoleData common_role_data = 2;
  if (this->has_common_role_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_role_data_);
  }

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameRoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameRoleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameRoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameRoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameRoleData)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameRoleData::MergeFrom(const GameNotifyPlayerGameRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_role_data()) {
    mutable_common_role_data()->::GameProto::GameCommonRoleData::MergeFrom(from.common_role_data());
  }
  if (from.dw_game_type() != 0) {
    set_dw_game_type(from.dw_game_type());
  }
}

void GameNotifyPlayerGameRoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameRoleData::CopyFrom(const GameNotifyPlayerGameRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameRoleData::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameRoleData::Swap(GameNotifyPlayerGameRoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameRoleData::InternalSwap(GameNotifyPlayerGameRoleData* other) {
  using std::swap;
  swap(common_role_data_, other->common_role_data_);
  swap(dw_game_type_, other->dw_game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameRoleData::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameSceneInfo::InitAsDefaultInstance() {
  ::GameProto::_GameNotifyPlayerGameSceneInfo_default_instance_._instance.get_mutable()->common_scene_info_ = const_cast< ::GameProto::GameCommonSceneInfo*>(
      ::GameProto::GameCommonSceneInfo::internal_default_instance());
}
void GameNotifyPlayerGameSceneInfo::clear_common_scene_info() {
  if (GetArenaNoVirtual() == NULL && common_scene_info_ != NULL) {
    delete common_scene_info_;
  }
  common_scene_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameSceneInfo::kDwGameTypeFieldNumber;
const int GameNotifyPlayerGameSceneInfo::kCommonSceneInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameSceneInfo::GameNotifyPlayerGameSceneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameSceneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameSceneInfo)
}
GameNotifyPlayerGameSceneInfo::GameNotifyPlayerGameSceneInfo(const GameNotifyPlayerGameSceneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_scene_info()) {
    common_scene_info_ = new ::GameProto::GameCommonSceneInfo(*from.common_scene_info_);
  } else {
    common_scene_info_ = NULL;
  }
  dw_game_type_ = from.dw_game_type_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameSceneInfo)
}

void GameNotifyPlayerGameSceneInfo::SharedCtor() {
  ::memset(&common_scene_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_game_type_) -
      reinterpret_cast<char*>(&common_scene_info_)) + sizeof(dw_game_type_));
  _cached_size_ = 0;
}

GameNotifyPlayerGameSceneInfo::~GameNotifyPlayerGameSceneInfo() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameSceneInfo)
  SharedDtor();
}

void GameNotifyPlayerGameSceneInfo::SharedDtor() {
  if (this != internal_default_instance()) delete common_scene_info_;
}

void GameNotifyPlayerGameSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameSceneInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameSceneInfo& GameNotifyPlayerGameSceneInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameSceneInfo();
  return *internal_default_instance();
}

GameNotifyPlayerGameSceneInfo* GameNotifyPlayerGameSceneInfo::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameSceneInfo* n = new GameNotifyPlayerGameSceneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_scene_info_ != NULL) {
    delete common_scene_info_;
  }
  common_scene_info_ = NULL;
  dw_game_type_ = 0u;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameSceneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_game_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.GameCommonSceneInfo common_scene_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_scene_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameSceneInfo)
  return false;
#undef DO_
}

void GameNotifyPlayerGameSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_game_type(), output);
  }

  // .GameProto.GameCommonSceneInfo common_scene_info = 2;
  if (this->has_common_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->common_scene_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameSceneInfo)
}

::google::protobuf::uint8* GameNotifyPlayerGameSceneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_game_type(), target);
  }

  // .GameProto.GameCommonSceneInfo common_scene_info = 2;
  if (this->has_common_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->common_scene_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameSceneInfo)
  return target;
}

size_t GameNotifyPlayerGameSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameSceneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.GameCommonSceneInfo common_scene_info = 2;
  if (this->has_common_scene_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->common_scene_info_);
  }

  // uint32 dw_game_type = 1;
  if (this->dw_game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameSceneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameSceneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameSceneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameSceneInfo)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameSceneInfo::MergeFrom(const GameNotifyPlayerGameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common_scene_info()) {
    mutable_common_scene_info()->::GameProto::GameCommonSceneInfo::MergeFrom(from.common_scene_info());
  }
  if (from.dw_game_type() != 0) {
    set_dw_game_type(from.dw_game_type());
  }
}

void GameNotifyPlayerGameSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameSceneInfo::CopyFrom(const GameNotifyPlayerGameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameSceneInfo::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameSceneInfo::Swap(GameNotifyPlayerGameSceneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameSceneInfo::InternalSwap(GameNotifyPlayerGameSceneInfo* other) {
  using std::swap;
  swap(common_scene_info_, other->common_scene_info_);
  swap(dw_game_type_, other->dw_game_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameSceneInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerPrepareTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerPrepareTime::kDwLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerPrepareTime::GameNotifyPlayerPrepareTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerPrepareTime();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerPrepareTime)
}
GameNotifyPlayerPrepareTime::GameNotifyPlayerPrepareTime(const GameNotifyPlayerPrepareTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_left_time_ = from.dw_left_time_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerPrepareTime)
}

void GameNotifyPlayerPrepareTime::SharedCtor() {
  dw_left_time_ = 0u;
  _cached_size_ = 0;
}

GameNotifyPlayerPrepareTime::~GameNotifyPlayerPrepareTime() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerPrepareTime)
  SharedDtor();
}

void GameNotifyPlayerPrepareTime::SharedDtor() {
}

void GameNotifyPlayerPrepareTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerPrepareTime::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerPrepareTime& GameNotifyPlayerPrepareTime::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerPrepareTime();
  return *internal_default_instance();
}

GameNotifyPlayerPrepareTime* GameNotifyPlayerPrepareTime::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerPrepareTime* n = new GameNotifyPlayerPrepareTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerPrepareTime::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerPrepareTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_left_time_ = 0u;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerPrepareTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerPrepareTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_left_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_left_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerPrepareTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerPrepareTime)
  return false;
#undef DO_
}

void GameNotifyPlayerPrepareTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerPrepareTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_left_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerPrepareTime)
}

::google::protobuf::uint8* GameNotifyPlayerPrepareTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerPrepareTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_left_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerPrepareTime)
  return target;
}

size_t GameNotifyPlayerPrepareTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerPrepareTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_left_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerPrepareTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerPrepareTime)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerPrepareTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerPrepareTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerPrepareTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerPrepareTime)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerPrepareTime::MergeFrom(const GameNotifyPlayerPrepareTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerPrepareTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_left_time() != 0) {
    set_dw_left_time(from.dw_left_time());
  }
}

void GameNotifyPlayerPrepareTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerPrepareTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerPrepareTime::CopyFrom(const GameNotifyPlayerPrepareTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerPrepareTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerPrepareTime::IsInitialized() const {
  return true;
}

void GameNotifyPlayerPrepareTime::Swap(GameNotifyPlayerPrepareTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerPrepareTime::InternalSwap(GameNotifyPlayerPrepareTime* other) {
  using std::swap;
  swap(dw_left_time_, other->dw_left_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerPrepareTime::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameReadyTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameReadyTime::kDwLeftTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameReadyTime::GameNotifyPlayerGameReadyTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameReadyTime();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameReadyTime)
}
GameNotifyPlayerGameReadyTime::GameNotifyPlayerGameReadyTime(const GameNotifyPlayerGameReadyTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dw_left_time_ = from.dw_left_time_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameReadyTime)
}

void GameNotifyPlayerGameReadyTime::SharedCtor() {
  dw_left_time_ = 0u;
  _cached_size_ = 0;
}

GameNotifyPlayerGameReadyTime::~GameNotifyPlayerGameReadyTime() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameReadyTime)
  SharedDtor();
}

void GameNotifyPlayerGameReadyTime::SharedDtor() {
}

void GameNotifyPlayerGameReadyTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameReadyTime::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameReadyTime& GameNotifyPlayerGameReadyTime::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameReadyTime();
  return *internal_default_instance();
}

GameNotifyPlayerGameReadyTime* GameNotifyPlayerGameReadyTime::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameReadyTime* n = new GameNotifyPlayerGameReadyTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameReadyTime::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameReadyTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dw_left_time_ = 0u;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameReadyTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameReadyTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_left_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_left_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameReadyTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameReadyTime)
  return false;
#undef DO_
}

void GameNotifyPlayerGameReadyTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameReadyTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_left_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameReadyTime)
}

::google::protobuf::uint8* GameNotifyPlayerGameReadyTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameReadyTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_left_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameReadyTime)
  return target;
}

size_t GameNotifyPlayerGameReadyTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameReadyTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dw_left_time = 1;
  if (this->dw_left_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_left_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameReadyTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameReadyTime)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameReadyTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameReadyTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameReadyTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameReadyTime)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameReadyTime::MergeFrom(const GameNotifyPlayerGameReadyTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameReadyTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dw_left_time() != 0) {
    set_dw_left_time(from.dw_left_time());
  }
}

void GameNotifyPlayerGameReadyTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameReadyTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameReadyTime::CopyFrom(const GameNotifyPlayerGameReadyTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameReadyTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameReadyTime::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameReadyTime::Swap(GameNotifyPlayerGameReadyTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameReadyTime::InternalSwap(GameNotifyPlayerGameReadyTime* other) {
  using std::swap;
  swap(dw_left_time_, other->dw_left_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameReadyTime::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameState::GameNotifyPlayerGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameState)
}
GameNotifyPlayerGameState::GameNotifyPlayerGameState(const GameNotifyPlayerGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameState)
}

void GameNotifyPlayerGameState::SharedCtor() {
  state_ = 0;
  _cached_size_ = 0;
}

GameNotifyPlayerGameState::~GameNotifyPlayerGameState() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameState)
  SharedDtor();
}

void GameNotifyPlayerGameState::SharedDtor() {
}

void GameNotifyPlayerGameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameState::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameState& GameNotifyPlayerGameState::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameState();
  return *internal_default_instance();
}

GameNotifyPlayerGameState* GameNotifyPlayerGameState::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameState* n = new GameNotifyPlayerGameState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameProto.EGameSceneState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::GameProto::EGameSceneState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameState)
  return false;
#undef DO_
}

void GameNotifyPlayerGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameState)
}

::google::protobuf::uint8* GameNotifyPlayerGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameState)
  return target;
}

size_t GameNotifyPlayerGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.EGameSceneState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameState)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameState::MergeFrom(const GameNotifyPlayerGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameNotifyPlayerGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameState::CopyFrom(const GameNotifyPlayerGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameState::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameState::Swap(GameNotifyPlayerGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameState::InternalSwap(GameNotifyPlayerGameState* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameState::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerGameInitTetris::InitAsDefaultInstance() {
  ::GameProto::_GameNotifyPlayerGameInitTetris_default_instance_._instance.get_mutable()->curr_tetris_ = const_cast< ::GameProto::Tetris*>(
      ::GameProto::Tetris::internal_default_instance());
  ::GameProto::_GameNotifyPlayerGameInitTetris_default_instance_._instance.get_mutable()->next_tetris_ = const_cast< ::GameProto::Tetris*>(
      ::GameProto::Tetris::internal_default_instance());
}
void GameNotifyPlayerGameInitTetris::clear_curr_tetris() {
  if (GetArenaNoVirtual() == NULL && curr_tetris_ != NULL) {
    delete curr_tetris_;
  }
  curr_tetris_ = NULL;
}
void GameNotifyPlayerGameInitTetris::clear_next_tetris() {
  if (GetArenaNoVirtual() == NULL && next_tetris_ != NULL) {
    delete next_tetris_;
  }
  next_tetris_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerGameInitTetris::kDwPlayerIdFieldNumber;
const int GameNotifyPlayerGameInitTetris::kFTickFieldNumber;
const int GameNotifyPlayerGameInitTetris::kCurrTetrisFieldNumber;
const int GameNotifyPlayerGameInitTetris::kNextTetrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerGameInitTetris::GameNotifyPlayerGameInitTetris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameInitTetris();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerGameInitTetris)
}
GameNotifyPlayerGameInitTetris::GameNotifyPlayerGameInitTetris(const GameNotifyPlayerGameInitTetris& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curr_tetris()) {
    curr_tetris_ = new ::GameProto::Tetris(*from.curr_tetris_);
  } else {
    curr_tetris_ = NULL;
  }
  if (from.has_next_tetris()) {
    next_tetris_ = new ::GameProto::Tetris(*from.next_tetris_);
  } else {
    next_tetris_ = NULL;
  }
  ::memcpy(&dw_player_id_, &from.dw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_tick_) -
    reinterpret_cast<char*>(&dw_player_id_)) + sizeof(f_tick_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerGameInitTetris)
}

void GameNotifyPlayerGameInitTetris::SharedCtor() {
  ::memset(&curr_tetris_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_tick_) -
      reinterpret_cast<char*>(&curr_tetris_)) + sizeof(f_tick_));
  _cached_size_ = 0;
}

GameNotifyPlayerGameInitTetris::~GameNotifyPlayerGameInitTetris() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerGameInitTetris)
  SharedDtor();
}

void GameNotifyPlayerGameInitTetris::SharedDtor() {
  if (this != internal_default_instance()) delete curr_tetris_;
  if (this != internal_default_instance()) delete next_tetris_;
}

void GameNotifyPlayerGameInitTetris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerGameInitTetris::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerGameInitTetris& GameNotifyPlayerGameInitTetris::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerGameInitTetris();
  return *internal_default_instance();
}

GameNotifyPlayerGameInitTetris* GameNotifyPlayerGameInitTetris::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerGameInitTetris* n = new GameNotifyPlayerGameInitTetris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerGameInitTetris::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerGameInitTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && curr_tetris_ != NULL) {
    delete curr_tetris_;
  }
  curr_tetris_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_tetris_ != NULL) {
    delete next_tetris_;
  }
  next_tetris_ = NULL;
  ::memset(&dw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_tick_) -
      reinterpret_cast<char*>(&dw_player_id_)) + sizeof(f_tick_));
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerGameInitTetris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerGameInitTetris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_tick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.Tetris curr_tetris = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curr_tetris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.Tetris next_tetris = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_tetris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerGameInitTetris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerGameInitTetris)
  return false;
#undef DO_
}

void GameNotifyPlayerGameInitTetris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerGameInitTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dw_player_id(), output);
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f_tick(), output);
  }

  // .GameProto.Tetris curr_tetris = 3;
  if (this->has_curr_tetris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->curr_tetris_, output);
  }

  // .GameProto.Tetris next_tetris = 4;
  if (this->has_next_tetris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->next_tetris_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerGameInitTetris)
}

::google::protobuf::uint8* GameNotifyPlayerGameInitTetris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerGameInitTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dw_player_id(), target);
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f_tick(), target);
  }

  // .GameProto.Tetris curr_tetris = 3;
  if (this->has_curr_tetris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->curr_tetris_, deterministic, target);
  }

  // .GameProto.Tetris next_tetris = 4;
  if (this->has_next_tetris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->next_tetris_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerGameInitTetris)
  return target;
}

size_t GameNotifyPlayerGameInitTetris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerGameInitTetris)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.Tetris curr_tetris = 3;
  if (this->has_curr_tetris()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->curr_tetris_);
  }

  // .GameProto.Tetris next_tetris = 4;
  if (this->has_next_tetris()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->next_tetris_);
  }

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dw_player_id());
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerGameInitTetris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerGameInitTetris)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerGameInitTetris* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerGameInitTetris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerGameInitTetris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerGameInitTetris)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerGameInitTetris::MergeFrom(const GameNotifyPlayerGameInitTetris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerGameInitTetris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_curr_tetris()) {
    mutable_curr_tetris()->::GameProto::Tetris::MergeFrom(from.curr_tetris());
  }
  if (from.has_next_tetris()) {
    mutable_next_tetris()->::GameProto::Tetris::MergeFrom(from.next_tetris());
  }
  if (from.dw_player_id() != 0) {
    set_dw_player_id(from.dw_player_id());
  }
  if (from.f_tick() != 0) {
    set_f_tick(from.f_tick());
  }
}

void GameNotifyPlayerGameInitTetris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerGameInitTetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerGameInitTetris::CopyFrom(const GameNotifyPlayerGameInitTetris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerGameInitTetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerGameInitTetris::IsInitialized() const {
  return true;
}

void GameNotifyPlayerGameInitTetris::Swap(GameNotifyPlayerGameInitTetris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerGameInitTetris::InternalSwap(GameNotifyPlayerGameInitTetris* other) {
  using std::swap;
  swap(curr_tetris_, other->curr_tetris_);
  swap(next_tetris_, other->next_tetris_);
  swap(dw_player_id_, other->dw_player_id_);
  swap(f_tick_, other->f_tick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerGameInitTetris::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameNotifyPlayerNextTetris::InitAsDefaultInstance() {
  ::GameProto::_GameNotifyPlayerNextTetris_default_instance_._instance.get_mutable()->next_tetris_ = const_cast< ::GameProto::Tetris*>(
      ::GameProto::Tetris::internal_default_instance());
}
void GameNotifyPlayerNextTetris::clear_next_tetris() {
  if (GetArenaNoVirtual() == NULL && next_tetris_ != NULL) {
    delete next_tetris_;
  }
  next_tetris_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotifyPlayerNextTetris::kDwPlayerIdFieldNumber;
const int GameNotifyPlayerNextTetris::kFTickFieldNumber;
const int GameNotifyPlayerNextTetris::kNextTetrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotifyPlayerNextTetris::GameNotifyPlayerNextTetris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerNextTetris();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.GameNotifyPlayerNextTetris)
}
GameNotifyPlayerNextTetris::GameNotifyPlayerNextTetris(const GameNotifyPlayerNextTetris& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_next_tetris()) {
    next_tetris_ = new ::GameProto::Tetris(*from.next_tetris_);
  } else {
    next_tetris_ = NULL;
  }
  ::memcpy(&dw_player_id_, &from.dw_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_tick_) -
    reinterpret_cast<char*>(&dw_player_id_)) + sizeof(f_tick_));
  // @@protoc_insertion_point(copy_constructor:GameProto.GameNotifyPlayerNextTetris)
}

void GameNotifyPlayerNextTetris::SharedCtor() {
  ::memset(&next_tetris_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_tick_) -
      reinterpret_cast<char*>(&next_tetris_)) + sizeof(f_tick_));
  _cached_size_ = 0;
}

GameNotifyPlayerNextTetris::~GameNotifyPlayerNextTetris() {
  // @@protoc_insertion_point(destructor:GameProto.GameNotifyPlayerNextTetris)
  SharedDtor();
}

void GameNotifyPlayerNextTetris::SharedDtor() {
  if (this != internal_default_instance()) delete next_tetris_;
}

void GameNotifyPlayerNextTetris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotifyPlayerNextTetris::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotifyPlayerNextTetris& GameNotifyPlayerNextTetris::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsGameNotifyPlayerNextTetris();
  return *internal_default_instance();
}

GameNotifyPlayerNextTetris* GameNotifyPlayerNextTetris::New(::google::protobuf::Arena* arena) const {
  GameNotifyPlayerNextTetris* n = new GameNotifyPlayerNextTetris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotifyPlayerNextTetris::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.GameNotifyPlayerNextTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && next_tetris_ != NULL) {
    delete next_tetris_;
  }
  next_tetris_ = NULL;
  ::memset(&dw_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_tick_) -
      reinterpret_cast<char*>(&dw_player_id_)) + sizeof(f_tick_));
  _internal_metadata_.Clear();
}

bool GameNotifyPlayerNextTetris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.GameNotifyPlayerNextTetris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dw_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dw_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_tick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameProto.Tetris next_tetris = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_tetris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.GameNotifyPlayerNextTetris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.GameNotifyPlayerNextTetris)
  return false;
#undef DO_
}

void GameNotifyPlayerNextTetris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.GameNotifyPlayerNextTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dw_player_id(), output);
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f_tick(), output);
  }

  // .GameProto.Tetris next_tetris = 3;
  if (this->has_next_tetris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->next_tetris_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.GameNotifyPlayerNextTetris)
}

::google::protobuf::uint8* GameNotifyPlayerNextTetris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.GameNotifyPlayerNextTetris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dw_player_id(), target);
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f_tick(), target);
  }

  // .GameProto.Tetris next_tetris = 3;
  if (this->has_next_tetris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->next_tetris_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.GameNotifyPlayerNextTetris)
  return target;
}

size_t GameNotifyPlayerNextTetris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.GameNotifyPlayerNextTetris)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameProto.Tetris next_tetris = 3;
  if (this->has_next_tetris()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->next_tetris_);
  }

  // uint64 dw_player_id = 1;
  if (this->dw_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dw_player_id());
  }

  // float f_tick = 2;
  if (this->f_tick() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotifyPlayerNextTetris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.GameNotifyPlayerNextTetris)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotifyPlayerNextTetris* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotifyPlayerNextTetris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.GameNotifyPlayerNextTetris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.GameNotifyPlayerNextTetris)
    MergeFrom(*source);
  }
}

void GameNotifyPlayerNextTetris::MergeFrom(const GameNotifyPlayerNextTetris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.GameNotifyPlayerNextTetris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_next_tetris()) {
    mutable_next_tetris()->::GameProto::Tetris::MergeFrom(from.next_tetris());
  }
  if (from.dw_player_id() != 0) {
    set_dw_player_id(from.dw_player_id());
  }
  if (from.f_tick() != 0) {
    set_f_tick(from.f_tick());
  }
}

void GameNotifyPlayerNextTetris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.GameNotifyPlayerNextTetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotifyPlayerNextTetris::CopyFrom(const GameNotifyPlayerNextTetris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.GameNotifyPlayerNextTetris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotifyPlayerNextTetris::IsInitialized() const {
  return true;
}

void GameNotifyPlayerNextTetris::Swap(GameNotifyPlayerNextTetris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotifyPlayerNextTetris::InternalSwap(GameNotifyPlayerNextTetris* other) {
  using std::swap;
  swap(next_tetris_, other->next_tetris_);
  swap(dw_player_id_, other->dw_player_id_);
  swap(f_tick_, other->f_tick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotifyPlayerNextTetris::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kDwServerIdFieldNumber;
const int ServerInfo::kSzListenIpFieldNumber;
const int ServerInfo::kDwTeamPortFieldNumber;
const int ServerInfo::kDwGameServerManagerPortFieldNumber;
const int ServerInfo::kDwLoginPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sz_listen_ip().size() > 0) {
    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  ::memcpy(&dw_server_id_, &from.dw_server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dw_login_port_) -
    reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  // @@protoc_insertion_point(copy_constructor:GameProto.ServerInfo)
}

void ServerInfo::SharedCtor() {
  sz_listen_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_login_port_) -
      reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  _cached_size_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  sz_listen_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  ::protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfo& ServerInfo::default_instance() {
  ::protobuf_web_5fgame_2eproto::InitDefaultsServerInfo();
  return *internal_default_instance();
}

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sz_listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dw_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dw_login_port_) -
      reinterpret_cast<char*>(&dw_server_id_)) + sizeof(dw_login_port_));
  _internal_metadata_.Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dw_server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sz_listen_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_listen_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.ServerInfo.sz_listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_team_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_team_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_game_server_manager_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_game_server_manager_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dw_login_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_login_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dw_server_id(), output);
  }

  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerInfo.sz_listen_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sz_listen_ip(), output);
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dw_team_port(), output);
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dw_game_server_manager_port(), output);
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw_login_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dw_server_id(), target);
  }

  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sz_listen_ip().data(), static_cast<int>(this->sz_listen_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerInfo.sz_listen_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sz_listen_ip(), target);
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dw_team_port(), target);
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dw_game_server_manager_port(), target);
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw_login_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.ServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sz_listen_ip = 2;
  if (this->sz_listen_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sz_listen_ip());
  }

  // uint32 dw_server_id = 1;
  if (this->dw_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_server_id());
  }

  // uint32 dw_team_port = 3;
  if (this->dw_team_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_team_port());
  }

  // uint32 dw_game_server_manager_port = 4;
  if (this->dw_game_server_manager_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_game_server_manager_port());
  }

  // uint32 dw_login_port = 5;
  if (this->dw_login_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dw_login_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sz_listen_ip().size() > 0) {

    sz_listen_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_listen_ip_);
  }
  if (from.dw_server_id() != 0) {
    set_dw_server_id(from.dw_server_id());
  }
  if (from.dw_team_port() != 0) {
    set_dw_team_port(from.dw_team_port());
  }
  if (from.dw_game_server_manager_port() != 0) {
    set_dw_game_server_manager_port(from.dw_game_server_manager_port());
  }
  if (from.dw_login_port() != 0) {
    set_dw_login_port(from.dw_login_port());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  sz_listen_ip_.Swap(&other->sz_listen_ip_);
  swap(dw_server_id_, other->dw_server_id_);
  swap(dw_team_port_, other->dw_team_port_);
  swap(dw_game_server_manager_port_, other->dw_game_server_manager_port_);
  swap(dw_login_port_, other->dw_login_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_web_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_web_5fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProto

// @@protoc_insertion_point(global_scope)
