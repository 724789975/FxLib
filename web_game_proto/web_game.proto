syntax = "proto3";
//只能用这种命名方式 不能用小写 下划线
package GameProto;

import "web_data.proto";

//服务器类型
enum EServerType
{
	ST_NONE = 0;
	ST_Login = 1;
	ST_Team = 2;
	ST_GameManager = 3;
}

//组队的类型
enum ETeamType
{
	TT_NONE = 0;
	TT_Normal = 1;
}

//错误码
enum EErrorCode
{
	EC_NONE = 0;
	EC_AlreadyInTeam = 1;		//已经在队伍中了
	EC_MakeTeamNotIdle = 2;		//创建队伍时 角色状态不是idle
	EC_CannotFindPlayer = 3;	//查无此人
	EC_NoGameManagerServer = 7;	//没有游戏管理服务器
	EC_NoTeamServer = 8;		//没有组队服务器
	EC_NoLoginServer = 9;		//没有登录服务器
	EC_PlayerNotOnline = 10;	//玩家不在线
	EC_FailIntoTeam = 11;		//加入队伍失败
	EC_NoTeamId = 20;			//没有这个队伍
	EC_NotLeader = 21;			//没有队长
	EC_TeamHasStart = 22;		//队伍已经申请开始游戏
	EC_TeamSlotHasPlayer = 23;	//此坑有人
}

//移动方向
enum EMoveDirection
{
	EMD_NONE = 0;
	EMD_Down = 1;
	EMD_Left = 2;
	EMD_Right = 3;
}

//旋转方向
enum ERotationDirection
{
	ERD_NONE = 0;
	ERD_Left = 1;
	ERD_Right = 2;
}

//player->login
message PlayerRequestLoginServerId
{
}

message PlayerRequestLogin
{
	uint64 qw_player_id = 1;
	string sz_nick_name = 2;
	string sz_avatar = 3;
	uint32 dw_sex = 4;
	uint32 dw_balance = 5;
	string sz_token = 6;
}

message PlayerRequestLoginMakeTeam
{
}

message PlayerRequestLoginInviteTeam
{
	uint64 qw_player_id = 1;
	uint32 dw_slot_id = 2;
}

message PlayerRequestLoginChangeSlot
{
	uint32 dw_slot_id = 1;
}

message PlayerRequestLoginGameStart
{
}

message PlayerRequestLoginOnLinePlayer
{
}

message PlayerRequestLoginEnterTeam
{
	uint32 dw_team_server_id = 1;
	uint64 qw_team_id = 2;
}

message PlayerRequestLoginRefuseEnterTeam
{
	uint64 qw_player_id = 1;
	string sz_Reason = 2;
}

message PlayerRequestLoginLeaveTeam
{
}

//login->player
message LoginAckPlayerServerId
{
	uint32 dw_result = 1;
	uint32 dw_server_id = 2;		//通知客户端 服务器的id
}

message LoginAckPlayerLoginResult
{
	uint32 dw_result = 1;
}

message LoginNotifyPlayerGameKick
{
	uint32 dw_result = 1;
}

message LoginAckPlayerMakeTeam
{
	uint32 dw_result = 1;
	uint64 qw_team_id = 2;
	uint32 dw_slot_id = 3;
}

message LoginNotifyPlayerTeamInfo
{
	repeated TeamRoleData team_role_data = 1;
	uint64 qw_team_id = 2;
}

message LoginAckPlayerInviteTeam
{
	uint32 dw_result = 1;
}

message LoginNotifyPlayerInviteTeam
{
	uint64 qw_player_id = 1;	//谁邀请的
	uint64 qw_team_id = 2;		//邀请的队伍id
	uint32 dw_team_server_id = 3;
}

message LoginAckPlayerChangeSlot
{
	uint32 dw_result = 1;
}

message LoginNotifyPlayerTeamKick	//队伍踢人
{
}

message LoginAckPlayerGameStart
{
	uint32 dw_result = 1;
	uint32 dw_player_port = 2;
	uint32 dw_server_port = 3;
	uint32 dw_slave_server_port = 4;
	string sz_listen_ip = 5;
	uint64 qw_team_id = 6;
}

message LoginAckPlayerOnLinePlayer
{
	uint32 dw_result = 1;
	repeated uint64 qw_player_id = 2;
}

message LoginAckPlayerEnterTeam
{
	uint32 dw_result = 1;
}

message LoginNotifyPlayerRefuseEnterTeam
{
	uint64 qw_player_id = 1;
	string sz_Reason = 2;
}

message LoginAckPlayerLeaveTeam
{
	uint32 dw_result = 1;
}

//login->login
message LoginNotifyLoginPlayerKick
{
	uint64 qw_player_id = 1;
}

message LoginRequestLoginInviteTeam
{
	uint64 qw_invite_id = 1;	//谁邀请的
	uint64 qw_invitee_id = 2;	//被邀请的
	uint64 qw_team_id = 3;		//邀请的队伍id
	uint32 dw_team_server_id = 4;
}

message LoginAckLoginInviteTeam
{
	uint32 dw_result = 1;
	uint64 qw_invite_id = 2;	//谁邀请的
	uint64 qw_invitee_id = 3;	//被邀请的
}

message LoginNotifyLoginPlayerRefuseEnterTeam
{
	uint64 qw_invite_id = 1;	//谁邀请的
	uint64 qw_invitee_id = 2;	//被邀请的
	string sz_Reason = 3;
}

//login->team
message LoginRequestTeamMakeTeam
{
	RoleData role_data = 1;
	uint64 qw_team_id = 2;
}

message LoginRequestTeamInviteTeam
{
	uint32 dw_result = 1;
	uint32 dw_slot_id = 2;
}

message LoginRequestTeamChangeSlot
{
	uint32 dw_slot_id = 1;
	uint64 qw_player_id = 2;
	uint64 qw_team_id = 3;
}

message LoginRequestTeamKickPlayer
{
	uint64 qw_player_id = 1;
	uint64 qw_team_id = 2;
}

message LoginRequestTeamGameStart
{
	uint64 qw_team_id = 1;
	uint64 qw_player_id = 2;
}

message LoginRequestTeamEnterTeam
{
	uint64 qw_team_id = 1;
	RoleData role_data = 2;
}

message LoginRequestTeamPlayerLeave
{
	uint64 qw_player_id = 1;
	uint64 qw_team_id = 2;
}

//team->login
message TeamAckLoginMakeTeam
{
	uint32 dw_result = 1;
	uint64 qw_player_id = 2;
	uint64 qw_team_id = 3;
	uint32 dw_slot_id = 4;
}

message TeamNotifyLoginTeamInfo
{
	repeated TeamRoleData team_role_data = 1;
	uint64 qw_team_id = 2;
	uint64 qw_player_id = 3;
}

message TeamAckLoginInviteTeam
{
	uint32 dw_result = 1;
	uint32 dw_slot = 2;
}

message TeamAckLoginChangeSlot
{
	uint32 dw_result = 1;
	uint32 dw_slot = 2;
	uint64 qw_player_id = 3;
}

message TeamAckLoginKickPlayer
{
	uint32 dw_result = 1;
	uint64 qw_player_id = 2;
}

message TeamAckLoginGameStart
{
	uint32 dw_result = 1;
	uint32 dw_player_port = 2;
	uint32 dw_server_port = 3;
	uint32 dw_slave_server_port = 4;
	string sz_listen_ip = 5;
	uint64 qw_player_id = 6;
	uint64 qw_team_id = 7;
}

message TeamAckLoginEnterTeam
{
	uint32 dw_result = 1;
	uint64 qw_player_id = 2;
	uint64 qw_team_id = 3;
}

message TeamAckLoginPlayerLeave
{
	uint32 dw_result = 1;
	uint64 qw_player_id = 2;
}

//team->gamemanager
message TeamRequestGameManagerGameStart
{
	uint64 qw_team_id = 1;
	repeated uint64 qw_player_ids = 2;
}

//gamemanager->team
message GameManagerAckTeamGameStart
{
	uint32 dw_result = 1;
	uint32 dw_player_port = 2;
	uint32 dw_server_port = 3;
	uint32 dw_slave_server_port = 4;
	uint64 qw_team_id = 5;
	string sz_listen_ip = 6;
}

//game->gamemanager
message GameNotifyGameManagerInfo
{
	uint32 dw_player_port = 1;
	uint32 dw_server_port = 2;
	uint32 dw_slave_server_port = 3;
	uint64 qw_team_id = 4;
	uint32 dw_team_server_id = 5;
}

//gamemanager->game
message GameManagerAckGameInfoResult
{
	uint32 dw_result = 1;
}

//player->gamemanager
message PlayerRequestGameManagerInfo
{
	uint32 dw_result = 1;
}

//gamemanager->player
message GameManagerAckPlayerInfoResult
{
	uint32 dw_player_port = 1;
	uint32 dw_server_port = 2;
	uint32 dw_slave_server_port = 3;
}

//player->game
message PlayerRequestGameTest
{
	string sz_test = 1;
}

message PlayerRequestGameEnter
{
	uint64 qw_player_id = 1;
}

message PlayerRequestMove
{
	float f_tick = 1;
	EMoveDirection e_direction = 2;
}

message PlayerRequestRotation
{
	float f_tick = 1;
	ERotationDirection e_direction = 2;
}

//game->player
message GameAckPlayerEnter
{
	uint32 dw_result = 1;
	uint32 dw_game_type = 2;
}

message GameNotifyPlayerGameConfig
{
	uint32 dw_game_type = 1;
	GameConfigCommon common_config = 2;
}

message GameNotifyPlayerGameRoleData
{
	uint32 dw_game_type = 1;
	GameCommonRoleData common_role_data = 2;
}

message GameNotifyPlayerGameSceneInfo
{
	uint32 dw_game_type = 1;
	EGameSceneState state = 2;
	repeated RoleData players = 3;
	GameCommonSceneInfo common_scene_info = 10;
}

message GameNotifyPlayerPrepareTime
{
	uint32 dw_left_time = 1;
}

message GameNotifyPlayerGameReadyTime
{
	uint32 dw_left_time = 1;
}

message GameNotifyPlayerGameState
{
	EGameSceneState state = 1;
}

message GameNotifyPlayerGameInitTetris
{
	uint64 dw_player_id = 1;
	float f_tick = 2;
	Tetris curr_tetris = 3;
	Tetris next_tetris = 4;
}

message GameNotifyPlayerGameTetrisData
{
	uint64 dw_player_id = 1;
	float f_tick = 2;
	repeated uint32 dw_data = 3;
	Tetris curr_tetris = 4;
	Tetris next_tetris = 5;
}

message GameNotifyPlayerNextTetris
{
	uint64 dw_player_id = 1;
	float f_tick = 2;
	Tetris next_tetris = 3;
}

message GameNotifyPlayerDead
{
	uint64 dw_player_id = 1;
}

message GameNotifyPlayeMove
{
	uint64 dw_player_id = 1;
	float f_tick = 2;
	EMoveDirection e_direction = 3;
}

message GameNotifyPlayeRotation
{
	uint64 dw_player_id = 1;
	float f_tick = 2;
	ERotationDirection e_direction = 3;
}

//serverinfo(server->server_center, server_center->server)
message ServerInfo
{
	uint32 dw_server_id = 1;
	string sz_listen_ip = 2;
	uint32 dw_team_port = 3;
	uint32 dw_game_server_manager_port = 4;
	uint32 dw_login_port = 5;
}

