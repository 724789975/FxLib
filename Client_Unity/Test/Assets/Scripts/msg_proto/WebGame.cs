// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: web_game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from web_game.proto</summary>
  public static partial class WebGameReflection {

    #region Descriptor
    /// <summary>File descriptor for web_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg53ZWJfZ2FtZS5wcm90bxIJR2FtZVByb3RvIokBChJQbGF5ZXJSZXF1ZXN0",
            "TG9naW4SFAoMcXdfcGxheWVyX2lkGAEgASgEEhQKDHN6X25pY2tfbmFtZRgC",
            "IAEoCRIRCglzel9hdmF0YXIYAyABKAkSDgoGZHdfc2V4GAQgASgNEhIKCmR3",
            "X2JhbGFuY2UYBSABKA0SEAoIc3pfdG9rZW4YBiABKAkiLgoZTG9naW5BY2tQ",
            "bGF5ZXJMb2dpblJlc3VsdBIRCglkd19yZXN1bHQYASABKA0iggEKGUdhbWVO",
            "b3RpZnlHYW1lTWFuYWdlckluZm8SFgoOZHdfcGxheWVyX3BvcnQYASABKA0S",
            "FgoOZHdfc2VydmVyX3BvcnQYAiABKA0SHAoUZHdfc2xhdmVfc2VydmVyX3Bv",
            "cnQYAyABKA0SFwoPcXdfcGxheWVyX3BvaW50GAQgASgEIjEKHEdhbWVNYW5h",
            "Z2VyQWNrR2FtZUluZm9SZXN1bHQSEQoJZHdfcmVzdWx0GAEgASgNIjEKHFBs",
            "YXllclJlcXVlc3RHYW1lTWFuYWdlckluZm8SEQoJZHdfcmVzdWx0GAEgASgN",
            "Im4KHkdhbWVNYW5hZ2VyQWNrUGxheWVySW5mb1Jlc3VsdBIWCg5kd19wbGF5",
            "ZXJfcG9ydBgBIAEoDRIWCg5kd19zZXJ2ZXJfcG9ydBgCIAEoDRIcChRkd19z",
            "bGF2ZV9zZXJ2ZXJfcG9ydBgDIAEoDSIoChVQbGF5ZXJSZXF1ZXN0R2FtZVRl",
            "c3QSDwoHc3pfdGVzdBgBIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLogin), global::GameProto.PlayerRequestLogin.Parser, new[]{ "QwPlayerId", "SzNickName", "SzAvatar", "DwSex", "DwBalance", "SzToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerLoginResult), global::GameProto.LoginAckPlayerLoginResult.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameNotifyGameManagerInfo), global::GameProto.GameNotifyGameManagerInfo.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "QwPlayerPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckGameInfoResult), global::GameProto.GameManagerAckGameInfoResult.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameManagerInfo), global::GameProto.PlayerRequestGameManagerInfo.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckPlayerInfoResult), global::GameProto.GameManagerAckPlayerInfoResult.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameTest), global::GameProto.PlayerRequestGameTest.Parser, new[]{ "SzTest" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///player->login
  /// </summary>
  public sealed partial class PlayerRequestLogin : pb::IMessage<PlayerRequestLogin> {
    private static readonly pb::MessageParser<PlayerRequestLogin> _parser = new pb::MessageParser<PlayerRequestLogin>(() => new PlayerRequestLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin(PlayerRequestLogin other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      szNickName_ = other.szNickName_;
      szAvatar_ = other.szAvatar_;
      dwSex_ = other.dwSex_;
      dwBalance_ = other.dwBalance_;
      szToken_ = other.szToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin Clone() {
      return new PlayerRequestLogin(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "sz_nick_name" field.</summary>
    public const int SzNickNameFieldNumber = 2;
    private string szNickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzNickName {
      get { return szNickName_; }
      set {
        szNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sz_avatar" field.</summary>
    public const int SzAvatarFieldNumber = 3;
    private string szAvatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAvatar {
      get { return szAvatar_; }
      set {
        szAvatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dw_sex" field.</summary>
    public const int DwSexFieldNumber = 4;
    private uint dwSex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSex {
      get { return dwSex_; }
      set {
        dwSex_ = value;
      }
    }

    /// <summary>Field number for the "dw_balance" field.</summary>
    public const int DwBalanceFieldNumber = 5;
    private uint dwBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwBalance {
      get { return dwBalance_; }
      set {
        dwBalance_ = value;
      }
    }

    /// <summary>Field number for the "sz_token" field.</summary>
    public const int SzTokenFieldNumber = 6;
    private string szToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzToken {
      get { return szToken_; }
      set {
        szToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (SzNickName != other.SzNickName) return false;
      if (SzAvatar != other.SzAvatar) return false;
      if (DwSex != other.DwSex) return false;
      if (DwBalance != other.DwBalance) return false;
      if (SzToken != other.SzToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (SzNickName.Length != 0) hash ^= SzNickName.GetHashCode();
      if (SzAvatar.Length != 0) hash ^= SzAvatar.GetHashCode();
      if (DwSex != 0) hash ^= DwSex.GetHashCode();
      if (DwBalance != 0) hash ^= DwBalance.GetHashCode();
      if (SzToken.Length != 0) hash ^= SzToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (SzNickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzNickName);
      }
      if (SzAvatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzAvatar);
      }
      if (DwSex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSex);
      }
      if (DwBalance != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DwBalance);
      }
      if (SzToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SzToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (SzNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzNickName);
      }
      if (SzAvatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAvatar);
      }
      if (DwSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSex);
      }
      if (DwBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwBalance);
      }
      if (SzToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLogin other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.SzNickName.Length != 0) {
        SzNickName = other.SzNickName;
      }
      if (other.SzAvatar.Length != 0) {
        SzAvatar = other.SzAvatar;
      }
      if (other.DwSex != 0) {
        DwSex = other.DwSex;
      }
      if (other.DwBalance != 0) {
        DwBalance = other.DwBalance;
      }
      if (other.SzToken.Length != 0) {
        SzToken = other.SzToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            SzNickName = input.ReadString();
            break;
          }
          case 26: {
            SzAvatar = input.ReadString();
            break;
          }
          case 32: {
            DwSex = input.ReadUInt32();
            break;
          }
          case 40: {
            DwBalance = input.ReadUInt32();
            break;
          }
          case 50: {
            SzToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///login->player
  /// </summary>
  public sealed partial class LoginAckPlayerLoginResult : pb::IMessage<LoginAckPlayerLoginResult> {
    private static readonly pb::MessageParser<LoginAckPlayerLoginResult> _parser = new pb::MessageParser<LoginAckPlayerLoginResult>(() => new LoginAckPlayerLoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerLoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult(LoginAckPlayerLoginResult other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult Clone() {
      return new LoginAckPlayerLoginResult(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerLoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerLoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerLoginResult other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///game->gamemanager
  /// </summary>
  public sealed partial class GameNotifyGameManagerInfo : pb::IMessage<GameNotifyGameManagerInfo> {
    private static readonly pb::MessageParser<GameNotifyGameManagerInfo> _parser = new pb::MessageParser<GameNotifyGameManagerInfo>(() => new GameNotifyGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNotifyGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo(GameNotifyGameManagerInfo other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      qwPlayerPoint_ = other.qwPlayerPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo Clone() {
      return new GameNotifyGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_point" field.</summary>
    public const int QwPlayerPointFieldNumber = 4;
    private ulong qwPlayerPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerPoint {
      get { return qwPlayerPoint_; }
      set {
        qwPlayerPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNotifyGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNotifyGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (QwPlayerPoint != other.QwPlayerPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (QwPlayerPoint != 0UL) hash ^= QwPlayerPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (QwPlayerPoint != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(QwPlayerPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (QwPlayerPoint != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNotifyGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.QwPlayerPoint != 0UL) {
        QwPlayerPoint = other.QwPlayerPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            QwPlayerPoint = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->game
  /// </summary>
  public sealed partial class GameManagerAckGameInfoResult : pb::IMessage<GameManagerAckGameInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckGameInfoResult> _parser = new pb::MessageParser<GameManagerAckGameInfoResult>(() => new GameManagerAckGameInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckGameInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult(GameManagerAckGameInfoResult other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult Clone() {
      return new GameManagerAckGameInfoResult(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckGameInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckGameInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckGameInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->gamemanager
  /// </summary>
  public sealed partial class PlayerRequestGameManagerInfo : pb::IMessage<PlayerRequestGameManagerInfo> {
    private static readonly pb::MessageParser<PlayerRequestGameManagerInfo> _parser = new pb::MessageParser<PlayerRequestGameManagerInfo>(() => new PlayerRequestGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo(PlayerRequestGameManagerInfo other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo Clone() {
      return new PlayerRequestGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->player
  /// </summary>
  public sealed partial class GameManagerAckPlayerInfoResult : pb::IMessage<GameManagerAckPlayerInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckPlayerInfoResult> _parser = new pb::MessageParser<GameManagerAckPlayerInfoResult>(() => new GameManagerAckPlayerInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckPlayerInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult(GameManagerAckPlayerInfoResult other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult Clone() {
      return new GameManagerAckPlayerInfoResult(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckPlayerInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckPlayerInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckPlayerInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->game
  /// </summary>
  public sealed partial class PlayerRequestGameTest : pb::IMessage<PlayerRequestGameTest> {
    private static readonly pb::MessageParser<PlayerRequestGameTest> _parser = new pb::MessageParser<PlayerRequestGameTest>(() => new PlayerRequestGameTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest(PlayerRequestGameTest other) : this() {
      szTest_ = other.szTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest Clone() {
      return new PlayerRequestGameTest(this);
    }

    /// <summary>Field number for the "sz_test" field.</summary>
    public const int SzTestFieldNumber = 1;
    private string szTest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzTest {
      get { return szTest_; }
      set {
        szTest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzTest != other.SzTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzTest.Length != 0) hash ^= SzTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzTest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzTest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameTest other) {
      if (other == null) {
        return;
      }
      if (other.SzTest.Length != 0) {
        SzTest = other.SzTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzTest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
