// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: web_game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from web_game.proto</summary>
  public static partial class WebGameReflection {

    #region Descriptor
    /// <summary>File descriptor for web_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg53ZWJfZ2FtZS5wcm90bxIJR2FtZVByb3RvGg53ZWJfZGF0YS5wcm90byIc",
            "ChpQbGF5ZXJSZXF1ZXN0TG9naW5TZXJ2ZXJJZCKzAQoSUGxheWVyUmVxdWVz",
            "dExvZ2luEhQKDHF3X3BsYXllcl9pZBgBIAEoBBIUCgxzel9uaWNrX25hbWUY",
            "AiABKAkSEQoJc3pfYXZhdGFyGAMgASgJEg4KBmR3X3NleBgEIAEoDRISCgpk",
            "d19iYWxhbmNlGAUgASgNEhAKCHN6X3Rva2VuGAYgASgJEhIKCnN6X2dhbWVf",
            "aXAYByABKAkSFAoMZHdfZ2FtZV9wb3J0GAggASgNIhwKGlBsYXllclJlcXVl",
            "c3RMb2dpbk1ha2VUZWFtIjQKHFBsYXllclJlcXVlc3RMb2dpbkludml0ZVRl",
            "YW0SFAoMcXdfcGxheWVyX2lkGAEgASgEIjIKHFBsYXllclJlcXVlc3RMb2dp",
            "bkNoYW5nZVNsb3QSEgoKZHdfc2xvdF9pZBgBIAEoDSIdChtQbGF5ZXJSZXF1",
            "ZXN0TG9naW5HYW1lU3RhcnQiIAoeUGxheWVyUmVxdWVzdExvZ2luT25MaW5l",
            "UGxheWVyIkwKG1BsYXllclJlcXVlc3RMb2dpbkVudGVyVGVhbRIZChFkd190",
            "ZWFtX3NlcnZlcl9pZBgBIAEoDRISCgpxd190ZWFtX2lkGAIgASgEIkwKIVBs",
            "YXllclJlcXVlc3RMb2dpblJlZnVzZUVudGVyVGVhbRIUCgxxd19wbGF5ZXJf",
            "aWQYASABKAQSEQoJc3pfUmVhc29uGAIgASgJIh0KG1BsYXllclJlcXVlc3RM",
            "b2dpbkxlYXZlVGVhbSJBChZMb2dpbkFja1BsYXllclNlcnZlcklkEhEKCWR3",
            "X3Jlc3VsdBgBIAEoDRIUCgxkd19zZXJ2ZXJfaWQYAiABKA0iWAoZTG9naW5B",
            "Y2tQbGF5ZXJMb2dpblJlc3VsdBIRCglkd19yZXN1bHQYASABKA0SEgoKc3pf",
            "Z2FtZV9pcBgCIAEoCRIUCgxkd19nYW1lX3BvcnQYAyABKA0iLgoZTG9naW5O",
            "b3RpZnlQbGF5ZXJHYW1lS2ljaxIRCglkd19yZXN1bHQYASABKA0iUwoWTG9n",
            "aW5BY2tQbGF5ZXJNYWtlVGVhbRIRCglkd19yZXN1bHQYASABKA0SEgoKcXdf",
            "dGVhbV9pZBgCIAEoBBISCgpkd19zbG90X2lkGAMgASgNImAKGUxvZ2luTm90",
            "aWZ5UGxheWVyVGVhbUluZm8SLwoOdGVhbV9yb2xlX2RhdGEYASADKAsyFy5H",
            "YW1lUHJvdG8uVGVhbVJvbGVEYXRhEhIKCnF3X3RlYW1faWQYAiABKAQiLQoY",
            "TG9naW5BY2tQbGF5ZXJJbnZpdGVUZWFtEhEKCWR3X3Jlc3VsdBgBIAEoDSJi",
            "ChtMb2dpbk5vdGlmeVBsYXllckludml0ZVRlYW0SFAoMcXdfcGxheWVyX2lk",
            "GAEgASgEEhIKCnF3X3RlYW1faWQYAiABKAQSGQoRZHdfdGVhbV9zZXJ2ZXJf",
            "aWQYAyABKA0iLQoYTG9naW5BY2tQbGF5ZXJDaGFuZ2VTbG90EhEKCWR3X3Jl",
            "c3VsdBgBIAEoDSIbChlMb2dpbk5vdGlmeVBsYXllclRlYW1LaWNrIqQBChdM",
            "b2dpbkFja1BsYXllckdhbWVTdGFydBIRCglkd19yZXN1bHQYASABKA0SFgoO",
            "ZHdfcGxheWVyX3BvcnQYAiABKA0SFgoOZHdfc2VydmVyX3BvcnQYAyABKA0S",
            "HAoUZHdfc2xhdmVfc2VydmVyX3BvcnQYBCABKA0SFAoMc3pfbGlzdGVuX2lw",
            "GAUgASgJEhIKCnF3X3RlYW1faWQYBiABKAQiRQoaTG9naW5BY2tQbGF5ZXJP",
            "bkxpbmVQbGF5ZXISEQoJZHdfcmVzdWx0GAEgASgNEhQKDHF3X3BsYXllcl9p",
            "ZBgCIAMoBCIsChdMb2dpbkFja1BsYXllckVudGVyVGVhbRIRCglkd19yZXN1",
            "bHQYASABKA0iSwogTG9naW5Ob3RpZnlQbGF5ZXJSZWZ1c2VFbnRlclRlYW0S",
            "FAoMcXdfcGxheWVyX2lkGAEgASgEEhEKCXN6X1JlYXNvbhgCIAEoCSIsChdM",
            "b2dpbkFja1BsYXllckxlYXZlVGVhbRIRCglkd19yZXN1bHQYASABKA0iMgoa",
            "TG9naW5Ob3RpZnlMb2dpblBsYXllcktpY2sSFAoMcXdfcGxheWVyX2lkGAEg",
            "ASgEInkKG0xvZ2luUmVxdWVzdExvZ2luSW52aXRlVGVhbRIUCgxxd19pbnZp",
            "dGVfaWQYASABKAQSFQoNcXdfaW52aXRlZV9pZBgCIAEoBBISCgpxd190ZWFt",
            "X2lkGAMgASgEEhkKEWR3X3RlYW1fc2VydmVyX2lkGAQgASgNIlkKF0xvZ2lu",
            "QWNrTG9naW5JbnZpdGVUZWFtEhEKCWR3X3Jlc3VsdBgBIAEoDRIUCgxxd19p",
            "bnZpdGVfaWQYAiABKAQSFQoNcXdfaW52aXRlZV9pZBgDIAEoBCJnCiVMb2dp",
            "bk5vdGlmeUxvZ2luUGxheWVyUmVmdXNlRW50ZXJUZWFtEhQKDHF3X2ludml0",
            "ZV9pZBgBIAEoBBIVCg1xd19pbnZpdGVlX2lkGAIgASgEEhEKCXN6X1JlYXNv",
            "bhgDIAEoCSJWChhMb2dpblJlcXVlc3RUZWFtTWFrZVRlYW0SJgoJcm9sZV9k",
            "YXRhGAEgASgLMhMuR2FtZVByb3RvLlJvbGVEYXRhEhIKCnF3X3RlYW1faWQY",
            "AiABKAQiQwoaTG9naW5SZXF1ZXN0VGVhbUludml0ZVRlYW0SEQoJZHdfcmVz",
            "dWx0GAEgASgNEhIKCmR3X3Nsb3RfaWQYAiABKA0iQwoaTG9naW5SZXF1ZXN0",
            "VGVhbUNoYW5nZVNsb3QSEQoJZHdfcmVzdWx0GAEgASgNEhIKCmR3X3Nsb3Rf",
            "aWQYAiABKA0iRgoaTG9naW5SZXF1ZXN0VGVhbUtpY2tQbGF5ZXISFAoMcXdf",
            "cGxheWVyX2lkGAEgASgEEhIKCnF3X3RlYW1faWQYAiABKAQiRQoZTG9naW5S",
            "ZXF1ZXN0VGVhbUdhbWVTdGFydBISCgpxd190ZWFtX2lkGAEgASgEEhQKDHF3",
            "X3BsYXllcl9pZBgCIAEoBCJXChlMb2dpblJlcXVlc3RUZWFtRW50ZXJUZWFt",
            "EhIKCnF3X3RlYW1faWQYASABKAQSJgoJcm9sZV9kYXRhGAIgASgLMhMuR2Ft",
            "ZVByb3RvLlJvbGVEYXRhIkcKG0xvZ2luUmVxdWVzdFRlYW1QbGF5ZXJMZWF2",
            "ZRIUCgxxd19wbGF5ZXJfaWQYASABKAQSEgoKcXdfdGVhbV9pZBgCIAEoBCJn",
            "ChRUZWFtQWNrTG9naW5NYWtlVGVhbRIRCglkd19yZXN1bHQYASABKA0SFAoM",
            "cXdfcGxheWVyX2lkGAIgASgEEhIKCnF3X3RlYW1faWQYAyABKAQSEgoKZHdf",
            "c2xvdF9pZBgEIAEoDSJ0ChdUZWFtTm90aWZ5TG9naW5UZWFtSW5mbxIvCg50",
            "ZWFtX3JvbGVfZGF0YRgBIAMoCzIXLkdhbWVQcm90by5UZWFtUm9sZURhdGES",
            "EgoKcXdfdGVhbV9pZBgCIAEoBBIUCgxxd19wbGF5ZXJfaWQYAyABKAQiPAoW",
            "VGVhbUFja0xvZ2luSW52aXRlVGVhbRIRCglkd19yZXN1bHQYASABKA0SDwoH",
            "ZHdfc2xvdBgCIAEoDSI8ChZUZWFtQWNrTG9naW5DaGFuZ2VTbG90EhEKCWR3",
            "X3Jlc3VsdBgBIAEoDRIPCgdkd19zbG90GAIgASgNIkEKFlRlYW1BY2tMb2dp",
            "bktpY2tQbGF5ZXISEQoJZHdfcmVzdWx0GAEgASgNEhQKDHF3X3BsYXllcl9p",
            "ZBgCIAEoBCK4AQoVVGVhbUFja0xvZ2luR2FtZVN0YXJ0EhEKCWR3X3Jlc3Vs",
            "dBgBIAEoDRIWCg5kd19wbGF5ZXJfcG9ydBgCIAEoDRIWCg5kd19zZXJ2ZXJf",
            "cG9ydBgDIAEoDRIcChRkd19zbGF2ZV9zZXJ2ZXJfcG9ydBgEIAEoDRIUCgxz",
            "el9saXN0ZW5faXAYBSABKAkSFAoMcXdfcGxheWVyX2lkGAYgASgEEhIKCnF3",
            "X3RlYW1faWQYByABKAQiVAoVVGVhbUFja0xvZ2luRW50ZXJUZWFtEhEKCWR3",
            "X3Jlc3VsdBgBIAEoDRIUCgxxd19wbGF5ZXJfaWQYAiABKAQSEgoKcXdfdGVh",
            "bV9pZBgDIAEoBCJCChdUZWFtQWNrTG9naW5QbGF5ZXJMZWF2ZRIRCglkd19y",
            "ZXN1bHQYASABKA0SFAoMcXdfcGxheWVyX2lkGAIgASgEIkwKH1RlYW1SZXF1",
            "ZXN0R2FtZU1hbmFnZXJHYW1lU3RhcnQSEgoKcXdfdGVhbV9pZBgBIAEoBBIV",
            "Cg1xd19wbGF5ZXJfaWRzGAIgAygEIqgBChtHYW1lTWFuYWdlckFja1RlYW1H",
            "YW1lU3RhcnQSEQoJZHdfcmVzdWx0GAEgASgNEhYKDmR3X3BsYXllcl9wb3J0",
            "GAIgASgNEhYKDmR3X3NlcnZlcl9wb3J0GAMgASgNEhwKFGR3X3NsYXZlX3Nl",
            "cnZlcl9wb3J0GAQgASgNEhIKCnF3X3RlYW1faWQYBSABKAQSFAoMc3pfbGlz",
            "dGVuX2lwGAYgASgJIpgBChlHYW1lTm90aWZ5R2FtZU1hbmFnZXJJbmZvEhYK",
            "DmR3X3BsYXllcl9wb3J0GAEgASgNEhYKDmR3X3NlcnZlcl9wb3J0GAIgASgN",
            "EhwKFGR3X3NsYXZlX3NlcnZlcl9wb3J0GAMgASgNEhIKCnF3X3RlYW1faWQY",
            "BCABKAQSGQoRZHdfdGVhbV9zZXJ2ZXJfaWQYBSABKA0iMQocR2FtZU1hbmFn",
            "ZXJBY2tHYW1lSW5mb1Jlc3VsdBIRCglkd19yZXN1bHQYASABKA0iMQocUGxh",
            "eWVyUmVxdWVzdEdhbWVNYW5hZ2VySW5mbxIRCglkd19yZXN1bHQYASABKA0i",
            "bgoeR2FtZU1hbmFnZXJBY2tQbGF5ZXJJbmZvUmVzdWx0EhYKDmR3X3BsYXll",
            "cl9wb3J0GAEgASgNEhYKDmR3X3NlcnZlcl9wb3J0GAIgASgNEhwKFGR3X3Ns",
            "YXZlX3NlcnZlcl9wb3J0GAMgASgNIigKFVBsYXllclJlcXVlc3RHYW1lVGVz",
            "dBIPCgdzel90ZXN0GAEgASgJIooBCgpTZXJ2ZXJJbmZvEhQKDGR3X3NlcnZl",
            "cl9pZBgBIAEoDRIUCgxzel9saXN0ZW5faXAYAiABKAkSFAoMZHdfdGVhbV9w",
            "b3J0GAMgASgNEiMKG2R3X2dhbWVfc2VydmVyX21hbmFnZXJfcG9ydBgEIAEo",
            "DRIVCg1kd19sb2dpbl9wb3J0GAUgASgNKkkKC0VTZXJ2ZXJUeXBlEgsKB1NU",
            "X05PTkUQABIMCghTVF9Mb2dpbhABEgsKB1NUX1RlYW0QAhISCg5TVF9HYW1l",
            "TWFuYWdlchADKicKCUVUZWFtVHlwZRILCgdUVF9OT05FEAASDQoJVFRfTm9y",
            "bWFsEAEqjAIKCkVFcnJvckNvZGUSCwoHRUNfTk9ORRAAEhQKEEVDX0FscmVh",
            "ZHlJblRlYW0QARIWChJFQ19NYWtlVGVhbU5vdElkbGUQAhIXChNFQ19DYW5u",
            "b3RGaW5kUGxheWVyEAMSDwoLRUNfTm9UZWFtSWQQBBIQCgxFQ19Ob3RMZWFk",
            "ZXIQBRITCg9FQ19UZWFtSGFzU3RhcnQQBhIaChZFQ19Ob0dhbWVNYW5hZ2Vy",
            "U2VydmVyEAcSEwoPRUNfTm9UZWFtU2VydmVyEAgSFAoQRUNfTm9Mb2dpblNl",
            "cnZlchAJEhYKEkVDX1BsYXllck5vdE9ubGluZRAKEhMKD0VDX0ZhaWxJbnRv",
            "VGVhbRALYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::GameProto.WebDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameProto.EServerType), typeof(global::GameProto.ETeamType), typeof(global::GameProto.EErrorCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginServerId), global::GameProto.PlayerRequestLoginServerId.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLogin), global::GameProto.PlayerRequestLogin.Parser, new[]{ "QwPlayerId", "SzNickName", "SzAvatar", "DwSex", "DwBalance", "SzToken", "SzGameIp", "DwGamePort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginMakeTeam), global::GameProto.PlayerRequestLoginMakeTeam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginInviteTeam), global::GameProto.PlayerRequestLoginInviteTeam.Parser, new[]{ "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginChangeSlot), global::GameProto.PlayerRequestLoginChangeSlot.Parser, new[]{ "DwSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginGameStart), global::GameProto.PlayerRequestLoginGameStart.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginOnLinePlayer), global::GameProto.PlayerRequestLoginOnLinePlayer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginEnterTeam), global::GameProto.PlayerRequestLoginEnterTeam.Parser, new[]{ "DwTeamServerId", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginRefuseEnterTeam), global::GameProto.PlayerRequestLoginRefuseEnterTeam.Parser, new[]{ "QwPlayerId", "SzReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestLoginLeaveTeam), global::GameProto.PlayerRequestLoginLeaveTeam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerServerId), global::GameProto.LoginAckPlayerServerId.Parser, new[]{ "DwResult", "DwServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerLoginResult), global::GameProto.LoginAckPlayerLoginResult.Parser, new[]{ "DwResult", "SzGameIp", "DwGamePort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyPlayerGameKick), global::GameProto.LoginNotifyPlayerGameKick.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerMakeTeam), global::GameProto.LoginAckPlayerMakeTeam.Parser, new[]{ "DwResult", "QwTeamId", "DwSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyPlayerTeamInfo), global::GameProto.LoginNotifyPlayerTeamInfo.Parser, new[]{ "TeamRoleData", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerInviteTeam), global::GameProto.LoginAckPlayerInviteTeam.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyPlayerInviteTeam), global::GameProto.LoginNotifyPlayerInviteTeam.Parser, new[]{ "QwPlayerId", "QwTeamId", "DwTeamServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerChangeSlot), global::GameProto.LoginAckPlayerChangeSlot.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyPlayerTeamKick), global::GameProto.LoginNotifyPlayerTeamKick.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerGameStart), global::GameProto.LoginAckPlayerGameStart.Parser, new[]{ "DwResult", "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "SzListenIp", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerOnLinePlayer), global::GameProto.LoginAckPlayerOnLinePlayer.Parser, new[]{ "DwResult", "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerEnterTeam), global::GameProto.LoginAckPlayerEnterTeam.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyPlayerRefuseEnterTeam), global::GameProto.LoginNotifyPlayerRefuseEnterTeam.Parser, new[]{ "QwPlayerId", "SzReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckPlayerLeaveTeam), global::GameProto.LoginAckPlayerLeaveTeam.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyLoginPlayerKick), global::GameProto.LoginNotifyLoginPlayerKick.Parser, new[]{ "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestLoginInviteTeam), global::GameProto.LoginRequestLoginInviteTeam.Parser, new[]{ "QwInviteId", "QwInviteeId", "QwTeamId", "DwTeamServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginAckLoginInviteTeam), global::GameProto.LoginAckLoginInviteTeam.Parser, new[]{ "DwResult", "QwInviteId", "QwInviteeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginNotifyLoginPlayerRefuseEnterTeam), global::GameProto.LoginNotifyLoginPlayerRefuseEnterTeam.Parser, new[]{ "QwInviteId", "QwInviteeId", "SzReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamMakeTeam), global::GameProto.LoginRequestTeamMakeTeam.Parser, new[]{ "RoleData", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamInviteTeam), global::GameProto.LoginRequestTeamInviteTeam.Parser, new[]{ "DwResult", "DwSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamChangeSlot), global::GameProto.LoginRequestTeamChangeSlot.Parser, new[]{ "DwResult", "DwSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamKickPlayer), global::GameProto.LoginRequestTeamKickPlayer.Parser, new[]{ "QwPlayerId", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamGameStart), global::GameProto.LoginRequestTeamGameStart.Parser, new[]{ "QwTeamId", "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamEnterTeam), global::GameProto.LoginRequestTeamEnterTeam.Parser, new[]{ "QwTeamId", "RoleData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.LoginRequestTeamPlayerLeave), global::GameProto.LoginRequestTeamPlayerLeave.Parser, new[]{ "QwPlayerId", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginMakeTeam), global::GameProto.TeamAckLoginMakeTeam.Parser, new[]{ "DwResult", "QwPlayerId", "QwTeamId", "DwSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamNotifyLoginTeamInfo), global::GameProto.TeamNotifyLoginTeamInfo.Parser, new[]{ "TeamRoleData", "QwTeamId", "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginInviteTeam), global::GameProto.TeamAckLoginInviteTeam.Parser, new[]{ "DwResult", "DwSlot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginChangeSlot), global::GameProto.TeamAckLoginChangeSlot.Parser, new[]{ "DwResult", "DwSlot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginKickPlayer), global::GameProto.TeamAckLoginKickPlayer.Parser, new[]{ "DwResult", "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginGameStart), global::GameProto.TeamAckLoginGameStart.Parser, new[]{ "DwResult", "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "SzListenIp", "QwPlayerId", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginEnterTeam), global::GameProto.TeamAckLoginEnterTeam.Parser, new[]{ "DwResult", "QwPlayerId", "QwTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamAckLoginPlayerLeave), global::GameProto.TeamAckLoginPlayerLeave.Parser, new[]{ "DwResult", "QwPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.TeamRequestGameManagerGameStart), global::GameProto.TeamRequestGameManagerGameStart.Parser, new[]{ "QwTeamId", "QwPlayerIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckTeamGameStart), global::GameProto.GameManagerAckTeamGameStart.Parser, new[]{ "DwResult", "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "QwTeamId", "SzListenIp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameNotifyGameManagerInfo), global::GameProto.GameNotifyGameManagerInfo.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "QwTeamId", "DwTeamServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckGameInfoResult), global::GameProto.GameManagerAckGameInfoResult.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameManagerInfo), global::GameProto.PlayerRequestGameManagerInfo.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckPlayerInfoResult), global::GameProto.GameManagerAckPlayerInfoResult.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameTest), global::GameProto.PlayerRequestGameTest.Parser, new[]{ "SzTest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.ServerInfo), global::GameProto.ServerInfo.Parser, new[]{ "DwServerId", "SzListenIp", "DwTeamPort", "DwGameServerManagerPort", "DwLoginPort" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///服务器类型
  /// </summary>
  public enum EServerType {
    [pbr::OriginalName("ST_NONE")] StNone = 0,
    [pbr::OriginalName("ST_Login")] StLogin = 1,
    [pbr::OriginalName("ST_Team")] StTeam = 2,
    [pbr::OriginalName("ST_GameManager")] StGameManager = 3,
  }

  /// <summary>
  ///组队的类型
  /// </summary>
  public enum ETeamType {
    [pbr::OriginalName("TT_NONE")] TtNone = 0,
    [pbr::OriginalName("TT_Normal")] TtNormal = 1,
  }

  /// <summary>
  ///错误码
  /// </summary>
  public enum EErrorCode {
    [pbr::OriginalName("EC_NONE")] EcNone = 0,
    /// <summary>
    ///已经在队伍中了
    /// </summary>
    [pbr::OriginalName("EC_AlreadyInTeam")] EcAlreadyInTeam = 1,
    /// <summary>
    ///创建队伍时 角色状态不是idle
    /// </summary>
    [pbr::OriginalName("EC_MakeTeamNotIdle")] EcMakeTeamNotIdle = 2,
    /// <summary>
    ///查无此人
    /// </summary>
    [pbr::OriginalName("EC_CannotFindPlayer")] EcCannotFindPlayer = 3,
    /// <summary>
    ///没有这个队伍
    /// </summary>
    [pbr::OriginalName("EC_NoTeamId")] EcNoTeamId = 4,
    /// <summary>
    ///没有队长
    /// </summary>
    [pbr::OriginalName("EC_NotLeader")] EcNotLeader = 5,
    /// <summary>
    ///队伍已经申请开始游戏
    /// </summary>
    [pbr::OriginalName("EC_TeamHasStart")] EcTeamHasStart = 6,
    /// <summary>
    ///没有游戏管理服务器
    /// </summary>
    [pbr::OriginalName("EC_NoGameManagerServer")] EcNoGameManagerServer = 7,
    /// <summary>
    ///没有组队服务器
    /// </summary>
    [pbr::OriginalName("EC_NoTeamServer")] EcNoTeamServer = 8,
    /// <summary>
    ///没有登录服务器
    /// </summary>
    [pbr::OriginalName("EC_NoLoginServer")] EcNoLoginServer = 9,
    /// <summary>
    ///玩家不在线
    /// </summary>
    [pbr::OriginalName("EC_PlayerNotOnline")] EcPlayerNotOnline = 10,
    /// <summary>
    ///加入队伍失败
    /// </summary>
    [pbr::OriginalName("EC_FailIntoTeam")] EcFailIntoTeam = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///player->login
  /// </summary>
  public sealed partial class PlayerRequestLoginServerId : pb::IMessage<PlayerRequestLoginServerId> {
    private static readonly pb::MessageParser<PlayerRequestLoginServerId> _parser = new pb::MessageParser<PlayerRequestLoginServerId>(() => new PlayerRequestLoginServerId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginServerId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginServerId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginServerId(PlayerRequestLoginServerId other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginServerId Clone() {
      return new PlayerRequestLoginServerId(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginServerId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginServerId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginServerId other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerRequestLogin : pb::IMessage<PlayerRequestLogin> {
    private static readonly pb::MessageParser<PlayerRequestLogin> _parser = new pb::MessageParser<PlayerRequestLogin>(() => new PlayerRequestLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin(PlayerRequestLogin other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      szNickName_ = other.szNickName_;
      szAvatar_ = other.szAvatar_;
      dwSex_ = other.dwSex_;
      dwBalance_ = other.dwBalance_;
      szToken_ = other.szToken_;
      szGameIp_ = other.szGameIp_;
      dwGamePort_ = other.dwGamePort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLogin Clone() {
      return new PlayerRequestLogin(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "sz_nick_name" field.</summary>
    public const int SzNickNameFieldNumber = 2;
    private string szNickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzNickName {
      get { return szNickName_; }
      set {
        szNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sz_avatar" field.</summary>
    public const int SzAvatarFieldNumber = 3;
    private string szAvatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAvatar {
      get { return szAvatar_; }
      set {
        szAvatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dw_sex" field.</summary>
    public const int DwSexFieldNumber = 4;
    private uint dwSex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSex {
      get { return dwSex_; }
      set {
        dwSex_ = value;
      }
    }

    /// <summary>Field number for the "dw_balance" field.</summary>
    public const int DwBalanceFieldNumber = 5;
    private uint dwBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwBalance {
      get { return dwBalance_; }
      set {
        dwBalance_ = value;
      }
    }

    /// <summary>Field number for the "sz_token" field.</summary>
    public const int SzTokenFieldNumber = 6;
    private string szToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzToken {
      get { return szToken_; }
      set {
        szToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sz_game_ip" field.</summary>
    public const int SzGameIpFieldNumber = 7;
    private string szGameIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzGameIp {
      get { return szGameIp_; }
      set {
        szGameIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dw_game_port" field.</summary>
    public const int DwGamePortFieldNumber = 8;
    private uint dwGamePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwGamePort {
      get { return dwGamePort_; }
      set {
        dwGamePort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (SzNickName != other.SzNickName) return false;
      if (SzAvatar != other.SzAvatar) return false;
      if (DwSex != other.DwSex) return false;
      if (DwBalance != other.DwBalance) return false;
      if (SzToken != other.SzToken) return false;
      if (SzGameIp != other.SzGameIp) return false;
      if (DwGamePort != other.DwGamePort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (SzNickName.Length != 0) hash ^= SzNickName.GetHashCode();
      if (SzAvatar.Length != 0) hash ^= SzAvatar.GetHashCode();
      if (DwSex != 0) hash ^= DwSex.GetHashCode();
      if (DwBalance != 0) hash ^= DwBalance.GetHashCode();
      if (SzToken.Length != 0) hash ^= SzToken.GetHashCode();
      if (SzGameIp.Length != 0) hash ^= SzGameIp.GetHashCode();
      if (DwGamePort != 0) hash ^= DwGamePort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (SzNickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzNickName);
      }
      if (SzAvatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzAvatar);
      }
      if (DwSex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSex);
      }
      if (DwBalance != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DwBalance);
      }
      if (SzToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SzToken);
      }
      if (SzGameIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SzGameIp);
      }
      if (DwGamePort != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DwGamePort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (SzNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzNickName);
      }
      if (SzAvatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAvatar);
      }
      if (DwSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSex);
      }
      if (DwBalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwBalance);
      }
      if (SzToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzToken);
      }
      if (SzGameIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzGameIp);
      }
      if (DwGamePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwGamePort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLogin other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.SzNickName.Length != 0) {
        SzNickName = other.SzNickName;
      }
      if (other.SzAvatar.Length != 0) {
        SzAvatar = other.SzAvatar;
      }
      if (other.DwSex != 0) {
        DwSex = other.DwSex;
      }
      if (other.DwBalance != 0) {
        DwBalance = other.DwBalance;
      }
      if (other.SzToken.Length != 0) {
        SzToken = other.SzToken;
      }
      if (other.SzGameIp.Length != 0) {
        SzGameIp = other.SzGameIp;
      }
      if (other.DwGamePort != 0) {
        DwGamePort = other.DwGamePort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            SzNickName = input.ReadString();
            break;
          }
          case 26: {
            SzAvatar = input.ReadString();
            break;
          }
          case 32: {
            DwSex = input.ReadUInt32();
            break;
          }
          case 40: {
            DwBalance = input.ReadUInt32();
            break;
          }
          case 50: {
            SzToken = input.ReadString();
            break;
          }
          case 58: {
            SzGameIp = input.ReadString();
            break;
          }
          case 64: {
            DwGamePort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginMakeTeam : pb::IMessage<PlayerRequestLoginMakeTeam> {
    private static readonly pb::MessageParser<PlayerRequestLoginMakeTeam> _parser = new pb::MessageParser<PlayerRequestLoginMakeTeam>(() => new PlayerRequestLoginMakeTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginMakeTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginMakeTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginMakeTeam(PlayerRequestLoginMakeTeam other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginMakeTeam Clone() {
      return new PlayerRequestLoginMakeTeam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginMakeTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginMakeTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginMakeTeam other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginInviteTeam : pb::IMessage<PlayerRequestLoginInviteTeam> {
    private static readonly pb::MessageParser<PlayerRequestLoginInviteTeam> _parser = new pb::MessageParser<PlayerRequestLoginInviteTeam>(() => new PlayerRequestLoginInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginInviteTeam(PlayerRequestLoginInviteTeam other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginInviteTeam Clone() {
      return new PlayerRequestLoginInviteTeam(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginChangeSlot : pb::IMessage<PlayerRequestLoginChangeSlot> {
    private static readonly pb::MessageParser<PlayerRequestLoginChangeSlot> _parser = new pb::MessageParser<PlayerRequestLoginChangeSlot>(() => new PlayerRequestLoginChangeSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginChangeSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginChangeSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginChangeSlot(PlayerRequestLoginChangeSlot other) : this() {
      dwSlotId_ = other.dwSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginChangeSlot Clone() {
      return new PlayerRequestLoginChangeSlot(this);
    }

    /// <summary>Field number for the "dw_slot_id" field.</summary>
    public const int DwSlotIdFieldNumber = 1;
    private uint dwSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlotId {
      get { return dwSlotId_; }
      set {
        dwSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginChangeSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginChangeSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwSlotId != other.DwSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwSlotId != 0) hash ^= DwSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwSlotId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginChangeSlot other) {
      if (other == null) {
        return;
      }
      if (other.DwSlotId != 0) {
        DwSlotId = other.DwSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginGameStart : pb::IMessage<PlayerRequestLoginGameStart> {
    private static readonly pb::MessageParser<PlayerRequestLoginGameStart> _parser = new pb::MessageParser<PlayerRequestLoginGameStart>(() => new PlayerRequestLoginGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginGameStart(PlayerRequestLoginGameStart other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginGameStart Clone() {
      return new PlayerRequestLoginGameStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginGameStart other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginOnLinePlayer : pb::IMessage<PlayerRequestLoginOnLinePlayer> {
    private static readonly pb::MessageParser<PlayerRequestLoginOnLinePlayer> _parser = new pb::MessageParser<PlayerRequestLoginOnLinePlayer>(() => new PlayerRequestLoginOnLinePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginOnLinePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginOnLinePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginOnLinePlayer(PlayerRequestLoginOnLinePlayer other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginOnLinePlayer Clone() {
      return new PlayerRequestLoginOnLinePlayer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginOnLinePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginOnLinePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginOnLinePlayer other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginEnterTeam : pb::IMessage<PlayerRequestLoginEnterTeam> {
    private static readonly pb::MessageParser<PlayerRequestLoginEnterTeam> _parser = new pb::MessageParser<PlayerRequestLoginEnterTeam>(() => new PlayerRequestLoginEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginEnterTeam(PlayerRequestLoginEnterTeam other) : this() {
      dwTeamServerId_ = other.dwTeamServerId_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginEnterTeam Clone() {
      return new PlayerRequestLoginEnterTeam(this);
    }

    /// <summary>Field number for the "dw_team_server_id" field.</summary>
    public const int DwTeamServerIdFieldNumber = 1;
    private uint dwTeamServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwTeamServerId {
      get { return dwTeamServerId_; }
      set {
        dwTeamServerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwTeamServerId != other.DwTeamServerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwTeamServerId != 0) hash ^= DwTeamServerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwTeamServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwTeamServerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwTeamServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwTeamServerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwTeamServerId != 0) {
        DwTeamServerId = other.DwTeamServerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwTeamServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginRefuseEnterTeam : pb::IMessage<PlayerRequestLoginRefuseEnterTeam> {
    private static readonly pb::MessageParser<PlayerRequestLoginRefuseEnterTeam> _parser = new pb::MessageParser<PlayerRequestLoginRefuseEnterTeam>(() => new PlayerRequestLoginRefuseEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginRefuseEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginRefuseEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginRefuseEnterTeam(PlayerRequestLoginRefuseEnterTeam other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      szReason_ = other.szReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginRefuseEnterTeam Clone() {
      return new PlayerRequestLoginRefuseEnterTeam(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "sz_Reason" field.</summary>
    public const int SzReasonFieldNumber = 2;
    private string szReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzReason {
      get { return szReason_; }
      set {
        szReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginRefuseEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginRefuseEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (SzReason != other.SzReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (SzReason.Length != 0) hash ^= SzReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (SzReason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (SzReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginRefuseEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.SzReason.Length != 0) {
        SzReason = other.SzReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            SzReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequestLoginLeaveTeam : pb::IMessage<PlayerRequestLoginLeaveTeam> {
    private static readonly pb::MessageParser<PlayerRequestLoginLeaveTeam> _parser = new pb::MessageParser<PlayerRequestLoginLeaveTeam>(() => new PlayerRequestLoginLeaveTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestLoginLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginLeaveTeam(PlayerRequestLoginLeaveTeam other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestLoginLeaveTeam Clone() {
      return new PlayerRequestLoginLeaveTeam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestLoginLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestLoginLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestLoginLeaveTeam other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///login->player
  /// </summary>
  public sealed partial class LoginAckPlayerServerId : pb::IMessage<LoginAckPlayerServerId> {
    private static readonly pb::MessageParser<LoginAckPlayerServerId> _parser = new pb::MessageParser<LoginAckPlayerServerId>(() => new LoginAckPlayerServerId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerServerId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerServerId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerServerId(LoginAckPlayerServerId other) : this() {
      dwResult_ = other.dwResult_;
      dwServerId_ = other.dwServerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerServerId Clone() {
      return new LoginAckPlayerServerId(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_id" field.</summary>
    public const int DwServerIdFieldNumber = 2;
    private uint dwServerId_;
    /// <summary>
    ///通知客户端 服务器的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerId {
      get { return dwServerId_; }
      set {
        dwServerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerServerId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerServerId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwServerId != other.DwServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwServerId != 0) hash ^= DwServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwServerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerServerId other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwServerId != 0) {
        DwServerId = other.DwServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerLoginResult : pb::IMessage<LoginAckPlayerLoginResult> {
    private static readonly pb::MessageParser<LoginAckPlayerLoginResult> _parser = new pb::MessageParser<LoginAckPlayerLoginResult>(() => new LoginAckPlayerLoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerLoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult(LoginAckPlayerLoginResult other) : this() {
      dwResult_ = other.dwResult_;
      szGameIp_ = other.szGameIp_;
      dwGamePort_ = other.dwGamePort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLoginResult Clone() {
      return new LoginAckPlayerLoginResult(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "sz_game_ip" field.</summary>
    public const int SzGameIpFieldNumber = 2;
    private string szGameIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzGameIp {
      get { return szGameIp_; }
      set {
        szGameIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dw_game_port" field.</summary>
    public const int DwGamePortFieldNumber = 3;
    private uint dwGamePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwGamePort {
      get { return dwGamePort_; }
      set {
        dwGamePort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerLoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerLoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (SzGameIp != other.SzGameIp) return false;
      if (DwGamePort != other.DwGamePort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (SzGameIp.Length != 0) hash ^= SzGameIp.GetHashCode();
      if (DwGamePort != 0) hash ^= DwGamePort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (SzGameIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzGameIp);
      }
      if (DwGamePort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwGamePort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (SzGameIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzGameIp);
      }
      if (DwGamePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwGamePort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerLoginResult other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.SzGameIp.Length != 0) {
        SzGameIp = other.SzGameIp;
      }
      if (other.DwGamePort != 0) {
        DwGamePort = other.DwGamePort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 18: {
            SzGameIp = input.ReadString();
            break;
          }
          case 24: {
            DwGamePort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyPlayerGameKick : pb::IMessage<LoginNotifyPlayerGameKick> {
    private static readonly pb::MessageParser<LoginNotifyPlayerGameKick> _parser = new pb::MessageParser<LoginNotifyPlayerGameKick>(() => new LoginNotifyPlayerGameKick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyPlayerGameKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerGameKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerGameKick(LoginNotifyPlayerGameKick other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerGameKick Clone() {
      return new LoginNotifyPlayerGameKick(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyPlayerGameKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyPlayerGameKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyPlayerGameKick other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerMakeTeam : pb::IMessage<LoginAckPlayerMakeTeam> {
    private static readonly pb::MessageParser<LoginAckPlayerMakeTeam> _parser = new pb::MessageParser<LoginAckPlayerMakeTeam>(() => new LoginAckPlayerMakeTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerMakeTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerMakeTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerMakeTeam(LoginAckPlayerMakeTeam other) : this() {
      dwResult_ = other.dwResult_;
      qwTeamId_ = other.qwTeamId_;
      dwSlotId_ = other.dwSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerMakeTeam Clone() {
      return new LoginAckPlayerMakeTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot_id" field.</summary>
    public const int DwSlotIdFieldNumber = 3;
    private uint dwSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlotId {
      get { return dwSlotId_; }
      set {
        dwSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerMakeTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerMakeTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (DwSlotId != other.DwSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (DwSlotId != 0) hash ^= DwSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (DwSlotId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (DwSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerMakeTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.DwSlotId != 0) {
        DwSlotId = other.DwSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 24: {
            DwSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyPlayerTeamInfo : pb::IMessage<LoginNotifyPlayerTeamInfo> {
    private static readonly pb::MessageParser<LoginNotifyPlayerTeamInfo> _parser = new pb::MessageParser<LoginNotifyPlayerTeamInfo>(() => new LoginNotifyPlayerTeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyPlayerTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamInfo(LoginNotifyPlayerTeamInfo other) : this() {
      teamRoleData_ = other.teamRoleData_.Clone();
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamInfo Clone() {
      return new LoginNotifyPlayerTeamInfo(this);
    }

    /// <summary>Field number for the "team_role_data" field.</summary>
    public const int TeamRoleDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.TeamRoleData> _repeated_teamRoleData_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.TeamRoleData.Parser);
    private readonly pbc::RepeatedField<global::GameProto.TeamRoleData> teamRoleData_ = new pbc::RepeatedField<global::GameProto.TeamRoleData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.TeamRoleData> TeamRoleData {
      get { return teamRoleData_; }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyPlayerTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyPlayerTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teamRoleData_.Equals(other.teamRoleData_)) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teamRoleData_.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamRoleData_.WriteTo(output, _repeated_teamRoleData_codec);
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamRoleData_.CalculateSize(_repeated_teamRoleData_codec);
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyPlayerTeamInfo other) {
      if (other == null) {
        return;
      }
      teamRoleData_.Add(other.teamRoleData_);
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teamRoleData_.AddEntriesFrom(input, _repeated_teamRoleData_codec);
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerInviteTeam : pb::IMessage<LoginAckPlayerInviteTeam> {
    private static readonly pb::MessageParser<LoginAckPlayerInviteTeam> _parser = new pb::MessageParser<LoginAckPlayerInviteTeam>(() => new LoginAckPlayerInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerInviteTeam(LoginAckPlayerInviteTeam other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerInviteTeam Clone() {
      return new LoginAckPlayerInviteTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyPlayerInviteTeam : pb::IMessage<LoginNotifyPlayerInviteTeam> {
    private static readonly pb::MessageParser<LoginNotifyPlayerInviteTeam> _parser = new pb::MessageParser<LoginNotifyPlayerInviteTeam>(() => new LoginNotifyPlayerInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyPlayerInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerInviteTeam(LoginNotifyPlayerInviteTeam other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      dwTeamServerId_ = other.dwTeamServerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerInviteTeam Clone() {
      return new LoginNotifyPlayerInviteTeam(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    /// <summary>
    ///谁邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    /// <summary>
    ///邀请的队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dw_team_server_id" field.</summary>
    public const int DwTeamServerIdFieldNumber = 3;
    private uint dwTeamServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwTeamServerId {
      get { return dwTeamServerId_; }
      set {
        dwTeamServerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyPlayerInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyPlayerInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (DwTeamServerId != other.DwTeamServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (DwTeamServerId != 0) hash ^= DwTeamServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwTeamServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwTeamServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyPlayerInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.DwTeamServerId != 0) {
        DwTeamServerId = other.DwTeamServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 24: {
            DwTeamServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerChangeSlot : pb::IMessage<LoginAckPlayerChangeSlot> {
    private static readonly pb::MessageParser<LoginAckPlayerChangeSlot> _parser = new pb::MessageParser<LoginAckPlayerChangeSlot>(() => new LoginAckPlayerChangeSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerChangeSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerChangeSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerChangeSlot(LoginAckPlayerChangeSlot other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerChangeSlot Clone() {
      return new LoginAckPlayerChangeSlot(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerChangeSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerChangeSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerChangeSlot other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyPlayerTeamKick : pb::IMessage<LoginNotifyPlayerTeamKick> {
    private static readonly pb::MessageParser<LoginNotifyPlayerTeamKick> _parser = new pb::MessageParser<LoginNotifyPlayerTeamKick>(() => new LoginNotifyPlayerTeamKick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyPlayerTeamKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamKick(LoginNotifyPlayerTeamKick other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerTeamKick Clone() {
      return new LoginNotifyPlayerTeamKick(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyPlayerTeamKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyPlayerTeamKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyPlayerTeamKick other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerGameStart : pb::IMessage<LoginAckPlayerGameStart> {
    private static readonly pb::MessageParser<LoginAckPlayerGameStart> _parser = new pb::MessageParser<LoginAckPlayerGameStart>(() => new LoginAckPlayerGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerGameStart(LoginAckPlayerGameStart other) : this() {
      dwResult_ = other.dwResult_;
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      szListenIp_ = other.szListenIp_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerGameStart Clone() {
      return new LoginAckPlayerGameStart(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 2;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 3;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 4;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "sz_listen_ip" field.</summary>
    public const int SzListenIpFieldNumber = 5;
    private string szListenIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzListenIp {
      get { return szListenIp_; }
      set {
        szListenIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 6;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (SzListenIp != other.SzListenIp) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (SzListenIp.Length != 0) hash ^= SzListenIp.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwPlayerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (SzListenIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SzListenIp);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (SzListenIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzListenIp);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerGameStart other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.SzListenIp.Length != 0) {
        SzListenIp = other.SzListenIp;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 42: {
            SzListenIp = input.ReadString();
            break;
          }
          case 48: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerOnLinePlayer : pb::IMessage<LoginAckPlayerOnLinePlayer> {
    private static readonly pb::MessageParser<LoginAckPlayerOnLinePlayer> _parser = new pb::MessageParser<LoginAckPlayerOnLinePlayer>(() => new LoginAckPlayerOnLinePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerOnLinePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerOnLinePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerOnLinePlayer(LoginAckPlayerOnLinePlayer other) : this() {
      dwResult_ = other.dwResult_;
      qwPlayerId_ = other.qwPlayerId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerOnLinePlayer Clone() {
      return new LoginAckPlayerOnLinePlayer(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_qwPlayerId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> qwPlayerId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> QwPlayerId {
      get { return qwPlayerId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerOnLinePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerOnLinePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if(!qwPlayerId_.Equals(other.qwPlayerId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      hash ^= qwPlayerId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      qwPlayerId_.WriteTo(output, _repeated_qwPlayerId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      size += qwPlayerId_.CalculateSize(_repeated_qwPlayerId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerOnLinePlayer other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      qwPlayerId_.Add(other.qwPlayerId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            qwPlayerId_.AddEntriesFrom(input, _repeated_qwPlayerId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerEnterTeam : pb::IMessage<LoginAckPlayerEnterTeam> {
    private static readonly pb::MessageParser<LoginAckPlayerEnterTeam> _parser = new pb::MessageParser<LoginAckPlayerEnterTeam>(() => new LoginAckPlayerEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerEnterTeam(LoginAckPlayerEnterTeam other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerEnterTeam Clone() {
      return new LoginAckPlayerEnterTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyPlayerRefuseEnterTeam : pb::IMessage<LoginNotifyPlayerRefuseEnterTeam> {
    private static readonly pb::MessageParser<LoginNotifyPlayerRefuseEnterTeam> _parser = new pb::MessageParser<LoginNotifyPlayerRefuseEnterTeam>(() => new LoginNotifyPlayerRefuseEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyPlayerRefuseEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerRefuseEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerRefuseEnterTeam(LoginNotifyPlayerRefuseEnterTeam other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      szReason_ = other.szReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyPlayerRefuseEnterTeam Clone() {
      return new LoginNotifyPlayerRefuseEnterTeam(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "sz_Reason" field.</summary>
    public const int SzReasonFieldNumber = 2;
    private string szReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzReason {
      get { return szReason_; }
      set {
        szReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyPlayerRefuseEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyPlayerRefuseEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (SzReason != other.SzReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (SzReason.Length != 0) hash ^= SzReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (SzReason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (SzReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyPlayerRefuseEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.SzReason.Length != 0) {
        SzReason = other.SzReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            SzReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckPlayerLeaveTeam : pb::IMessage<LoginAckPlayerLeaveTeam> {
    private static readonly pb::MessageParser<LoginAckPlayerLeaveTeam> _parser = new pb::MessageParser<LoginAckPlayerLeaveTeam>(() => new LoginAckPlayerLeaveTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckPlayerLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLeaveTeam(LoginAckPlayerLeaveTeam other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckPlayerLeaveTeam Clone() {
      return new LoginAckPlayerLeaveTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckPlayerLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckPlayerLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckPlayerLeaveTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///login->login
  /// </summary>
  public sealed partial class LoginNotifyLoginPlayerKick : pb::IMessage<LoginNotifyLoginPlayerKick> {
    private static readonly pb::MessageParser<LoginNotifyLoginPlayerKick> _parser = new pb::MessageParser<LoginNotifyLoginPlayerKick>(() => new LoginNotifyLoginPlayerKick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyLoginPlayerKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerKick(LoginNotifyLoginPlayerKick other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerKick Clone() {
      return new LoginNotifyLoginPlayerKick(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyLoginPlayerKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyLoginPlayerKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyLoginPlayerKick other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestLoginInviteTeam : pb::IMessage<LoginRequestLoginInviteTeam> {
    private static readonly pb::MessageParser<LoginRequestLoginInviteTeam> _parser = new pb::MessageParser<LoginRequestLoginInviteTeam>(() => new LoginRequestLoginInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestLoginInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestLoginInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestLoginInviteTeam(LoginRequestLoginInviteTeam other) : this() {
      qwInviteId_ = other.qwInviteId_;
      qwInviteeId_ = other.qwInviteeId_;
      qwTeamId_ = other.qwTeamId_;
      dwTeamServerId_ = other.dwTeamServerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestLoginInviteTeam Clone() {
      return new LoginRequestLoginInviteTeam(this);
    }

    /// <summary>Field number for the "qw_invite_id" field.</summary>
    public const int QwInviteIdFieldNumber = 1;
    private ulong qwInviteId_;
    /// <summary>
    ///谁邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteId {
      get { return qwInviteId_; }
      set {
        qwInviteId_ = value;
      }
    }

    /// <summary>Field number for the "qw_invitee_id" field.</summary>
    public const int QwInviteeIdFieldNumber = 2;
    private ulong qwInviteeId_;
    /// <summary>
    ///被邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteeId {
      get { return qwInviteeId_; }
      set {
        qwInviteeId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 3;
    private ulong qwTeamId_;
    /// <summary>
    ///邀请的队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dw_team_server_id" field.</summary>
    public const int DwTeamServerIdFieldNumber = 4;
    private uint dwTeamServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwTeamServerId {
      get { return dwTeamServerId_; }
      set {
        dwTeamServerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestLoginInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestLoginInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwInviteId != other.QwInviteId) return false;
      if (QwInviteeId != other.QwInviteeId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (DwTeamServerId != other.DwTeamServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwInviteId != 0UL) hash ^= QwInviteId.GetHashCode();
      if (QwInviteeId != 0UL) hash ^= QwInviteeId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (DwTeamServerId != 0) hash ^= DwTeamServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwInviteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwInviteeId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwTeamServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwInviteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteeId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwTeamServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestLoginInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwInviteId != 0UL) {
        QwInviteId = other.QwInviteId;
      }
      if (other.QwInviteeId != 0UL) {
        QwInviteeId = other.QwInviteeId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.DwTeamServerId != 0) {
        DwTeamServerId = other.DwTeamServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwInviteId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwInviteeId = input.ReadUInt64();
            break;
          }
          case 24: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 32: {
            DwTeamServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAckLoginInviteTeam : pb::IMessage<LoginAckLoginInviteTeam> {
    private static readonly pb::MessageParser<LoginAckLoginInviteTeam> _parser = new pb::MessageParser<LoginAckLoginInviteTeam>(() => new LoginAckLoginInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAckLoginInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckLoginInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckLoginInviteTeam(LoginAckLoginInviteTeam other) : this() {
      dwResult_ = other.dwResult_;
      qwInviteId_ = other.qwInviteId_;
      qwInviteeId_ = other.qwInviteeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAckLoginInviteTeam Clone() {
      return new LoginAckLoginInviteTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_invite_id" field.</summary>
    public const int QwInviteIdFieldNumber = 2;
    private ulong qwInviteId_;
    /// <summary>
    ///谁邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteId {
      get { return qwInviteId_; }
      set {
        qwInviteId_ = value;
      }
    }

    /// <summary>Field number for the "qw_invitee_id" field.</summary>
    public const int QwInviteeIdFieldNumber = 3;
    private ulong qwInviteeId_;
    /// <summary>
    ///被邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteeId {
      get { return qwInviteeId_; }
      set {
        qwInviteeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAckLoginInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAckLoginInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwInviteId != other.QwInviteId) return false;
      if (QwInviteeId != other.QwInviteeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwInviteId != 0UL) hash ^= QwInviteId.GetHashCode();
      if (QwInviteeId != 0UL) hash ^= QwInviteeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwInviteId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QwInviteeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwInviteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAckLoginInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwInviteId != 0UL) {
        QwInviteId = other.QwInviteId;
      }
      if (other.QwInviteeId != 0UL) {
        QwInviteeId = other.QwInviteeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwInviteId = input.ReadUInt64();
            break;
          }
          case 24: {
            QwInviteeId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginNotifyLoginPlayerRefuseEnterTeam : pb::IMessage<LoginNotifyLoginPlayerRefuseEnterTeam> {
    private static readonly pb::MessageParser<LoginNotifyLoginPlayerRefuseEnterTeam> _parser = new pb::MessageParser<LoginNotifyLoginPlayerRefuseEnterTeam>(() => new LoginNotifyLoginPlayerRefuseEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNotifyLoginPlayerRefuseEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerRefuseEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerRefuseEnterTeam(LoginNotifyLoginPlayerRefuseEnterTeam other) : this() {
      qwInviteId_ = other.qwInviteId_;
      qwInviteeId_ = other.qwInviteeId_;
      szReason_ = other.szReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginNotifyLoginPlayerRefuseEnterTeam Clone() {
      return new LoginNotifyLoginPlayerRefuseEnterTeam(this);
    }

    /// <summary>Field number for the "qw_invite_id" field.</summary>
    public const int QwInviteIdFieldNumber = 1;
    private ulong qwInviteId_;
    /// <summary>
    ///谁邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteId {
      get { return qwInviteId_; }
      set {
        qwInviteId_ = value;
      }
    }

    /// <summary>Field number for the "qw_invitee_id" field.</summary>
    public const int QwInviteeIdFieldNumber = 2;
    private ulong qwInviteeId_;
    /// <summary>
    ///被邀请的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwInviteeId {
      get { return qwInviteeId_; }
      set {
        qwInviteeId_ = value;
      }
    }

    /// <summary>Field number for the "sz_Reason" field.</summary>
    public const int SzReasonFieldNumber = 3;
    private string szReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzReason {
      get { return szReason_; }
      set {
        szReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginNotifyLoginPlayerRefuseEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginNotifyLoginPlayerRefuseEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwInviteId != other.QwInviteId) return false;
      if (QwInviteeId != other.QwInviteeId) return false;
      if (SzReason != other.SzReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwInviteId != 0UL) hash ^= QwInviteId.GetHashCode();
      if (QwInviteeId != 0UL) hash ^= QwInviteeId.GetHashCode();
      if (SzReason.Length != 0) hash ^= SzReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwInviteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwInviteeId);
      }
      if (SzReason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwInviteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteId);
      }
      if (QwInviteeId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwInviteeId);
      }
      if (SzReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginNotifyLoginPlayerRefuseEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwInviteId != 0UL) {
        QwInviteId = other.QwInviteId;
      }
      if (other.QwInviteeId != 0UL) {
        QwInviteeId = other.QwInviteeId;
      }
      if (other.SzReason.Length != 0) {
        SzReason = other.SzReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwInviteId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwInviteeId = input.ReadUInt64();
            break;
          }
          case 26: {
            SzReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///login->team
  /// </summary>
  public sealed partial class LoginRequestTeamMakeTeam : pb::IMessage<LoginRequestTeamMakeTeam> {
    private static readonly pb::MessageParser<LoginRequestTeamMakeTeam> _parser = new pb::MessageParser<LoginRequestTeamMakeTeam>(() => new LoginRequestTeamMakeTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamMakeTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamMakeTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamMakeTeam(LoginRequestTeamMakeTeam other) : this() {
      RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamMakeTeam Clone() {
      return new LoginRequestTeamMakeTeam(this);
    }

    /// <summary>Field number for the "role_data" field.</summary>
    public const int RoleDataFieldNumber = 1;
    private global::GameProto.RoleData roleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.RoleData RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamMakeTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamMakeTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoleData, other.RoleData)) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roleData_ != null) hash ^= RoleData.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roleData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoleData);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamMakeTeam other) {
      if (other == null) {
        return;
      }
      if (other.roleData_ != null) {
        if (roleData_ == null) {
          roleData_ = new global::GameProto.RoleData();
        }
        RoleData.MergeFrom(other.RoleData);
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roleData_ == null) {
              roleData_ = new global::GameProto.RoleData();
            }
            input.ReadMessage(roleData_);
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamInviteTeam : pb::IMessage<LoginRequestTeamInviteTeam> {
    private static readonly pb::MessageParser<LoginRequestTeamInviteTeam> _parser = new pb::MessageParser<LoginRequestTeamInviteTeam>(() => new LoginRequestTeamInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamInviteTeam(LoginRequestTeamInviteTeam other) : this() {
      dwResult_ = other.dwResult_;
      dwSlotId_ = other.dwSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamInviteTeam Clone() {
      return new LoginRequestTeamInviteTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot_id" field.</summary>
    public const int DwSlotIdFieldNumber = 2;
    private uint dwSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlotId {
      get { return dwSlotId_; }
      set {
        dwSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwSlotId != other.DwSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwSlotId != 0) hash ^= DwSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwSlotId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwSlotId != 0) {
        DwSlotId = other.DwSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamChangeSlot : pb::IMessage<LoginRequestTeamChangeSlot> {
    private static readonly pb::MessageParser<LoginRequestTeamChangeSlot> _parser = new pb::MessageParser<LoginRequestTeamChangeSlot>(() => new LoginRequestTeamChangeSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamChangeSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamChangeSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamChangeSlot(LoginRequestTeamChangeSlot other) : this() {
      dwResult_ = other.dwResult_;
      dwSlotId_ = other.dwSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamChangeSlot Clone() {
      return new LoginRequestTeamChangeSlot(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot_id" field.</summary>
    public const int DwSlotIdFieldNumber = 2;
    private uint dwSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlotId {
      get { return dwSlotId_; }
      set {
        dwSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamChangeSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamChangeSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwSlotId != other.DwSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwSlotId != 0) hash ^= DwSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwSlotId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamChangeSlot other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwSlotId != 0) {
        DwSlotId = other.DwSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamKickPlayer : pb::IMessage<LoginRequestTeamKickPlayer> {
    private static readonly pb::MessageParser<LoginRequestTeamKickPlayer> _parser = new pb::MessageParser<LoginRequestTeamKickPlayer>(() => new LoginRequestTeamKickPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamKickPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamKickPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamKickPlayer(LoginRequestTeamKickPlayer other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamKickPlayer Clone() {
      return new LoginRequestTeamKickPlayer(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamKickPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamKickPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamKickPlayer other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamGameStart : pb::IMessage<LoginRequestTeamGameStart> {
    private static readonly pb::MessageParser<LoginRequestTeamGameStart> _parser = new pb::MessageParser<LoginRequestTeamGameStart>(() => new LoginRequestTeamGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamGameStart(LoginRequestTeamGameStart other) : this() {
      qwTeamId_ = other.qwTeamId_;
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamGameStart Clone() {
      return new LoginRequestTeamGameStart(this);
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 1;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwTeamId != other.QwTeamId) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwTeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwTeamId);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamGameStart other) {
      if (other == null) {
        return;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamEnterTeam : pb::IMessage<LoginRequestTeamEnterTeam> {
    private static readonly pb::MessageParser<LoginRequestTeamEnterTeam> _parser = new pb::MessageParser<LoginRequestTeamEnterTeam>(() => new LoginRequestTeamEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamEnterTeam(LoginRequestTeamEnterTeam other) : this() {
      qwTeamId_ = other.qwTeamId_;
      RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamEnterTeam Clone() {
      return new LoginRequestTeamEnterTeam(this);
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 1;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "role_data" field.</summary>
    public const int RoleDataFieldNumber = 2;
    private global::GameProto.RoleData roleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.RoleData RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwTeamId != other.QwTeamId) return false;
      if (!object.Equals(RoleData, other.RoleData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (roleData_ != null) hash ^= RoleData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwTeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwTeamId);
      }
      if (roleData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoleData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.roleData_ != null) {
        if (roleData_ == null) {
          roleData_ = new global::GameProto.RoleData();
        }
        RoleData.MergeFrom(other.RoleData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (roleData_ == null) {
              roleData_ = new global::GameProto.RoleData();
            }
            input.ReadMessage(roleData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequestTeamPlayerLeave : pb::IMessage<LoginRequestTeamPlayerLeave> {
    private static readonly pb::MessageParser<LoginRequestTeamPlayerLeave> _parser = new pb::MessageParser<LoginRequestTeamPlayerLeave>(() => new LoginRequestTeamPlayerLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequestTeamPlayerLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamPlayerLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamPlayerLeave(LoginRequestTeamPlayerLeave other) : this() {
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequestTeamPlayerLeave Clone() {
      return new LoginRequestTeamPlayerLeave(this);
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 1;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequestTeamPlayerLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequestTeamPlayerLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequestTeamPlayerLeave other) {
      if (other == null) {
        return;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///team->login
  /// </summary>
  public sealed partial class TeamAckLoginMakeTeam : pb::IMessage<TeamAckLoginMakeTeam> {
    private static readonly pb::MessageParser<TeamAckLoginMakeTeam> _parser = new pb::MessageParser<TeamAckLoginMakeTeam>(() => new TeamAckLoginMakeTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginMakeTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginMakeTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginMakeTeam(TeamAckLoginMakeTeam other) : this() {
      dwResult_ = other.dwResult_;
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      dwSlotId_ = other.dwSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginMakeTeam Clone() {
      return new TeamAckLoginMakeTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 3;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot_id" field.</summary>
    public const int DwSlotIdFieldNumber = 4;
    private uint dwSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlotId {
      get { return dwSlotId_; }
      set {
        dwSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginMakeTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginMakeTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (DwSlotId != other.DwSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (DwSlotId != 0) hash ^= DwSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QwTeamId);
      }
      if (DwSlotId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (DwSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginMakeTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.DwSlotId != 0) {
        DwSlotId = other.DwSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 32: {
            DwSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamNotifyLoginTeamInfo : pb::IMessage<TeamNotifyLoginTeamInfo> {
    private static readonly pb::MessageParser<TeamNotifyLoginTeamInfo> _parser = new pb::MessageParser<TeamNotifyLoginTeamInfo>(() => new TeamNotifyLoginTeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamNotifyLoginTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNotifyLoginTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNotifyLoginTeamInfo(TeamNotifyLoginTeamInfo other) : this() {
      teamRoleData_ = other.teamRoleData_.Clone();
      qwTeamId_ = other.qwTeamId_;
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNotifyLoginTeamInfo Clone() {
      return new TeamNotifyLoginTeamInfo(this);
    }

    /// <summary>Field number for the "team_role_data" field.</summary>
    public const int TeamRoleDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.TeamRoleData> _repeated_teamRoleData_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.TeamRoleData.Parser);
    private readonly pbc::RepeatedField<global::GameProto.TeamRoleData> teamRoleData_ = new pbc::RepeatedField<global::GameProto.TeamRoleData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.TeamRoleData> TeamRoleData {
      get { return teamRoleData_; }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 2;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 3;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamNotifyLoginTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamNotifyLoginTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teamRoleData_.Equals(other.teamRoleData_)) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teamRoleData_.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamRoleData_.WriteTo(output, _repeated_teamRoleData_codec);
      if (QwTeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwTeamId);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamRoleData_.CalculateSize(_repeated_teamRoleData_codec);
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamNotifyLoginTeamInfo other) {
      if (other == null) {
        return;
      }
      teamRoleData_.Add(other.teamRoleData_);
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teamRoleData_.AddEntriesFrom(input, _repeated_teamRoleData_codec);
            break;
          }
          case 16: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 24: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginInviteTeam : pb::IMessage<TeamAckLoginInviteTeam> {
    private static readonly pb::MessageParser<TeamAckLoginInviteTeam> _parser = new pb::MessageParser<TeamAckLoginInviteTeam>(() => new TeamAckLoginInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginInviteTeam(TeamAckLoginInviteTeam other) : this() {
      dwResult_ = other.dwResult_;
      dwSlot_ = other.dwSlot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginInviteTeam Clone() {
      return new TeamAckLoginInviteTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot" field.</summary>
    public const int DwSlotFieldNumber = 2;
    private uint dwSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlot {
      get { return dwSlot_; }
      set {
        dwSlot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwSlot != other.DwSlot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwSlot != 0) hash ^= DwSlot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwSlot != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwSlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwSlot != 0) {
        DwSlot = other.DwSlot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwSlot = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginChangeSlot : pb::IMessage<TeamAckLoginChangeSlot> {
    private static readonly pb::MessageParser<TeamAckLoginChangeSlot> _parser = new pb::MessageParser<TeamAckLoginChangeSlot>(() => new TeamAckLoginChangeSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginChangeSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginChangeSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginChangeSlot(TeamAckLoginChangeSlot other) : this() {
      dwResult_ = other.dwResult_;
      dwSlot_ = other.dwSlot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginChangeSlot Clone() {
      return new TeamAckLoginChangeSlot(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_slot" field.</summary>
    public const int DwSlotFieldNumber = 2;
    private uint dwSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlot {
      get { return dwSlot_; }
      set {
        dwSlot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginChangeSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginChangeSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwSlot != other.DwSlot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwSlot != 0) hash ^= DwSlot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwSlot != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwSlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginChangeSlot other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwSlot != 0) {
        DwSlot = other.DwSlot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwSlot = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginKickPlayer : pb::IMessage<TeamAckLoginKickPlayer> {
    private static readonly pb::MessageParser<TeamAckLoginKickPlayer> _parser = new pb::MessageParser<TeamAckLoginKickPlayer>(() => new TeamAckLoginKickPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginKickPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginKickPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginKickPlayer(TeamAckLoginKickPlayer other) : this() {
      dwResult_ = other.dwResult_;
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginKickPlayer Clone() {
      return new TeamAckLoginKickPlayer(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginKickPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginKickPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginKickPlayer other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginGameStart : pb::IMessage<TeamAckLoginGameStart> {
    private static readonly pb::MessageParser<TeamAckLoginGameStart> _parser = new pb::MessageParser<TeamAckLoginGameStart>(() => new TeamAckLoginGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginGameStart(TeamAckLoginGameStart other) : this() {
      dwResult_ = other.dwResult_;
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      szListenIp_ = other.szListenIp_;
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginGameStart Clone() {
      return new TeamAckLoginGameStart(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 2;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 3;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 4;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "sz_listen_ip" field.</summary>
    public const int SzListenIpFieldNumber = 5;
    private string szListenIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzListenIp {
      get { return szListenIp_; }
      set {
        szListenIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 6;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 7;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (SzListenIp != other.SzListenIp) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (SzListenIp.Length != 0) hash ^= SzListenIp.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwPlayerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (SzListenIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SzListenIp);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (SzListenIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzListenIp);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginGameStart other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.SzListenIp.Length != 0) {
        SzListenIp = other.SzListenIp;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 42: {
            SzListenIp = input.ReadString();
            break;
          }
          case 48: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 56: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginEnterTeam : pb::IMessage<TeamAckLoginEnterTeam> {
    private static readonly pb::MessageParser<TeamAckLoginEnterTeam> _parser = new pb::MessageParser<TeamAckLoginEnterTeam>(() => new TeamAckLoginEnterTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginEnterTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginEnterTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginEnterTeam(TeamAckLoginEnterTeam other) : this() {
      dwResult_ = other.dwResult_;
      qwPlayerId_ = other.qwPlayerId_;
      qwTeamId_ = other.qwTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginEnterTeam Clone() {
      return new TeamAckLoginEnterTeam(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 3;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginEnterTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginEnterTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      if (QwTeamId != other.QwTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QwTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginEnterTeam other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            QwTeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamAckLoginPlayerLeave : pb::IMessage<TeamAckLoginPlayerLeave> {
    private static readonly pb::MessageParser<TeamAckLoginPlayerLeave> _parser = new pb::MessageParser<TeamAckLoginPlayerLeave>(() => new TeamAckLoginPlayerLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamAckLoginPlayerLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginPlayerLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginPlayerLeave(TeamAckLoginPlayerLeave other) : this() {
      dwResult_ = other.dwResult_;
      qwPlayerId_ = other.qwPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamAckLoginPlayerLeave Clone() {
      return new TeamAckLoginPlayerLeave(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_id" field.</summary>
    public const int QwPlayerIdFieldNumber = 2;
    private ulong qwPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerId {
      get { return qwPlayerId_; }
      set {
        qwPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamAckLoginPlayerLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamAckLoginPlayerLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (QwPlayerId != other.QwPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (QwPlayerId != 0UL) hash ^= QwPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (QwPlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QwPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (QwPlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamAckLoginPlayerLeave other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.QwPlayerId != 0UL) {
        QwPlayerId = other.QwPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            QwPlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///team->gamemanager
  /// </summary>
  public sealed partial class TeamRequestGameManagerGameStart : pb::IMessage<TeamRequestGameManagerGameStart> {
    private static readonly pb::MessageParser<TeamRequestGameManagerGameStart> _parser = new pb::MessageParser<TeamRequestGameManagerGameStart>(() => new TeamRequestGameManagerGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamRequestGameManagerGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRequestGameManagerGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRequestGameManagerGameStart(TeamRequestGameManagerGameStart other) : this() {
      qwTeamId_ = other.qwTeamId_;
      qwPlayerIds_ = other.qwPlayerIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRequestGameManagerGameStart Clone() {
      return new TeamRequestGameManagerGameStart(this);
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 1;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_ids" field.</summary>
    public const int QwPlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_qwPlayerIds_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> qwPlayerIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> QwPlayerIds {
      get { return qwPlayerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamRequestGameManagerGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamRequestGameManagerGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QwTeamId != other.QwTeamId) return false;
      if(!qwPlayerIds_.Equals(other.qwPlayerIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      hash ^= qwPlayerIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QwTeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QwTeamId);
      }
      qwPlayerIds_.WriteTo(output, _repeated_qwPlayerIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      size += qwPlayerIds_.CalculateSize(_repeated_qwPlayerIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamRequestGameManagerGameStart other) {
      if (other == null) {
        return;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      qwPlayerIds_.Add(other.qwPlayerIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            qwPlayerIds_.AddEntriesFrom(input, _repeated_qwPlayerIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->team
  /// </summary>
  public sealed partial class GameManagerAckTeamGameStart : pb::IMessage<GameManagerAckTeamGameStart> {
    private static readonly pb::MessageParser<GameManagerAckTeamGameStart> _parser = new pb::MessageParser<GameManagerAckTeamGameStart>(() => new GameManagerAckTeamGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckTeamGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckTeamGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckTeamGameStart(GameManagerAckTeamGameStart other) : this() {
      dwResult_ = other.dwResult_;
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      qwTeamId_ = other.qwTeamId_;
      szListenIp_ = other.szListenIp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckTeamGameStart Clone() {
      return new GameManagerAckTeamGameStart(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 2;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 3;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 4;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 5;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "sz_listen_ip" field.</summary>
    public const int SzListenIpFieldNumber = 6;
    private string szListenIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzListenIp {
      get { return szListenIp_; }
      set {
        szListenIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckTeamGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckTeamGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (SzListenIp != other.SzListenIp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (SzListenIp.Length != 0) hash ^= SzListenIp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (DwPlayerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(QwTeamId);
      }
      if (SzListenIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SzListenIp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (SzListenIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzListenIp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckTeamGameStart other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.SzListenIp.Length != 0) {
        SzListenIp = other.SzListenIp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
          case 16: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 40: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 50: {
            SzListenIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///game->gamemanager
  /// </summary>
  public sealed partial class GameNotifyGameManagerInfo : pb::IMessage<GameNotifyGameManagerInfo> {
    private static readonly pb::MessageParser<GameNotifyGameManagerInfo> _parser = new pb::MessageParser<GameNotifyGameManagerInfo>(() => new GameNotifyGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNotifyGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo(GameNotifyGameManagerInfo other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      qwTeamId_ = other.qwTeamId_;
      dwTeamServerId_ = other.dwTeamServerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo Clone() {
      return new GameNotifyGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "qw_team_id" field.</summary>
    public const int QwTeamIdFieldNumber = 4;
    private ulong qwTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwTeamId {
      get { return qwTeamId_; }
      set {
        qwTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dw_team_server_id" field.</summary>
    public const int DwTeamServerIdFieldNumber = 5;
    private uint dwTeamServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwTeamServerId {
      get { return dwTeamServerId_; }
      set {
        dwTeamServerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNotifyGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNotifyGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (QwTeamId != other.QwTeamId) return false;
      if (DwTeamServerId != other.DwTeamServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (QwTeamId != 0UL) hash ^= QwTeamId.GetHashCode();
      if (DwTeamServerId != 0) hash ^= DwTeamServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (QwTeamId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DwTeamServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (QwTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwTeamId);
      }
      if (DwTeamServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwTeamServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNotifyGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.QwTeamId != 0UL) {
        QwTeamId = other.QwTeamId;
      }
      if (other.DwTeamServerId != 0) {
        DwTeamServerId = other.DwTeamServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            QwTeamId = input.ReadUInt64();
            break;
          }
          case 40: {
            DwTeamServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->game
  /// </summary>
  public sealed partial class GameManagerAckGameInfoResult : pb::IMessage<GameManagerAckGameInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckGameInfoResult> _parser = new pb::MessageParser<GameManagerAckGameInfoResult>(() => new GameManagerAckGameInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckGameInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult(GameManagerAckGameInfoResult other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult Clone() {
      return new GameManagerAckGameInfoResult(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckGameInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckGameInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckGameInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->gamemanager
  /// </summary>
  public sealed partial class PlayerRequestGameManagerInfo : pb::IMessage<PlayerRequestGameManagerInfo> {
    private static readonly pb::MessageParser<PlayerRequestGameManagerInfo> _parser = new pb::MessageParser<PlayerRequestGameManagerInfo>(() => new PlayerRequestGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo(PlayerRequestGameManagerInfo other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo Clone() {
      return new PlayerRequestGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->player
  /// </summary>
  public sealed partial class GameManagerAckPlayerInfoResult : pb::IMessage<GameManagerAckPlayerInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckPlayerInfoResult> _parser = new pb::MessageParser<GameManagerAckPlayerInfoResult>(() => new GameManagerAckPlayerInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckPlayerInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult(GameManagerAckPlayerInfoResult other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult Clone() {
      return new GameManagerAckPlayerInfoResult(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckPlayerInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckPlayerInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckPlayerInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->game
  /// </summary>
  public sealed partial class PlayerRequestGameTest : pb::IMessage<PlayerRequestGameTest> {
    private static readonly pb::MessageParser<PlayerRequestGameTest> _parser = new pb::MessageParser<PlayerRequestGameTest>(() => new PlayerRequestGameTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest(PlayerRequestGameTest other) : this() {
      szTest_ = other.szTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest Clone() {
      return new PlayerRequestGameTest(this);
    }

    /// <summary>Field number for the "sz_test" field.</summary>
    public const int SzTestFieldNumber = 1;
    private string szTest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzTest {
      get { return szTest_; }
      set {
        szTest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzTest != other.SzTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzTest.Length != 0) hash ^= SzTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzTest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzTest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameTest other) {
      if (other == null) {
        return;
      }
      if (other.SzTest.Length != 0) {
        SzTest = other.SzTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzTest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///serverinfo(server->server_center, server_center->server)
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      dwServerId_ = other.dwServerId_;
      szListenIp_ = other.szListenIp_;
      dwTeamPort_ = other.dwTeamPort_;
      dwGameServerManagerPort_ = other.dwGameServerManagerPort_;
      dwLoginPort_ = other.dwLoginPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "dw_server_id" field.</summary>
    public const int DwServerIdFieldNumber = 1;
    private uint dwServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerId {
      get { return dwServerId_; }
      set {
        dwServerId_ = value;
      }
    }

    /// <summary>Field number for the "sz_listen_ip" field.</summary>
    public const int SzListenIpFieldNumber = 2;
    private string szListenIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzListenIp {
      get { return szListenIp_; }
      set {
        szListenIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dw_team_port" field.</summary>
    public const int DwTeamPortFieldNumber = 3;
    private uint dwTeamPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwTeamPort {
      get { return dwTeamPort_; }
      set {
        dwTeamPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_game_server_manager_port" field.</summary>
    public const int DwGameServerManagerPortFieldNumber = 4;
    private uint dwGameServerManagerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwGameServerManagerPort {
      get { return dwGameServerManagerPort_; }
      set {
        dwGameServerManagerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_login_port" field.</summary>
    public const int DwLoginPortFieldNumber = 5;
    private uint dwLoginPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwLoginPort {
      get { return dwLoginPort_; }
      set {
        dwLoginPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwServerId != other.DwServerId) return false;
      if (SzListenIp != other.SzListenIp) return false;
      if (DwTeamPort != other.DwTeamPort) return false;
      if (DwGameServerManagerPort != other.DwGameServerManagerPort) return false;
      if (DwLoginPort != other.DwLoginPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwServerId != 0) hash ^= DwServerId.GetHashCode();
      if (SzListenIp.Length != 0) hash ^= SzListenIp.GetHashCode();
      if (DwTeamPort != 0) hash ^= DwTeamPort.GetHashCode();
      if (DwGameServerManagerPort != 0) hash ^= DwGameServerManagerPort.GetHashCode();
      if (DwLoginPort != 0) hash ^= DwLoginPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwServerId);
      }
      if (SzListenIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzListenIp);
      }
      if (DwTeamPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwTeamPort);
      }
      if (DwGameServerManagerPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DwGameServerManagerPort);
      }
      if (DwLoginPort != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DwLoginPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerId);
      }
      if (SzListenIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzListenIp);
      }
      if (DwTeamPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwTeamPort);
      }
      if (DwGameServerManagerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwGameServerManagerPort);
      }
      if (DwLoginPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwLoginPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwServerId != 0) {
        DwServerId = other.DwServerId;
      }
      if (other.SzListenIp.Length != 0) {
        SzListenIp = other.SzListenIp;
      }
      if (other.DwTeamPort != 0) {
        DwTeamPort = other.DwTeamPort;
      }
      if (other.DwGameServerManagerPort != 0) {
        DwGameServerManagerPort = other.DwGameServerManagerPort;
      }
      if (other.DwLoginPort != 0) {
        DwLoginPort = other.DwLoginPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            SzListenIp = input.ReadString();
            break;
          }
          case 24: {
            DwTeamPort = input.ReadUInt32();
            break;
          }
          case 32: {
            DwGameServerManagerPort = input.ReadUInt32();
            break;
          }
          case 40: {
            DwLoginPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
