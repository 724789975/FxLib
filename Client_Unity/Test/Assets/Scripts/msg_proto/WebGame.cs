// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: web_game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from web_game.proto</summary>
  public static partial class WebGameReflection {

    #region Descriptor
    /// <summary>File descriptor for web_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg53ZWJfZ2FtZS5wcm90bxIJR2FtZVByb3RvIoIBChlHYW1lTm90aWZ5R2Ft",
            "ZU1hbmFnZXJJbmZvEhYKDmR3X3BsYXllcl9wb3J0GAEgASgNEhYKDmR3X3Nl",
            "cnZlcl9wb3J0GAIgASgNEhwKFGR3X3NsYXZlX3NlcnZlcl9wb3J0GAMgASgN",
            "EhcKD3F3X3BsYXllcl9wb2ludBgEIAEoBCIxChxHYW1lTWFuYWdlckFja0dh",
            "bWVJbmZvUmVzdWx0EhEKCWR3X3Jlc3VsdBgBIAEoDSIxChxQbGF5ZXJSZXF1",
            "ZXN0R2FtZU1hbmFnZXJJbmZvEhEKCWR3X3Jlc3VsdBgBIAEoDSJuCh5HYW1l",
            "TWFuYWdlckFja1BsYXllckluZm9SZXN1bHQSFgoOZHdfcGxheWVyX3BvcnQY",
            "ASABKA0SFgoOZHdfc2VydmVyX3BvcnQYAiABKA0SHAoUZHdfc2xhdmVfc2Vy",
            "dmVyX3BvcnQYAyABKA0iKAoVUGxheWVyUmVxdWVzdEdhbWVUZXN0Eg8KB3N6",
            "X3Rlc3QYASABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameNotifyGameManagerInfo), global::GameProto.GameNotifyGameManagerInfo.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort", "QwPlayerPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckGameInfoResult), global::GameProto.GameManagerAckGameInfoResult.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameManagerInfo), global::GameProto.PlayerRequestGameManagerInfo.Parser, new[]{ "DwResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.GameManagerAckPlayerInfoResult), global::GameProto.GameManagerAckPlayerInfoResult.Parser, new[]{ "DwPlayerPort", "DwServerPort", "DwSlaveServerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerRequestGameTest), global::GameProto.PlayerRequestGameTest.Parser, new[]{ "SzTest" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///game->gamemanager
  /// </summary>
  public sealed partial class GameNotifyGameManagerInfo : pb::IMessage<GameNotifyGameManagerInfo> {
    private static readonly pb::MessageParser<GameNotifyGameManagerInfo> _parser = new pb::MessageParser<GameNotifyGameManagerInfo>(() => new GameNotifyGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNotifyGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo(GameNotifyGameManagerInfo other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      qwPlayerPoint_ = other.qwPlayerPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotifyGameManagerInfo Clone() {
      return new GameNotifyGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    /// <summary>Field number for the "qw_player_point" field.</summary>
    public const int QwPlayerPointFieldNumber = 4;
    private ulong qwPlayerPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QwPlayerPoint {
      get { return qwPlayerPoint_; }
      set {
        qwPlayerPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNotifyGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNotifyGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      if (QwPlayerPoint != other.QwPlayerPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (QwPlayerPoint != 0UL) hash ^= QwPlayerPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (QwPlayerPoint != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(QwPlayerPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (QwPlayerPoint != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QwPlayerPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNotifyGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      if (other.QwPlayerPoint != 0UL) {
        QwPlayerPoint = other.QwPlayerPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
          case 32: {
            QwPlayerPoint = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->game
  /// </summary>
  public sealed partial class GameManagerAckGameInfoResult : pb::IMessage<GameManagerAckGameInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckGameInfoResult> _parser = new pb::MessageParser<GameManagerAckGameInfoResult>(() => new GameManagerAckGameInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckGameInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult(GameManagerAckGameInfoResult other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckGameInfoResult Clone() {
      return new GameManagerAckGameInfoResult(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckGameInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckGameInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckGameInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->gamemanager
  /// </summary>
  public sealed partial class PlayerRequestGameManagerInfo : pb::IMessage<PlayerRequestGameManagerInfo> {
    private static readonly pb::MessageParser<PlayerRequestGameManagerInfo> _parser = new pb::MessageParser<PlayerRequestGameManagerInfo>(() => new PlayerRequestGameManagerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameManagerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo(PlayerRequestGameManagerInfo other) : this() {
      dwResult_ = other.dwResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameManagerInfo Clone() {
      return new PlayerRequestGameManagerInfo(this);
    }

    /// <summary>Field number for the "dw_result" field.</summary>
    public const int DwResultFieldNumber = 1;
    private uint dwResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwResult {
      get { return dwResult_; }
      set {
        dwResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameManagerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameManagerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwResult != other.DwResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwResult != 0) hash ^= DwResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwResult != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameManagerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DwResult != 0) {
        DwResult = other.DwResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwResult = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gamemanager->player
  /// </summary>
  public sealed partial class GameManagerAckPlayerInfoResult : pb::IMessage<GameManagerAckPlayerInfoResult> {
    private static readonly pb::MessageParser<GameManagerAckPlayerInfoResult> _parser = new pb::MessageParser<GameManagerAckPlayerInfoResult>(() => new GameManagerAckPlayerInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameManagerAckPlayerInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult(GameManagerAckPlayerInfoResult other) : this() {
      dwPlayerPort_ = other.dwPlayerPort_;
      dwServerPort_ = other.dwServerPort_;
      dwSlaveServerPort_ = other.dwSlaveServerPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameManagerAckPlayerInfoResult Clone() {
      return new GameManagerAckPlayerInfoResult(this);
    }

    /// <summary>Field number for the "dw_player_port" field.</summary>
    public const int DwPlayerPortFieldNumber = 1;
    private uint dwPlayerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwPlayerPort {
      get { return dwPlayerPort_; }
      set {
        dwPlayerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_server_port" field.</summary>
    public const int DwServerPortFieldNumber = 2;
    private uint dwServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwServerPort {
      get { return dwServerPort_; }
      set {
        dwServerPort_ = value;
      }
    }

    /// <summary>Field number for the "dw_slave_server_port" field.</summary>
    public const int DwSlaveServerPortFieldNumber = 3;
    private uint dwSlaveServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DwSlaveServerPort {
      get { return dwSlaveServerPort_; }
      set {
        dwSlaveServerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameManagerAckPlayerInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameManagerAckPlayerInfoResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwPlayerPort != other.DwPlayerPort) return false;
      if (DwServerPort != other.DwServerPort) return false;
      if (DwSlaveServerPort != other.DwSlaveServerPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwPlayerPort != 0) hash ^= DwPlayerPort.GetHashCode();
      if (DwServerPort != 0) hash ^= DwServerPort.GetHashCode();
      if (DwSlaveServerPort != 0) hash ^= DwSlaveServerPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwPlayerPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwPlayerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwPlayerPort);
      }
      if (DwServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwServerPort);
      }
      if (DwSlaveServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DwSlaveServerPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameManagerAckPlayerInfoResult other) {
      if (other == null) {
        return;
      }
      if (other.DwPlayerPort != 0) {
        DwPlayerPort = other.DwPlayerPort;
      }
      if (other.DwServerPort != 0) {
        DwServerPort = other.DwServerPort;
      }
      if (other.DwSlaveServerPort != 0) {
        DwSlaveServerPort = other.DwSlaveServerPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwPlayerPort = input.ReadUInt32();
            break;
          }
          case 16: {
            DwServerPort = input.ReadUInt32();
            break;
          }
          case 24: {
            DwSlaveServerPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///player->game
  /// </summary>
  public sealed partial class PlayerRequestGameTest : pb::IMessage<PlayerRequestGameTest> {
    private static readonly pb::MessageParser<PlayerRequestGameTest> _parser = new pb::MessageParser<PlayerRequestGameTest>(() => new PlayerRequestGameTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequestGameTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.WebGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest(PlayerRequestGameTest other) : this() {
      szTest_ = other.szTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequestGameTest Clone() {
      return new PlayerRequestGameTest(this);
    }

    /// <summary>Field number for the "sz_test" field.</summary>
    public const int SzTestFieldNumber = 1;
    private string szTest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzTest {
      get { return szTest_; }
      set {
        szTest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequestGameTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequestGameTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzTest != other.SzTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzTest.Length != 0) hash ^= SzTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzTest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzTest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequestGameTest other) {
      if (other == null) {
        return;
      }
      if (other.SzTest.Length != 0) {
        SzTest = other.SzTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzTest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
