using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class Tetris
{
	public uint m_dwTetrisShape;
	public uint m_dwTetrisDirect;
	public uint m_dwTetrisColor;
}

[System.Serializable]
public class TetrisData
{
	public static readonly uint s_dwColumn = 12;
	public static readonly uint s_dwRow = 22;
	public static readonly uint s_dwUnit = 4;

	public static readonly uint s_dwShapeCount = 7;
	public static readonly uint s_dwDirectCount = 4;

	// 7种方块的4旋转状态
	public static readonly uint[,,,] s_wTetrisTable =
	{
		// I型 { 0x00F0, 0x2222, 0x00F0, 0x2222 },  // I型
		{
			{
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
			},
			{
				{ 0x0,			0x0,		0x0,		0x0, },
				{ 0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF, },
				{ 0x0,			0x0,		0x0,		0x0, },
				{ 0x0,			0x0,		0x0,		0x0, },
			},
			{
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
				{ 0x0, 0xFFFFFFFF, 0x0, 0x0, },
			},
			{
				{ 0x0,			0x0,		0x0,		0x0, },
				{ 0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF, },
				{ 0x0,			0x0,		0x0,		0x0, },
				{ 0x0,			0x0,		0x0,		0x0, },
			},
		},
		// T型 { 0x0072, 0x0262, 0x0270, 0x0232 },  // T型
		{
			{
				{0x0,	0x0,	0xFFFFFFFF,	0x0, },
				{0x0,	0x0,	0xFFFFFFFF,	0xFFFFFFFF, },
				{0x0,	0x0,	0xFFFFFFFF,	0x0, },
				{0x0,	0x0,	0x0,		0x0, },
			},
			{
				{0x0,	0x0,		0x0,		0x0, },
				{0x0,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF, },
				{0x0,	0x0,		0xFFFFFFFF,	0x0, },
				{0x0,	0x0,		0x0,		0x0, },
			},
			{
				{0x0,	0x0,		0xFFFFFFFF,	0x0, },
				{0x0,	0xFFFFFFFF,	0xFFFFFFFF,	0x0, },
				{0x0,	0x0,		0xFFFFFFFF,	0x0, },
				{0x0,	0x0,		0x0,		0x0, },
			},
			{
				{0x0,	0x0,		0xFFFFFFFF,	0x0, },
				{0x0,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF, },
				{0x0,	0x0,		0x0,		0x0, },
				{0x0,	0x0,		0x0,		0x0, },
			},
		},
		//L型 //{ 0x0223, 0x0074, 0x0622, 0x0170 },  // L型
		{
			{
				{0x0,	0x0,	0x0,    0xFFFFFFFF, },
				{0x0,   0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, },
				{0x0,	0x0,	0x0,	0x0, },
				{0x0,	0x0,	0x0,	0x0, },
			},
			{
				{0x0,	0x0,    0xFFFFFFFF,	0x0, },
				{0x0,	0x0,    0xFFFFFFFF,	0x0, },
				{0x0,	0x0,    0xFFFFFFFF, 0xFFFFFFFF, },
				{0x0,	0x0,	0x0,	0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0xFFFFFFFF,    0x0,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
		},
		//J型 { 0x0226, 0x0470, 0x0322, 0x0071 },  // J型
		{
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0xFFFFFFFF,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
		},
		//Z型 { 0x0063, 0x0264, 0x0063, 0x0264 },  // Z型
		{
			{
				{0x0,   0x0,    0x0,    0xFFFFFFFF, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0xFFFFFFFF, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0x0, },
			},
		},
		//S型 { 0x006C, 0x0462, 0x006C, 0x0462 },  // S型
		{
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0xFFFFFFFF, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0x0,    0x0,    0xFFFFFFFF, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0x0,    0xFFFFFFFF,    0xFFFFFFFF, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
		},
		//O型 { 0x0660, 0x0660, 0x0660, 0x0660 }   // O型
		{
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
			{
				{0x0,   0x0,    0x0,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0xFFFFFFFF,    0xFFFFFFFF,    0x0, },
				{0x0,   0x0,    0x0,    0x0, },
			},
		},
	};

	public bool CheckUnderTetris(uint dwRow, uint dwCol)
	{
		uint dwColor = (m_dwTetrisPool[dwRow, dwCol] & 0xFFFFFF00);
		return dwColor != 0;
	}

	//所有的方块 每个元素代表一种颜色
	public uint[,] m_dwTetrisPool = new uint[s_dwRow, s_dwColumn];
	//当前方块
	//uint[,] m_dwCurrBlock = new uint[s_dwUnit, s_dwUnit];
	////下一个方块
	//uint[,] m_dwNextBlock = new uint[s_dwUnit, s_dwUnit];

	public Tetris m_oCurrentTetris = new Tetris();

	public Tetris m_oNextTetris = new Tetris();
}

